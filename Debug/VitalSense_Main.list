
VitalSense_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800e0e8  0800e0e8  0001e0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9f8  0800e9f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800e9f8  0800e9f8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e9f8  0800e9f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9f8  0800e9f8  0001e9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9fc  0800e9fc  0001e9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ea00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002778  20000088  0800ea88  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002800  0800ea88  00022800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c52  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b45  00000000  00000000  00037d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001087  00000000  00000000  0003ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e01b  00000000  00000000  0003dec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ddb0  00000000  00000000  0006bee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d65a  00000000  00000000  00089c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a4c  00000000  00000000  001972ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0019dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e0cc 	.word	0x0800e0cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800e0cc 	.word	0x0800e0cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <Get_GSR>:

extern ADC_HandleTypeDef hadc3;
extern uint16_t GSR_VAL;


void Get_GSR(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 8000c30:	4809      	ldr	r0, [pc, #36]	; (8000c58 <Get_GSR+0x2c>)
 8000c32:	f001 fc41 	bl	80024b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 10);
 8000c36:	210a      	movs	r1, #10
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <Get_GSR+0x2c>)
 8000c3a:	f001 fd2b 	bl	8002694 <HAL_ADC_PollForConversion>
	GSR_VAL = HAL_ADC_GetValue(&hadc3);
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <Get_GSR+0x2c>)
 8000c40:	f001 fe00 	bl	8002844 <HAL_ADC_GetValue>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <Get_GSR+0x30>)
 8000c4a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc3);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <Get_GSR+0x2c>)
 8000c4e:	f001 fced 	bl	800262c <HAL_ADC_Stop>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200021dc 	.word	0x200021dc
 8000c5c:	20002390 	.word	0x20002390

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	b097      	sub	sp, #92	; 0x5c
 8000c64:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fff6 	bl	8001c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f941 	bl	8000ef0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c6e:	f000 f992 	bl	8000f96 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 fbdd 	bl	8001430 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000c76:	f000 fb5d 	bl	8001334 <MX_I2C2_Init>
  MX_I2C1_Init();
 8000c7a:	f000 fb1b 	bl	80012b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c7e:	f000 fb99 	bl	80013b4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000c82:	f006 f97b 	bl	8006f7c <MX_FATFS_Init>
  MX_ADC2_Init();
 8000c86:	f000 fa4d 	bl	8001124 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000c8a:	f000 f9b1 	bl	8000ff0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000c8e:	f000 faad 	bl	80011ec <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

	DS3231_Init(&hi2c2);
 8000c92:	487e      	ldr	r0, [pc, #504]	; (8000e8c <main+0x22c>)
 8000c94:	f000 ff3a 	bl	8001b0c <DS3231_Init>
	//DS3231_SetTime(&rtc);
	MPU6050_Init();
 8000c98:	f006 faea 	bl	8007270 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/*Read time from external RTC*/
		DS3231_GetTime(&rtc);
 8000c9c:	487c      	ldr	r0, [pc, #496]	; (8000e90 <main+0x230>)
 8000c9e:	f000 ff45 	bl	8001b2c <DS3231_GetTime>

		/*Read ADC value for ECG*/
		Get_ECG();
 8000ca2:	f006 f86d 	bl	8006d80 <Get_ECG>

		/*Get values from 4 ADC Channels for EMG*/
		Get_EMG();
 8000ca6:	f006 f915 	bl	8006ed4 <Get_EMG>

		/*Get Skin Response value from ADc*/
		Get_GSR();
 8000caa:	f7ff ffbf 	bl	8000c2c <Get_GSR>

		/*Accelerometer and Gyroscope Read Functions*/
		MPU6050_Read_Accel();
 8000cae:	f006 fb35 	bl	800731c <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 8000cb2:	f006 fbb1 	bl	8007418 <MPU6050_Read_Gyro>

		/*Get Temperature value from ambient IR sensor*/
		TEMP = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8000cb6:	2107      	movs	r1, #7
 8000cb8:	205a      	movs	r0, #90	; 0x5a
 8000cba:	f006 fa61 	bl	8007180 <MLX90614_ReadTemp>
 8000cbe:	eef0 7a40 	vmov.f32	s15, s0
 8000cc2:	4b74      	ldr	r3, [pc, #464]	; (8000e94 <main+0x234>)
 8000cc4:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f001 f839 	bl	8001d40 <HAL_Delay>

		/*Converting Time structure to Integer array*/
		get_time[0]= rtc.Sec;
 8000cce:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <main+0x230>)
 8000cd0:	799b      	ldrb	r3, [r3, #6]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b70      	ldr	r3, [pc, #448]	; (8000e98 <main+0x238>)
 8000cd6:	801a      	strh	r2, [r3, #0]
		get_time[1]= rtc.Min;
 8000cd8:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <main+0x230>)
 8000cda:	795b      	ldrb	r3, [r3, #5]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b6e      	ldr	r3, [pc, #440]	; (8000e98 <main+0x238>)
 8000ce0:	805a      	strh	r2, [r3, #2]
		get_time[2]= rtc.Hour;
 8000ce2:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <main+0x230>)
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <main+0x238>)
 8000cea:	809a      	strh	r2, [r3, #4]
		get_time[3]= rtc.DaysOfWeek;
 8000cec:	4b68      	ldr	r3, [pc, #416]	; (8000e90 <main+0x230>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <main+0x238>)
 8000cf4:	80da      	strh	r2, [r3, #6]
		get_time[4]= rtc.Date;
 8000cf6:	4b66      	ldr	r3, [pc, #408]	; (8000e90 <main+0x230>)
 8000cf8:	789b      	ldrb	r3, [r3, #2]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b66      	ldr	r3, [pc, #408]	; (8000e98 <main+0x238>)
 8000cfe:	811a      	strh	r2, [r3, #8]
		get_time[5]= rtc.Month;
 8000d00:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <main+0x230>)
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <main+0x238>)
 8000d08:	815a      	strh	r2, [r3, #10]
		get_time[6]= rtc.Year;
 8000d0a:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <main+0x230>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <main+0x238>)
 8000d12:	819a      	strh	r2, [r3, #12]

		/*Code to convert float char values*/
		gcvt(Ax,6,out1);
 8000d14:	4b61      	ldr	r3, [pc, #388]	; (8000e9c <main+0x23c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc1d 	bl	8000558 <__aeabi_f2d>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	495f      	ldr	r1, [pc, #380]	; (8000ea0 <main+0x240>)
 8000d24:	2006      	movs	r0, #6
 8000d26:	ec43 2b10 	vmov	d0, r2, r3
 8000d2a:	f00a fcbf 	bl	800b6ac <gcvt>
		gcvt(Ay,6,out2);
 8000d2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <main+0x244>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fc10 	bl	8000558 <__aeabi_f2d>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	495a      	ldr	r1, [pc, #360]	; (8000ea8 <main+0x248>)
 8000d3e:	2006      	movs	r0, #6
 8000d40:	ec43 2b10 	vmov	d0, r2, r3
 8000d44:	f00a fcb2 	bl	800b6ac <gcvt>
		gcvt(Az,6,out3);
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <main+0x24c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc03 	bl	8000558 <__aeabi_f2d>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4956      	ldr	r1, [pc, #344]	; (8000eb0 <main+0x250>)
 8000d58:	2006      	movs	r0, #6
 8000d5a:	ec43 2b10 	vmov	d0, r2, r3
 8000d5e:	f00a fca5 	bl	800b6ac <gcvt>
		gcvt(Gx,6,out4);
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <main+0x254>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fbf6 	bl	8000558 <__aeabi_f2d>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4951      	ldr	r1, [pc, #324]	; (8000eb8 <main+0x258>)
 8000d72:	2006      	movs	r0, #6
 8000d74:	ec43 2b10 	vmov	d0, r2, r3
 8000d78:	f00a fc98 	bl	800b6ac <gcvt>
		gcvt(Gy,6,out5);
 8000d7c:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <main+0x25c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbe9 	bl	8000558 <__aeabi_f2d>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	494d      	ldr	r1, [pc, #308]	; (8000ec0 <main+0x260>)
 8000d8c:	2006      	movs	r0, #6
 8000d8e:	ec43 2b10 	vmov	d0, r2, r3
 8000d92:	f00a fc8b 	bl	800b6ac <gcvt>
		gcvt(Gz,6,out6);
 8000d96:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <main+0x264>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fbdc 	bl	8000558 <__aeabi_f2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4948      	ldr	r1, [pc, #288]	; (8000ec8 <main+0x268>)
 8000da6:	2006      	movs	r0, #6
 8000da8:	ec43 2b10 	vmov	d0, r2, r3
 8000dac:	f00a fc7e 	bl	800b6ac <gcvt>
		gcvt(TEMP,2,temp_char);
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <main+0x234>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fbcf 	bl	8000558 <__aeabi_f2d>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	460d      	mov	r5, r1
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <main+0x26c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	ec45 4b10 	vmov	d0, r4, r5
 8000dca:	f00a fc6f 	bl	800b6ac <gcvt>

		/*SD Card FATFS Functions*/
		f_mount(&fs, "", 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	493f      	ldr	r1, [pc, #252]	; (8000ed0 <main+0x270>)
 8000dd2:	4840      	ldr	r0, [pc, #256]	; (8000ed4 <main+0x274>)
 8000dd4:	f008 fd76 	bl	80098c4 <f_mount>
		f_open(&fil, "Log.txt", FA_OPEN_APPEND | FA_WRITE);
 8000dd8:	2232      	movs	r2, #50	; 0x32
 8000dda:	493f      	ldr	r1, [pc, #252]	; (8000ed8 <main+0x278>)
 8000ddc:	483f      	ldr	r0, [pc, #252]	; (8000edc <main+0x27c>)
 8000dde:	f008 fdb7 	bl	8009950 <f_open>
		f_lseek(&fil, f_size(&fil)); //Use f_size(&fil) so the function f_lseek would be f_lseek(&fil,f_size(&fil));
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <main+0x27c>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4619      	mov	r1, r3
 8000de8:	483c      	ldr	r0, [pc, #240]	; (8000edc <main+0x27c>)
 8000dea:	f009 f9b9 	bl	800a160 <f_lseek>
		f_printf(&fil, "%d, %d, %d, %d, %d, %d, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d ,%d, %s\n", get_time[0], get_time[1], get_time[2], get_time[4], get_time[5], get_time[6],
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x238>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	469c      	mov	ip, r3
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <main+0x238>)
 8000df6:	885b      	ldrh	r3, [r3, #2]
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <main+0x238>)
 8000dfc:	889b      	ldrh	r3, [r3, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x238>)
 8000e02:	891b      	ldrh	r3, [r3, #8]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <main+0x238>)
 8000e08:	895b      	ldrh	r3, [r3, #10]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <main+0x238>)
 8000e0e:	899b      	ldrh	r3, [r3, #12]
 8000e10:	461c      	mov	r4, r3
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <main+0x280>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	461d      	mov	r5, r3
				out1, out2, out3, out4, out5, out6, ECG_VAL, EMG_VAL[0], EMG_VAL[1], EMG_VAL[2], EMG_VAL[3], GSR_VAL, temp_char);
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <main+0x284>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
		f_printf(&fil, "%d, %d, %d, %d, %d, %d, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d ,%d, %s\n", get_time[0], get_time[1], get_time[2], get_time[4], get_time[5], get_time[6],
 8000e1c:	461e      	mov	r6, r3
				out1, out2, out3, out4, out5, out6, ECG_VAL, EMG_VAL[0], EMG_VAL[1], EMG_VAL[2], EMG_VAL[3], GSR_VAL, temp_char);
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <main+0x284>)
 8000e20:	885b      	ldrh	r3, [r3, #2]
		f_printf(&fil, "%d, %d, %d, %d, %d, %d, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d ,%d, %s\n", get_time[0], get_time[1], get_time[2], get_time[4], get_time[5], get_time[6],
 8000e22:	60fb      	str	r3, [r7, #12]
				out1, out2, out3, out4, out5, out6, ECG_VAL, EMG_VAL[0], EMG_VAL[1], EMG_VAL[2], EMG_VAL[3], GSR_VAL, temp_char);
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <main+0x284>)
 8000e26:	889b      	ldrh	r3, [r3, #4]
		f_printf(&fil, "%d, %d, %d, %d, %d, %d, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d ,%d, %s\n", get_time[0], get_time[1], get_time[2], get_time[4], get_time[5], get_time[6],
 8000e28:	60bb      	str	r3, [r7, #8]
				out1, out2, out3, out4, out5, out6, ECG_VAL, EMG_VAL[0], EMG_VAL[1], EMG_VAL[2], EMG_VAL[3], GSR_VAL, temp_char);
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <main+0x284>)
 8000e2c:	88db      	ldrh	r3, [r3, #6]
		f_printf(&fil, "%d, %d, %d, %d, %d, %d, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d ,%d, %s\n", get_time[0], get_time[1], get_time[2], get_time[4], get_time[5], get_time[6],
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <main+0x288>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <main+0x26c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	9310      	str	r3, [sp, #64]	; 0x40
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	930e      	str	r3, [sp, #56]	; 0x38
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	930d      	str	r3, [sp, #52]	; 0x34
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8000e4c:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e4e:	950a      	str	r5, [sp, #40]	; 0x28
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <main+0x268>)
 8000e52:	9309      	str	r3, [sp, #36]	; 0x24
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <main+0x260>)
 8000e56:	9308      	str	r3, [sp, #32]
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <main+0x258>)
 8000e5a:	9307      	str	r3, [sp, #28]
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <main+0x250>)
 8000e5e:	9306      	str	r3, [sp, #24]
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <main+0x248>)
 8000e62:	9305      	str	r3, [sp, #20]
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <main+0x240>)
 8000e66:	9304      	str	r3, [sp, #16]
 8000e68:	9403      	str	r4, [sp, #12]
 8000e6a:	9002      	str	r0, [sp, #8]
 8000e6c:	9101      	str	r1, [sp, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	4673      	mov	r3, lr
 8000e72:	4662      	mov	r2, ip
 8000e74:	491d      	ldr	r1, [pc, #116]	; (8000eec <main+0x28c>)
 8000e76:	4819      	ldr	r0, [pc, #100]	; (8000edc <main+0x27c>)
 8000e78:	f009 fc0e 	bl	800a698 <f_printf>
		f_close(&fil);
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <main+0x27c>)
 8000e7e:	f009 f945 	bl	800a10c <f_close>

		HAL_Delay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 ff5c 	bl	8001d40 <HAL_Delay>
	{
 8000e88:	e708      	b.n	8000c9c <main+0x3c>
 8000e8a:	bf00      	nop
 8000e8c:	20002298 	.word	0x20002298
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20002394 	.word	0x20002394
 8000e98:	20002350 	.word	0x20002350
 8000e9c:	2000236c 	.word	0x2000236c
 8000ea0:	20002398 	.word	0x20002398
 8000ea4:	20002370 	.word	0x20002370
 8000ea8:	200023a4 	.word	0x200023a4
 8000eac:	20002374 	.word	0x20002374
 8000eb0:	200023b0 	.word	0x200023b0
 8000eb4:	20002378 	.word	0x20002378
 8000eb8:	200023bc 	.word	0x200023bc
 8000ebc:	2000237c 	.word	0x2000237c
 8000ec0:	200023c8 	.word	0x200023c8
 8000ec4:	20002380 	.word	0x20002380
 8000ec8:	200023d4 	.word	0x200023d4
 8000ecc:	200023de 	.word	0x200023de
 8000ed0:	0800e0e8 	.word	0x0800e0e8
 8000ed4:	200000a4 	.word	0x200000a4
 8000ed8:	0800e0ec 	.word	0x0800e0ec
 8000edc:	200010dc 	.word	0x200010dc
 8000ee0:	20002384 	.word	0x20002384
 8000ee4:	20002388 	.word	0x20002388
 8000ee8:	20002390 	.word	0x20002390
 8000eec:	0800e0f4 	.word	0x0800e0f4

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2244      	movs	r2, #68	; 0x44
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a fd1f 	bl	800b942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f16:	f003 fe6f 	bl	8004bf8 <HAL_PWREx_ControlVoltageScaling>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f20:	f000 fae8 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f24:	2310      	movs	r3, #16
 8000f26:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f30:	2360      	movs	r3, #96	; 0x60
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fea5 	bl	8004ca4 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f60:	f000 fac8 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 faaa 	bl	80054d8 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 fab3 	bl	80014f4 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b0a4      	sub	sp, #144	; 0x90
 8000f9a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	228c      	movs	r2, #140	; 0x8c
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00a fccd 	bl	800b942 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fc6a 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000fe2:	f000 fa87 	bl	80014f4 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3790      	adds	r7, #144	; 0x90
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <MX_ADC1_Init+0x128>)
 8001014:	4a41      	ldr	r2, [pc, #260]	; (800111c <MX_ADC1_Init+0x12c>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001018:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <MX_ADC1_Init+0x128>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101e:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <MX_ADC1_Init+0x128>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <MX_ADC1_Init+0x128>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_ADC1_Init+0x128>)
 800102c:	2201      	movs	r2, #1
 800102e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <MX_ADC1_Init+0x128>)
 8001032:	2204      	movs	r2, #4
 8001034:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_ADC1_Init+0x128>)
 8001038:	2200      	movs	r2, #0
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <MX_ADC1_Init+0x128>)
 800103e:	2201      	movs	r2, #1
 8001040:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_ADC1_Init+0x128>)
 8001044:	2204      	movs	r2, #4
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001048:	4b33      	ldr	r3, [pc, #204]	; (8001118 <MX_ADC1_Init+0x128>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <MX_ADC1_Init+0x128>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <MX_ADC1_Init+0x128>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <MX_ADC1_Init+0x128>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_ADC1_Init+0x128>)
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <MX_ADC1_Init+0x128>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001072:	4829      	ldr	r0, [pc, #164]	; (8001118 <MX_ADC1_Init+0x128>)
 8001074:	f001 f8cc 	bl	8002210 <HAL_ADC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800107e:	f000 fa39 	bl	80014f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4822      	ldr	r0, [pc, #136]	; (8001118 <MX_ADC1_Init+0x128>)
 800108e:	f002 f9bb 	bl	8003408 <HAL_ADCEx_MultiModeConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001098:	f000 fa2c 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ADC1_Init+0x130>)
 800109e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2306      	movs	r3, #6
 80010a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a8:	237f      	movs	r3, #127	; 0x7f
 80010aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ac:	2304      	movs	r3, #4
 80010ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4817      	ldr	r0, [pc, #92]	; (8001118 <MX_ADC1_Init+0x128>)
 80010ba:	f001 fbd1 	bl	8002860 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010c4:	f000 fa16 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c8:	230c      	movs	r3, #12
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_ADC1_Init+0x128>)
 80010d2:	f001 fbc5 	bl	8002860 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80010dc:	f000 fa0a 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e0:	2312      	movs	r3, #18
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <MX_ADC1_Init+0x128>)
 80010ea:	f001 fbb9 	bl	8002860 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010f4:	f000 f9fe 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010f8:	2318      	movs	r3, #24
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_ADC1_Init+0x128>)
 8001102:	f001 fbad 	bl	8002860 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800110c:	f000 f9f2 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000210c 	.word	0x2000210c
 800111c:	50040000 	.word	0x50040000
 8001120:	04300002 	.word	0x04300002

08001124 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <MX_ADC2_Init+0xc0>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800115a:	2204      	movs	r2, #4
 800115c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001166:	2201      	movs	r2, #1
 8001168:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800116c:	2201      	movs	r2, #1
 800116e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_ADC2_Init+0xbc>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <MX_ADC2_Init+0xbc>)
 800119c:	f001 f838 	bl	8002210 <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80011a6:	f000 f9a5 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_ADC2_Init+0xc4>)
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2306      	movs	r3, #6
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b6:	237f      	movs	r3, #127	; 0x7f
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ba:	2304      	movs	r3, #4
 80011bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_ADC2_Init+0xbc>)
 80011c8:	f001 fb4a 	bl	8002860 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80011d2:	f000 f98f 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20002174 	.word	0x20002174
 80011e4:	50040100 	.word	0x50040100
 80011e8:	14f00020 	.word	0x14f00020

080011ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001204:	4a29      	ldr	r2, [pc, #164]	; (80012ac <MX_ADC3_Init+0xc0>)
 8001206:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_ADC3_Init+0xbc>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_ADC3_Init+0xbc>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001222:	2204      	movs	r2, #4
 8001224:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_ADC3_Init+0xbc>)
 800122e:	2201      	movs	r2, #1
 8001230:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001234:	2201      	movs	r2, #1
 8001236:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_ADC3_Init+0xbc>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_ADC3_Init+0xbc>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_ADC3_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001264:	f000 ffd4 	bl	8002210 <HAL_ADC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800126e:	f000 f941 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_ADC3_Init+0xc4>)
 8001274:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001276:	2306      	movs	r3, #6
 8001278:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800127e:	237f      	movs	r3, #127	; 0x7f
 8001280:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001282:	2304      	movs	r3, #4
 8001284:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_ADC3_Init+0xbc>)
 8001290:	f001 fae6 	bl	8002860 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800129a:	f000 f92b 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200021dc 	.word	0x200021dc
 80012ac:	50040200 	.word	0x50040200
 80012b0:	25b00200 	.word	0x25b00200

080012b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_I2C1_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_I2C1_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_I2C1_Init+0x74>)
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <MX_I2C1_Init+0x7c>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_I2C1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_I2C1_Init+0x74>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_I2C1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <MX_I2C1_Init+0x74>)
 80012f0:	f002 fbca 	bl	8003a88 <HAL_I2C_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012fa:	f000 f8fb 	bl	80014f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_I2C1_Init+0x74>)
 8001302:	f003 fbd3 	bl	8004aac <HAL_I2CEx_ConfigAnalogFilter>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800130c:	f000 f8f2 	bl	80014f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001310:	2100      	movs	r1, #0
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_I2C1_Init+0x74>)
 8001314:	f003 fc15 	bl	8004b42 <HAL_I2CEx_ConfigDigitalFilter>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131e:	f000 f8e9 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20002244 	.word	0x20002244
 800132c:	40005400 	.word	0x40005400
 8001330:	00909beb 	.word	0x00909beb

08001334 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_I2C2_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_I2C2_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <MX_I2C2_Init+0x7c>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_I2C2_Init+0x74>)
 800134c:	2201      	movs	r2, #1
 800134e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001370:	f002 fb8a 	bl	8003a88 <HAL_I2C_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800137a:	f000 f8bb 	bl	80014f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001382:	f003 fb93 	bl	8004aac <HAL_I2CEx_ConfigAnalogFilter>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800138c:	f000 f8b2 	bl	80014f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001390:	2100      	movs	r1, #0
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_I2C2_Init+0x74>)
 8001394:	f003 fbd5 	bl	8004b42 <HAL_I2CEx_ConfigDigitalFilter>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 f8a9 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20002298 	.word	0x20002298
 80013ac:	40005800 	.word	0x40005800
 80013b0:	00301347 	.word	0x00301347

080013b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_SPI1_Init+0x74>)
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <MX_SPI1_Init+0x78>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_SPI1_Init+0x74>)
 80013c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_SPI1_Init+0x74>)
 80013ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_SPI1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI1_Init+0x74>)
 80013e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_SPI1_Init+0x74>)
 80013ea:	2210      	movs	r2, #16
 80013ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_SPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI1_Init+0x74>)
 8001402:	2207      	movs	r2, #7
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_SPI1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI1_Init+0x74>)
 800140e:	2208      	movs	r2, #8
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_SPI1_Init+0x74>)
 8001414:	f004 ff16 	bl	8006244 <HAL_SPI_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800141e:	f000 f869 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200022ec 	.word	0x200022ec
 800142c:	40013000 	.word	0x40013000

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a28      	ldr	r2, [pc, #160]	; (80014ec <MX_GPIO_Init+0xbc>)
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <MX_GPIO_Init+0xbc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_GPIO_Init+0xbc>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <MX_GPIO_Init+0xbc>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_GPIO_Init+0xbc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_GPIO_Init+0xbc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <MX_GPIO_Init+0xbc>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_GPIO_Init+0xbc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MX_GPIO_Init+0xc0>)
 80014c4:	f002 fac8 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c8:	2310      	movs	r3, #16
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0xc0>)
 80014e0:	f002 f928 	bl	8003734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_MspInit+0x44>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6613      	str	r3, [r2, #96]	; 0x60
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_MspInit+0x44>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x44>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x44>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_ADC_MspInit+0x154>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12d      	bne.n	80015c6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 8001572:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d10b      	bne.n	8001594 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800157c:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001582:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001590:	623b      	str	r3, [r7, #32]
 8001592:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015ac:	230f      	movs	r3, #15
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b0:	2303      	movs	r3, #3
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	483a      	ldr	r0, [pc, #232]	; (80016a8 <HAL_ADC_MspInit+0x160>)
 80015c0:	f002 f8b8 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80015c4:	e065      	b.n	8001692 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_ADC_MspInit+0x164>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d12e      	bne.n	800162e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 80015d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10b      	bne.n	80015fa <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 80015e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f002 f884 	bl	8003734 <HAL_GPIO_Init>
}
 800162c:	e031      	b.n	8001692 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_ADC_MspInit+0x168>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d12c      	bne.n	8001692 <HAL_ADC_MspInit+0x14a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 8001640:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_ADC_MspInit+0x158>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10b      	bne.n	8001662 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001668:	f043 0320 	orr.w	r3, r3, #32
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_ADC_MspInit+0x15c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167e:	2303      	movs	r3, #3
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <HAL_ADC_MspInit+0x16c>)
 800168e:	f002 f851 	bl	8003734 <HAL_GPIO_Init>
}
 8001692:	bf00      	nop
 8001694:	3738      	adds	r7, #56	; 0x38
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	50040000 	.word	0x50040000
 80016a0:	200023e0 	.word	0x200023e0
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000800 	.word	0x48000800
 80016ac:	50040100 	.word	0x50040100
 80016b0:	50040200 	.word	0x50040200
 80016b4:	48001400 	.word	0x48001400

080016b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0ae      	sub	sp, #184	; 0xb8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	228c      	movs	r2, #140	; 0x8c
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f00a f932 	bl	800b942 <memset>
  if(hi2c->Instance==I2C1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <HAL_I2C_MspInit+0x134>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d13c      	bne.n	8001762 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 f8db 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001700:	f7ff fef8 	bl	80014f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800171c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	2312      	movs	r3, #18
 8001726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001736:	2304      	movs	r3, #4
 8001738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001740:	4619      	mov	r1, r3
 8001742:	482c      	ldr	r0, [pc, #176]	; (80017f4 <HAL_I2C_MspInit+0x13c>)
 8001744:	f001 fff6 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 800174e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001760:	e03f      	b.n	80017e2 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <HAL_I2C_MspInit+0x140>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d13a      	bne.n	80017e2 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001770:	2300      	movs	r3, #0
 8001772:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	4618      	mov	r0, r3
 800177a:	f004 f899 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001784:	f7ff feb6 	bl	80014f4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a6:	2312      	movs	r3, #18
 80017a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017b8:	2304      	movs	r3, #4
 80017ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c2:	4619      	mov	r1, r3
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <HAL_I2C_MspInit+0x144>)
 80017c6:	f001 ffb5 	bl	8003734 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 80017d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_I2C_MspInit+0x138>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
}
 80017e2:	bf00      	nop
 80017e4:	37b8      	adds	r7, #184	; 0xb8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40005400 	.word	0x40005400
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000400 	.word	0x48000400
 80017f8:	40005800 	.word	0x40005800
 80017fc:	48001400 	.word	0x48001400

08001800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <HAL_SPI_MspInit+0x7c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d128      	bne.n	8001874 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182c:	6613      	str	r3, [r2, #96]	; 0x60
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x80>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001852:	23e0      	movs	r3, #224	; 0xe0
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001862:	2305      	movs	r3, #5
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001870:	f001 ff60 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40013000 	.word	0x40013000
 8001880:	40021000 	.word	0x40021000

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <SysTick_Handler+0x34>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <SysTick_Handler+0x18>
		Timer1--;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <SysTick_Handler+0x34>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <SysTick_Handler+0x34>)
 80018e2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <SysTick_Handler+0x38>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <SysTick_Handler+0x2c>
		Timer2--;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Handler+0x38>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <SysTick_Handler+0x38>)
 80018f6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f8:	f000 fa02 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200026ac 	.word	0x200026ac
 8001904:	200026ae 	.word	0x200026ae

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001922:	f00a f85d 	bl	800b9e0 <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
  }

  return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e009      	b.n	80019ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf1      	blt.n	8001998 <_write+0x12>
  }
  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
  return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f009 ffc2 	bl	800b9e0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20050000 	.word	0x20050000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	200023e4 	.word	0x200023e4
 8001a90:	20002800 	.word	0x20002800

08001a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff ffea 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f009 ff81 	bl	800b9ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff f8b9 	bl	8000c60 <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001afc:	0800ea00 	.word	0x0800ea00
  ldr r2, =_sbss
 8001b00:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b04:	20002800 	.word	0x20002800

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <DS3231_Init+0x1c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200023e8 	.word	0x200023e8

08001b2c <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2100      	movs	r1, #0
 8001b42:	460a      	mov	r2, r1
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	460a      	mov	r2, r1
 8001b48:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <DS3231_GetTime+0xf4>)
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	f107 020f 	add.w	r2, r7, #15
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	21d0      	movs	r1, #208	; 0xd0
 8001b5c:	f002 f830 	bl	8003bc0 <HAL_I2C_Master_Transmit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <DS3231_GetTime+0x3e>
 8001b66:	2300      	movs	r3, #0
 8001b68:	e055      	b.n	8001c16 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <DS3231_GetTime+0xf4>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	f107 0208 	add.w	r2, r7, #8
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2307      	movs	r3, #7
 8001b7a:	21d0      	movs	r1, #208	; 0xd0
 8001b7c:	f002 f938 	bl	8003df0 <HAL_I2C_Master_Receive>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <DS3231_GetTime+0x5e>
 8001b86:	2300      	movs	r3, #0
 8001b88:	e045      	b.n	8001c16 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8001b8a:	7a3b      	ldrb	r3, [r7, #8]
 8001b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f846 	bl	8001c24 <B2D>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8001ba0:	7a7b      	ldrb	r3, [r7, #9]
 8001ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f83b 	bl	8001c24 <B2D>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 8001bb6:	7abb      	ldrb	r3, [r7, #10]
 8001bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f830 	bl	8001c24 <B2D>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8001bd8:	7b3b      	ldrb	r3, [r7, #12]
 8001bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f81f 	bl	8001c24 <B2D>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8001bee:	7b7b      	ldrb	r3, [r7, #13]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f814 	bl	8001c24 <B2D>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f80c 	bl	8001c24 <B2D>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	701a      	strb	r2, [r3, #0]

  return true;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200023e8 	.word	0x200023e8

08001c24 <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b2db      	uxtb	r3, r3
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f001 fd33 	bl	80036cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f80e 	bl	8001c88 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e001      	b.n	8001c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c78:	f7ff fc42 	bl	8001500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_InitTick+0x6c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_InitTick+0x70>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fd31 	bl	800371a <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d809      	bhi.n	8001cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f001 fd09 	bl	80036e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_InitTick+0x74>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e004      	b.n	8001ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e001      	b.n	8001ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	2000000c 	.word	0x2000000c

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000010 	.word	0x20000010
 8001d24:	200023ec 	.word	0x200023ec

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200023ec 	.word	0x200023ec

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000010 	.word	0x20000010

08001d88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	609a      	str	r2, [r3, #8]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3360      	adds	r3, #96	; 0x60
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <LL_ADC_SetOffset+0x44>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e28:	bf00      	nop
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	03fff000 	.word	0x03fff000

08001e38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3360      	adds	r3, #96	; 0x60
 8001e46:	461a      	mov	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3360      	adds	r3, #96	; 0x60
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	615a      	str	r2, [r3, #20]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b087      	sub	sp, #28
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3330      	adds	r3, #48	; 0x30
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	211f      	movs	r1, #31
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	f003 011f 	and.w	r1, r3, #31
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b087      	sub	sp, #28
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3314      	adds	r3, #20
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	0e5b      	lsrs	r3, r3, #25
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	0d1b      	lsrs	r3, r3, #20
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2107      	movs	r1, #7
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	0d1b      	lsrs	r3, r3, #20
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0318 	and.w	r3, r3, #24
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fb8:	40d9      	lsrs	r1, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	0007ffff 	.word	0x0007ffff

08001fdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6093      	str	r3, [r2, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <LL_ADC_IsEnabled+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_IsEnabled+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d101      	bne.n	800213e <LL_ADC_IsDisableOngoing+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_IsDisableOngoing+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800215c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002160:	f043 0204 	orr.w	r2, r3, #4
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d101      	bne.n	80021b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d101      	bne.n	8002202 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e133      	b.n	8002492 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff f985 	bl	8001548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fef1 	bl	8002038 <LL_ADC_IsDeepPowerDownEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fed7 	bl	8002014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff0c 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d115      	bne.n	80022a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fef0 	bl	8002060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002280:	4b86      	ldr	r3, [pc, #536]	; (800249c <HAL_ADC_Init+0x28c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	4a86      	ldr	r2, [pc, #536]	; (80024a0 <HAL_ADC_Init+0x290>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002294:	e002      	b.n	800229c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3b01      	subs	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff feee 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff62 	bl	800219c <LL_ADC_REG_IsConversionOngoing>
 80022d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 80cc 	bne.w	8002480 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 80c8 	bne.w	8002480 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022f8:	f043 0202 	orr.w	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fefb 	bl	8002100 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d115      	bne.n	800233c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002310:	4864      	ldr	r0, [pc, #400]	; (80024a4 <HAL_ADC_Init+0x294>)
 8002312:	f7ff fef5 	bl	8002100 <LL_ADC_IsEnabled>
 8002316:	4604      	mov	r4, r0
 8002318:	4863      	ldr	r0, [pc, #396]	; (80024a8 <HAL_ADC_Init+0x298>)
 800231a:	f7ff fef1 	bl	8002100 <LL_ADC_IsEnabled>
 800231e:	4603      	mov	r3, r0
 8002320:	431c      	orrs	r4, r3
 8002322:	4862      	ldr	r0, [pc, #392]	; (80024ac <HAL_ADC_Init+0x29c>)
 8002324:	f7ff feec 	bl	8002100 <LL_ADC_IsEnabled>
 8002328:	4603      	mov	r3, r0
 800232a:	4323      	orrs	r3, r4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4619      	mov	r1, r3
 8002336:	485e      	ldr	r0, [pc, #376]	; (80024b0 <HAL_ADC_Init+0x2a0>)
 8002338:	f7ff fd26 	bl	8001d88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e5b      	ldrb	r3, [r3, #25]
 8002340:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002346:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800234c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002352:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d106      	bne.n	8002378 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	3b01      	subs	r3, #1
 8002370:	045b      	lsls	r3, r3, #17
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_ADC_Init+0x2a4>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff1c 	bl	80021ea <LL_ADC_INJ_IsConversionOngoing>
 80023b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d140      	bne.n	800243c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d13d      	bne.n	800243c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7e1b      	ldrb	r3, [r3, #24]
 80023c8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e2:	f023 0306 	bic.w	r3, r3, #6
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d118      	bne.n	800242c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800241c:	430a      	orrs	r2, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e007      	b.n	800243c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10c      	bne.n	800245e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f023 010f 	bic.w	r1, r3, #15
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	e007      	b.n	800246e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 020f 	bic.w	r2, r2, #15
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58
 800247e:	e007      	b.n	8002490 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002490:	7ffb      	ldrb	r3, [r7, #31]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000008 	.word	0x20000008
 80024a0:	053e2d63 	.word	0x053e2d63
 80024a4:	50040000 	.word	0x50040000
 80024a8:	50040100 	.word	0x50040100
 80024ac:	50040200 	.word	0x50040200
 80024b0:	50040300 	.word	0x50040300
 80024b4:	fff0c007 	.word	0xfff0c007

080024b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c0:	4857      	ldr	r0, [pc, #348]	; (8002620 <HAL_ADC_Start+0x168>)
 80024c2:	f7ff fd8b 	bl	8001fdc <LL_ADC_GetMultimode>
 80024c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fe65 	bl	800219c <LL_ADC_REG_IsConversionOngoing>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 809c 	bne.w	8002612 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_Start+0x30>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e097      	b.n	8002618 <HAL_ADC_Start+0x160>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fe7d 	bl	80031f0 <ADC_Enable>
 80024f6:	4603      	mov	r3, r0
 80024f8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8083 	bne.w	8002608 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_ADC_Start+0x16c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d002      	beq.n	8002526 <HAL_ADC_Start+0x6e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	e000      	b.n	8002528 <HAL_ADC_Start+0x70>
 8002526:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_ADC_Start+0x170>)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4293      	cmp	r3, r2
 800252e:	d002      	beq.n	8002536 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254e:	d106      	bne.n	800255e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	f023 0206 	bic.w	r2, r3, #6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	65da      	str	r2, [r3, #92]	; 0x5c
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	221c      	movs	r2, #28
 800256a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <HAL_ADC_Start+0x16c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d002      	beq.n	8002584 <HAL_ADC_Start+0xcc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e000      	b.n	8002586 <HAL_ADC_Start+0xce>
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_ADC_Start+0x170>)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4293      	cmp	r3, r2
 800258c:	d008      	beq.n	80025a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d002      	beq.n	80025a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d114      	bne.n	80025ca <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fdc2 	bl	800214c <LL_ADC_REG_StartConversion>
 80025c8:	e025      	b.n	8002616 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_ADC_Start+0x16c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_Start+0x12e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e000      	b.n	80025e8 <HAL_ADC_Start+0x130>
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_ADC_Start+0x170>)
 80025e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00f      	beq.n	8002616 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	659a      	str	r2, [r3, #88]	; 0x58
 8002606:	e006      	b.n	8002616 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002610:	e001      	b.n	8002616 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	50040300 	.word	0x50040300
 8002624:	50040100 	.word	0x50040100
 8002628:	50040000 	.word	0x50040000

0800262c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Stop+0x16>
 800263e:	2302      	movs	r3, #2
 8002640:	e023      	b.n	800268a <HAL_ADC_Stop+0x5e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800264a:	2103      	movs	r1, #3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fd13 	bl	8003078 <ADC_ConversionStop>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fe4d 	bl	80032fc <ADC_Disable>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800269e:	4866      	ldr	r0, [pc, #408]	; (8002838 <HAL_ADC_PollForConversion+0x1a4>)
 80026a0:	f7ff fc9c 	bl	8001fdc <LL_ADC_GetMultimode>
 80026a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d102      	bne.n	80026b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80026ae:	2308      	movs	r3, #8
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e02a      	b.n	800270a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d002      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	d111      	bne.n	80026ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0a4      	b.n	800282e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026e4:	2304      	movs	r3, #4
 80026e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026e8:	e00f      	b.n	800270a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026ea:	4853      	ldr	r0, [pc, #332]	; (8002838 <HAL_ADC_PollForConversion+0x1a4>)
 80026ec:	f7ff fc84 	bl	8001ff8 <LL_ADC_GetMultiDMATransfer>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e093      	b.n	800282e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002706:	2304      	movs	r3, #4
 8002708:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800270a:	f7ff fb0d 	bl	8001d28 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002710:	e021      	b.n	8002756 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d01d      	beq.n	8002756 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800271a:	f7ff fb05 	bl	8001d28 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <HAL_ADC_PollForConversion+0x9c>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d112      	bne.n	8002756 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	f043 0204 	orr.w	r2, r3, #4
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e06b      	b.n	800282e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0d6      	beq.n	8002712 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fba3 	bl	8001ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01c      	beq.n	80027ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7e5b      	ldrb	r3, [r3, #25]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d118      	bne.n	80027ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b08      	cmp	r3, #8
 8002794:	d111      	bne.n	80027ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1f      	ldr	r2, [pc, #124]	; (800283c <HAL_ADC_PollForConversion+0x1a8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d002      	beq.n	80027ca <HAL_ADC_PollForConversion+0x136>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e000      	b.n	80027cc <HAL_ADC_PollForConversion+0x138>
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_ADC_PollForConversion+0x1ac>)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d008      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d002      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	d104      	bne.n	80027f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	e00c      	b.n	800280a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_ADC_PollForConversion+0x1a8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d002      	beq.n	8002800 <HAL_ADC_PollForConversion+0x16c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e000      	b.n	8002802 <HAL_ADC_PollForConversion+0x16e>
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_ADC_PollForConversion+0x1ac>)
 8002802:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d104      	bne.n	800281a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2208      	movs	r2, #8
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e008      	b.n	800282c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	220c      	movs	r2, #12
 800282a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	50040300 	.word	0x50040300
 800283c:	50040100 	.word	0x50040100
 8002840:	50040000 	.word	0x50040000

08002844 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0b6      	sub	sp, #216	; 0xd8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x22>
 800287e:	2302      	movs	r3, #2
 8002880:	e3e3      	b.n	800304a <HAL_ADC_ConfigChannel+0x7ea>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc84 	bl	800219c <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 83c4 	bne.w	8003024 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d824      	bhi.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	3b02      	subs	r3, #2
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d81b      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x8e>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_ADC_ConfigChannel+0x5c>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d5 	.word	0x080028d5
 80028c4:	080028dd 	.word	0x080028dd
 80028c8:	080028e5 	.word	0x080028e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80028cc:	230c      	movs	r3, #12
 80028ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028d2:	e010      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80028d4:	2312      	movs	r3, #18
 80028d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028da:	e00c      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028dc:	2318      	movs	r3, #24
 80028de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028e2:	e008      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028ec:	e003      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028ee:	2306      	movs	r3, #6
 80028f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002904:	f7ff faef 	bl	8001ee6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fc45 	bl	800219c <LL_ADC_REG_IsConversionOngoing>
 8002912:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fc65 	bl	80021ea <LL_ADC_INJ_IsConversionOngoing>
 8002920:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 81bf 	bne.w	8002cac <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800292e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 81ba 	bne.w	8002cac <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002940:	d10f      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	4619      	mov	r1, r3
 800294e:	f7ff faf6 	bl	8001f3e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fa9d 	bl	8001e9a <LL_ADC_SetSamplingTimeCommonConfig>
 8002960:	e00e      	b.n	8002980 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	461a      	mov	r2, r3
 8002970:	f7ff fae5 	bl	8001f3e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa8d 	bl	8001e9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00a      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	f7ff fa1d 	bl	8001df0 <LL_ADC_SetOffset>
 80029b6:	e179      	b.n	8002cac <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fa3a 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x184>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa2f 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	f003 021f 	and.w	r2, r3, #31
 80029e2:	e01e      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x1c2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fa24 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e004      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x1da>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	e018      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x20c>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002a5e:	2320      	movs	r3, #32
 8002a60:	e004      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d106      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f9f3 	bl	8001e64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f9d7 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x24a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f9cc 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	e01e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x288>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f9c1 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e004      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x2a0>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	e018      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x2d2>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e004      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f990 	bl	8001e64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f974 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x310>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f969 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	e01e      	b.n	8002bae <HAL_ADC_ConfigChannel+0x34e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2102      	movs	r1, #2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f95e 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e004      	b.n	8002bac <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x366>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	e014      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x390>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e004      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f931 	bl	8001e64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2103      	movs	r1, #3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff f915 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x3ce>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f90a 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	e017      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x3fe>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2103      	movs	r1, #3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f8ff 	bl	8001e38 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x416>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	e011      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x43a>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c86:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e003      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f8dc 	bl	8001e64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fa25 	bl	8002100 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 813f 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7ff f962 	bl	8001f94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a8e      	ldr	r2, [pc, #568]	; (8002f10 <HAL_ADC_ConfigChannel+0x6b0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f040 8130 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x4a4>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e019      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x4d8>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	bf94      	ite	ls
 8002d32:	2301      	movls	r3, #1
 8002d34:	2300      	movhi	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d079      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x4f8>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	3301      	adds	r3, #1
 8002d50:	069b      	lsls	r3, r3, #26
 8002d52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d56:	e015      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x524>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	069b      	lsls	r3, r3, #26
 8002d80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x544>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	3301      	adds	r3, #1
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	e017      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x574>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	ea42 0103 	orr.w	r1, r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x59a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	e018      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x5cc>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e003      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	e080      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x5ec>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	069b      	lsls	r3, r3, #26
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4a:	e015      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x618>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x638>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	e017      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x668>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	ea42 0103 	orr.w	r1, r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x694>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b1e      	subs	r3, #30
 8002eec:	051b      	lsls	r3, r3, #20
 8002eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	e01d      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x6d0>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
  return result;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e005      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x6bc>
 8002f10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7ff f801 	bl	8001f3e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d07a      	beq.n	800303e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f48:	4843      	ldr	r0, [pc, #268]	; (8003058 <HAL_ADC_ConfigChannel+0x7f8>)
 8002f4a:	f7fe ff43 	bl	8001dd4 <LL_ADC_GetCommonPathInternalCh>
 8002f4e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a41      	ldr	r2, [pc, #260]	; (800305c <HAL_ADC_ConfigChannel+0x7fc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d12c      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d126      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a3c      	ldr	r2, [pc, #240]	; (8003060 <HAL_ADC_ConfigChannel+0x800>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x71c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_ADC_ConfigChannel+0x804>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d15d      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f84:	4619      	mov	r1, r3
 8002f86:	4834      	ldr	r0, [pc, #208]	; (8003058 <HAL_ADC_ConfigChannel+0x7f8>)
 8002f88:	f7fe ff11 	bl	8001dae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_ADC_ConfigChannel+0x808>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_ADC_ConfigChannel+0x80c>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f9      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb4:	e040      	b.n	8003038 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <HAL_ADC_ConfigChannel+0x810>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d118      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d112      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	; (8003060 <HAL_ADC_ConfigChannel+0x800>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x780>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_ADC_ConfigChannel+0x804>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d12d      	bne.n	800303c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	4619      	mov	r1, r3
 8002fea:	481b      	ldr	r0, [pc, #108]	; (8003058 <HAL_ADC_ConfigChannel+0x7f8>)
 8002fec:	f7fe fedf 	bl	8001dae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff0:	e024      	b.n	800303c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_ADC_ConfigChannel+0x814>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d120      	bne.n	800303e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11a      	bne.n	800303e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <HAL_ADC_ConfigChannel+0x800>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d115      	bne.n	800303e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800301a:	4619      	mov	r1, r3
 800301c:	480e      	ldr	r0, [pc, #56]	; (8003058 <HAL_ADC_ConfigChannel+0x7f8>)
 800301e:	f7fe fec6 	bl	8001dae <LL_ADC_SetCommonPathInternalCh>
 8003022:	e00c      	b.n	800303e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003036:	e002      	b.n	800303e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800303c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003046:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800304a:	4618      	mov	r0, r3
 800304c:	37d8      	adds	r7, #216	; 0xd8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	80080000 	.word	0x80080000
 8003058:	50040300 	.word	0x50040300
 800305c:	c7520000 	.word	0xc7520000
 8003060:	50040000 	.word	0x50040000
 8003064:	50040200 	.word	0x50040200
 8003068:	20000008 	.word	0x20000008
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	cb840000 	.word	0xcb840000
 8003074:	80000001 	.word	0x80000001

08003078 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f884 	bl	800219c <LL_ADC_REG_IsConversionOngoing>
 8003094:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f8a5 	bl	80021ea <LL_ADC_INJ_IsConversionOngoing>
 80030a0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8098 	beq.w	80031e0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02a      	beq.n	8003114 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7e5b      	ldrb	r3, [r3, #25]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d126      	bne.n	8003114 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7e1b      	ldrb	r3, [r3, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d122      	bne.n	8003114 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030d2:	e014      	b.n	80030fe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4a45      	ldr	r2, [pc, #276]	; (80031ec <ADC_ConversionStop+0x174>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d90d      	bls.n	80030f8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e074      	b.n	80031e2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d1e3      	bne.n	80030d4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2240      	movs	r2, #64	; 0x40
 8003112:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d014      	beq.n	8003144 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f83c 	bl	800219c <LL_ADC_REG_IsConversionOngoing>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fff9 	bl	8002126 <LL_ADC_IsDisableOngoing>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff f818 	bl	8002174 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d014      	beq.n	8003174 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f84b 	bl	80021ea <LL_ADC_INJ_IsConversionOngoing>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe ffe1 	bl	8002126 <LL_ADC_IsDisableOngoing>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f827 	bl	80021c2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d005      	beq.n	8003186 <ADC_ConversionStop+0x10e>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d105      	bne.n	800318c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003180:	230c      	movs	r3, #12
 8003182:	617b      	str	r3, [r7, #20]
        break;
 8003184:	e005      	b.n	8003192 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003186:	2308      	movs	r3, #8
 8003188:	617b      	str	r3, [r7, #20]
        break;
 800318a:	e002      	b.n	8003192 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800318c:	2304      	movs	r3, #4
 800318e:	617b      	str	r3, [r7, #20]
        break;
 8003190:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003192:	f7fe fdc9 	bl	8001d28 <HAL_GetTick>
 8003196:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003198:	e01b      	b.n	80031d2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800319a:	f7fe fdc5 	bl	8001d28 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d914      	bls.n	80031d2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1dc      	bne.n	800319a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	a33fffff 	.word	0xa33fffff

080031f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe ff7d 	bl	8002100 <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d169      	bne.n	80032e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <ADC_Enable+0xfc>)
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e055      	b.n	80032e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe ff38 	bl	80020b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003240:	482b      	ldr	r0, [pc, #172]	; (80032f0 <ADC_Enable+0x100>)
 8003242:	f7fe fdc7 	bl	8001dd4 <LL_ADC_GetCommonPathInternalCh>
 8003246:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <ADC_Enable+0x104>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <ADC_Enable+0x108>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800326a:	e002      	b.n	8003272 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3b01      	subs	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f9      	bne.n	800326c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003278:	f7fe fd56 	bl	8001d28 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800327e:	e028      	b.n	80032d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ff3b 	bl	8002100 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe ff0b 	bl	80020b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329a:	f7fe fd45 	bl	8001d28 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d914      	bls.n	80032d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d00d      	beq.n	80032d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e007      	b.n	80032e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d1cf      	bne.n	8003280 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	8000003f 	.word	0x8000003f
 80032f0:	50040300 	.word	0x50040300
 80032f4:	20000008 	.word	0x20000008
 80032f8:	053e2d63 	.word	0x053e2d63

080032fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe ff0c 	bl	8002126 <LL_ADC_IsDisableOngoing>
 800330e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fef3 	bl	8002100 <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d047      	beq.n	80033b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d144      	bne.n	80033b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030d 	and.w	r3, r3, #13
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe fecd 	bl	80020d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2203      	movs	r2, #3
 8003344:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003346:	f7fe fcef 	bl	8001d28 <HAL_GetTick>
 800334a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800334c:	e029      	b.n	80033a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e023      	b.n	80033b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800336a:	f7fe fcdd 	bl	8001d28 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d914      	bls.n	80033a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1dc      	bne.n	800336a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <LL_ADC_IsEnabled>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_IsEnabled+0x18>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <LL_ADC_IsEnabled+0x1a>
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_REG_IsConversionOngoing>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d101      	bne.n	80033f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b0a1      	sub	sp, #132	; 0x84
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e093      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800342e:	2300      	movs	r3, #0
 8003430:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003432:	2300      	movs	r3, #0
 8003434:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a47      	ldr	r2, [pc, #284]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d102      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e001      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e072      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ffb8 	bl	80033e0 <LL_ADC_REG_IsConversionOngoing>
 8003470:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ffb2 	bl	80033e0 <LL_ADC_REG_IsConversionOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d154      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003484:	2b00      	cmp	r3, #0
 8003486:	d151      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003488:	4b35      	ldr	r3, [pc, #212]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800348a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02c      	beq.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034a6:	035b      	lsls	r3, r3, #13
 80034a8:	430b      	orrs	r3, r1
 80034aa:	431a      	orrs	r2, r3
 80034ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b0:	4829      	ldr	r0, [pc, #164]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034b2:	f7ff ff82 	bl	80033ba <LL_ADC_IsEnabled>
 80034b6:	4604      	mov	r4, r0
 80034b8:	4828      	ldr	r0, [pc, #160]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ba:	f7ff ff7e 	bl	80033ba <LL_ADC_IsEnabled>
 80034be:	4603      	mov	r3, r0
 80034c0:	431c      	orrs	r4, r3
 80034c2:	4828      	ldr	r0, [pc, #160]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034c4:	f7ff ff79 	bl	80033ba <LL_ADC_IsEnabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4323      	orrs	r3, r4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d137      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ec:	e028      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fa:	4817      	ldr	r0, [pc, #92]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034fc:	f7ff ff5d 	bl	80033ba <LL_ADC_IsEnabled>
 8003500:	4604      	mov	r4, r0
 8003502:	4816      	ldr	r0, [pc, #88]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003504:	f7ff ff59 	bl	80033ba <LL_ADC_IsEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	431c      	orrs	r4, r3
 800350c:	4815      	ldr	r0, [pc, #84]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800350e:	f7ff ff54 	bl	80033ba <LL_ADC_IsEnabled>
 8003512:	4603      	mov	r3, r0
 8003514:	4323      	orrs	r3, r4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d112      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003522:	f023 030f 	bic.w	r3, r3, #15
 8003526:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003528:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800352a:	e009      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800353e:	e000      	b.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003540:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800354a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800354e:	4618      	mov	r0, r3
 8003550:	3784      	adds	r7, #132	; 0x84
 8003552:	46bd      	mov	sp, r7
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	bf00      	nop
 8003558:	50040000 	.word	0x50040000
 800355c:	50040100 	.word	0x50040100
 8003560:	50040300 	.word	0x50040300
 8003564:	50040200 	.word	0x50040200

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	db0a      	blt.n	80035f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	490c      	ldr	r1, [pc, #48]	; (8003618 <__NVIC_SetPriority+0x4c>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	440b      	add	r3, r1
 80035f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f4:	e00a      	b.n	800360c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4908      	ldr	r1, [pc, #32]	; (800361c <__NVIC_SetPriority+0x50>)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	3b04      	subs	r3, #4
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	440b      	add	r3, r1
 800360a:	761a      	strb	r2, [r3, #24]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000e100 	.word	0xe000e100
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f1c3 0307 	rsb	r3, r3, #7
 800363a:	2b04      	cmp	r3, #4
 800363c:	bf28      	it	cs
 800363e:	2304      	movcs	r3, #4
 8003640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3304      	adds	r3, #4
 8003646:	2b06      	cmp	r3, #6
 8003648:	d902      	bls.n	8003650 <NVIC_EncodePriority+0x30>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3b03      	subs	r3, #3
 800364e:	e000      	b.n	8003652 <NVIC_EncodePriority+0x32>
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003668:	f04f 31ff 	mov.w	r1, #4294967295
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43d9      	mvns	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	4313      	orrs	r3, r2
         );
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003698:	d301      	bcc.n	800369e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800369a:	2301      	movs	r3, #1
 800369c:	e00f      	b.n	80036be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <SysTick_Config+0x40>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a6:	210f      	movs	r1, #15
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f7ff ff8e 	bl	80035cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <SysTick_Config+0x40>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <SysTick_Config+0x40>)
 80036b8:	2207      	movs	r2, #7
 80036ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000e010 	.word	0xe000e010

080036cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff47 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f4:	f7ff ff5c 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 80036f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7ff ff8e 	bl	8003620 <NVIC_EncodePriority>
 8003704:	4602      	mov	r2, r0
 8003706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff5d 	bl	80035cc <__NVIC_SetPriority>
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffb0 	bl	8003688 <SysTick_Config>
 8003728:	4603      	mov	r3, r0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003742:	e166      	b.n	8003a12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8158 	beq.w	8003a0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d005      	beq.n	8003774 <HAL_GPIO_Init+0x40>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d130      	bne.n	80037d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037aa:	2201      	movs	r2, #1
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 0201 	and.w	r2, r3, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d017      	beq.n	8003812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d123      	bne.n	8003866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	08da      	lsrs	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	6939      	ldr	r1, [r7, #16]
 8003862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0203 	and.w	r2, r3, #3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80b2 	beq.w	8003a0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_GPIO_Init+0x2fc>)
 80038aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ac:	4a60      	ldr	r2, [pc, #384]	; (8003a30 <HAL_GPIO_Init+0x2fc>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6613      	str	r3, [r2, #96]	; 0x60
 80038b4:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <HAL_GPIO_Init+0x2fc>)
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038c0:	4a5c      	ldr	r2, [pc, #368]	; (8003a34 <HAL_GPIO_Init+0x300>)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3302      	adds	r3, #2
 80038c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038ea:	d02b      	beq.n	8003944 <HAL_GPIO_Init+0x210>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d025      	beq.n	8003940 <HAL_GPIO_Init+0x20c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a51      	ldr	r2, [pc, #324]	; (8003a3c <HAL_GPIO_Init+0x308>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01f      	beq.n	800393c <HAL_GPIO_Init+0x208>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a50      	ldr	r2, [pc, #320]	; (8003a40 <HAL_GPIO_Init+0x30c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d019      	beq.n	8003938 <HAL_GPIO_Init+0x204>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a4f      	ldr	r2, [pc, #316]	; (8003a44 <HAL_GPIO_Init+0x310>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_GPIO_Init+0x200>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4e      	ldr	r2, [pc, #312]	; (8003a48 <HAL_GPIO_Init+0x314>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00d      	beq.n	8003930 <HAL_GPIO_Init+0x1fc>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4d      	ldr	r2, [pc, #308]	; (8003a4c <HAL_GPIO_Init+0x318>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_GPIO_Init+0x1f8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4c      	ldr	r2, [pc, #304]	; (8003a50 <HAL_GPIO_Init+0x31c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_GPIO_Init+0x1f4>
 8003924:	2307      	movs	r3, #7
 8003926:	e00e      	b.n	8003946 <HAL_GPIO_Init+0x212>
 8003928:	2308      	movs	r3, #8
 800392a:	e00c      	b.n	8003946 <HAL_GPIO_Init+0x212>
 800392c:	2306      	movs	r3, #6
 800392e:	e00a      	b.n	8003946 <HAL_GPIO_Init+0x212>
 8003930:	2305      	movs	r3, #5
 8003932:	e008      	b.n	8003946 <HAL_GPIO_Init+0x212>
 8003934:	2304      	movs	r3, #4
 8003936:	e006      	b.n	8003946 <HAL_GPIO_Init+0x212>
 8003938:	2303      	movs	r3, #3
 800393a:	e004      	b.n	8003946 <HAL_GPIO_Init+0x212>
 800393c:	2302      	movs	r3, #2
 800393e:	e002      	b.n	8003946 <HAL_GPIO_Init+0x212>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_GPIO_Init+0x212>
 8003944:	2300      	movs	r3, #0
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	f002 0203 	and.w	r2, r2, #3
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	4093      	lsls	r3, r2
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003956:	4937      	ldr	r1, [pc, #220]	; (8003a34 <HAL_GPIO_Init+0x300>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003964:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_GPIO_Init+0x320>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003988:	4a32      	ldr	r2, [pc, #200]	; (8003a54 <HAL_GPIO_Init+0x320>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800398e:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_GPIO_Init+0x320>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039b2:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x320>)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_GPIO_Init+0x320>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <HAL_GPIO_Init+0x320>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x320>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a06:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_GPIO_Init+0x320>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f47f ae91 	bne.w	8003744 <HAL_GPIO_Init+0x10>
  }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800
 8003a40:	48000c00 	.word	0x48000c00
 8003a44:	48001000 	.word	0x48001000
 8003a48:	48001400 	.word	0x48001400
 8003a4c:	48001800 	.word	0x48001800
 8003a50:	48001c00 	.word	0x48001c00
 8003a54:	40010400 	.word	0x40010400

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a74:	e002      	b.n	8003a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e08d      	b.n	8003bb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fe02 	bl	80016b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	e006      	b.n	8003b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d108      	bne.n	8003b2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	e007      	b.n	8003b3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69d9      	ldr	r1, [r3, #28]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	460b      	mov	r3, r1
 8003bce:	817b      	strh	r3, [r7, #10]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	f040 80fd 	bne.w	8003ddc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2C_Master_Transmit+0x30>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0f6      	b.n	8003dde <HAL_I2C_Master_Transmit+0x21e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fe f896 	bl	8001d28 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2319      	movs	r3, #25
 8003c04:	2201      	movs	r2, #1
 8003c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fce0 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0e1      	b.n	8003dde <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2221      	movs	r2, #33	; 0x21
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2210      	movs	r2, #16
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	893a      	ldrh	r2, [r7, #8]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2bff      	cmp	r3, #255	; 0xff
 8003c4a:	d906      	bls.n	8003c5a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e007      	b.n	8003c6a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d024      	beq.n	8003cbc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	8979      	ldrh	r1, [r7, #10]
 8003cae:	4b4e      	ldr	r3, [pc, #312]	; (8003de8 <HAL_I2C_Master_Transmit+0x228>)
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fec7 	bl	8004a48 <I2C_TransferConfig>
 8003cba:	e066      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <HAL_I2C_Master_Transmit+0x228>)
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 febc 	bl	8004a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cd0:	e05b      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	6a39      	ldr	r1, [r7, #32]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fcc9 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e07b      	b.n	8003dde <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d034      	beq.n	8003d8a <HAL_I2C_Master_Transmit+0x1ca>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d130      	bne.n	8003d8a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fc4c 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e04d      	b.n	8003dde <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2bff      	cmp	r3, #255	; 0xff
 8003d4a:	d90e      	bls.n	8003d6a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	22ff      	movs	r2, #255	; 0xff
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	8979      	ldrh	r1, [r7, #10]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fe70 	bl	8004a48 <I2C_TransferConfig>
 8003d68:	e00f      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	8979      	ldrh	r1, [r7, #10]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fe5f 	bl	8004a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d19e      	bne.n	8003cd2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	6a39      	ldr	r1, [r7, #32]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fcaf 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e01a      	b.n	8003dde <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2220      	movs	r2, #32
 8003dae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_I2C_Master_Transmit+0x22c>)
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	80002000 	.word	0x80002000
 8003dec:	fe00e800 	.word	0xfe00e800

08003df0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	817b      	strh	r3, [r7, #10]
 8003e00:	4613      	mov	r3, r2
 8003e02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	f040 80db 	bne.w	8003fc8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2C_Master_Receive+0x30>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0d4      	b.n	8003fca <HAL_I2C_Master_Receive+0x1da>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd ff7e 	bl	8001d28 <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fbc8 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0bf      	b.n	8003fca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2222      	movs	r2, #34	; 0x22
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2210      	movs	r2, #16
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	893a      	ldrh	r2, [r7, #8]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2bff      	cmp	r3, #255	; 0xff
 8003e7a:	d90e      	bls.n	8003e9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8979      	ldrh	r1, [r7, #10]
 8003e8a:	4b52      	ldr	r3, [pc, #328]	; (8003fd4 <HAL_I2C_Master_Receive+0x1e4>)
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fdd8 	bl	8004a48 <I2C_TransferConfig>
 8003e98:	e06d      	b.n	8003f76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	4b49      	ldr	r3, [pc, #292]	; (8003fd4 <HAL_I2C_Master_Receive+0x1e4>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fdc7 	bl	8004a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003eba:	e05c      	b.n	8003f76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	6a39      	ldr	r1, [r7, #32]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fc5f 	bl	8004784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e07c      	b.n	8003fca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d034      	beq.n	8003f76 <HAL_I2C_Master_Receive+0x186>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d130      	bne.n	8003f76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fb56 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e04d      	b.n	8003fca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2bff      	cmp	r3, #255	; 0xff
 8003f36:	d90e      	bls.n	8003f56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	8979      	ldrh	r1, [r7, #10]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fd7a 	bl	8004a48 <I2C_TransferConfig>
 8003f54:	e00f      	b.n	8003f76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	8979      	ldrh	r1, [r7, #10]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fd69 	bl	8004a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d19d      	bne.n	8003ebc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	6a39      	ldr	r1, [r7, #32]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fbb9 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01a      	b.n	8003fca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_I2C_Master_Receive+0x1e8>)
 8003fa8:	400b      	ands	r3, r1
 8003faa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	80002400 	.word	0x80002400
 8003fd8:	fe00e800 	.word	0xfe00e800

08003fdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	817b      	strh	r3, [r7, #10]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	813b      	strh	r3, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	f040 80f9 	bne.w	80041f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_I2C_Mem_Write+0x34>
 800400a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0ed      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_I2C_Mem_Write+0x4e>
 8004026:	2302      	movs	r3, #2
 8004028:	e0e6      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004032:	f7fd fe79 	bl	8001d28 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2319      	movs	r3, #25
 800403e:	2201      	movs	r2, #1
 8004040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fac3 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0d1      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2240      	movs	r2, #64	; 0x40
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800407c:	88f8      	ldrh	r0, [r7, #6]
 800407e:	893a      	ldrh	r2, [r7, #8]
 8004080:	8979      	ldrh	r1, [r7, #10]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	4603      	mov	r3, r0
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f9d3 	bl	8004438 <I2C_RequestMemoryWrite>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0a9      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2bff      	cmp	r3, #255	; 0xff
 80040ac:	d90e      	bls.n	80040cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	; 0xff
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fcbf 	bl	8004a48 <I2C_TransferConfig>
 80040ca:	e00f      	b.n	80040ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fcae 	bl	8004a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fabc 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e07b      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d034      	beq.n	80041a4 <HAL_I2C_Mem_Write+0x1c8>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d130      	bne.n	80041a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2200      	movs	r2, #0
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fa3f 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e04d      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2bff      	cmp	r3, #255	; 0xff
 8004164:	d90e      	bls.n	8004184 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004170:	b2da      	uxtb	r2, r3
 8004172:	8979      	ldrh	r1, [r7, #10]
 8004174:	2300      	movs	r3, #0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fc63 	bl	8004a48 <I2C_TransferConfig>
 8004182:	e00f      	b.n	80041a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	b2da      	uxtb	r2, r3
 8004194:	8979      	ldrh	r1, [r7, #10]
 8004196:	2300      	movs	r3, #0
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fc52 	bl	8004a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d19e      	bne.n	80040ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 faa2 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e01a      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2220      	movs	r2, #32
 80041c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_I2C_Mem_Write+0x224>)
 80041d6:	400b      	ands	r3, r1
 80041d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	fe00e800 	.word	0xfe00e800

08004204 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4603      	mov	r3, r0
 8004214:	817b      	strh	r3, [r7, #10]
 8004216:	460b      	mov	r3, r1
 8004218:	813b      	strh	r3, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	f040 80fd 	bne.w	8004426 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_I2C_Mem_Read+0x34>
 8004232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0f1      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Mem_Read+0x4e>
 800424e:	2302      	movs	r3, #2
 8004250:	e0ea      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800425a:	f7fd fd65 	bl	8001d28 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2319      	movs	r3, #25
 8004266:	2201      	movs	r2, #1
 8004268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f9af 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d5      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2222      	movs	r2, #34	; 0x22
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2240      	movs	r2, #64	; 0x40
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042a4:	88f8      	ldrh	r0, [r7, #6]
 80042a6:	893a      	ldrh	r2, [r7, #8]
 80042a8:	8979      	ldrh	r1, [r7, #10]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4603      	mov	r3, r0
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f913 	bl	80044e0 <I2C_RequestMemoryRead>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0ad      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2bff      	cmp	r3, #255	; 0xff
 80042d4:	d90e      	bls.n	80042f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	4b52      	ldr	r3, [pc, #328]	; (8004430 <HAL_I2C_Mem_Read+0x22c>)
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fbab 	bl	8004a48 <I2C_TransferConfig>
 80042f2:	e00f      	b.n	8004314 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	b2da      	uxtb	r2, r3
 8004304:	8979      	ldrh	r1, [r7, #10]
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_I2C_Mem_Read+0x22c>)
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fb9a 	bl	8004a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	2200      	movs	r2, #0
 800431c:	2104      	movs	r1, #4
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f956 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e07c      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d034      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x1d0>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d130      	bne.n	80043d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	2200      	movs	r2, #0
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f927 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e04d      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2bff      	cmp	r3, #255	; 0xff
 8004394:	d90e      	bls.n	80043b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	22ff      	movs	r2, #255	; 0xff
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	8979      	ldrh	r1, [r7, #10]
 80043a4:	2300      	movs	r3, #0
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fb4b 	bl	8004a48 <I2C_TransferConfig>
 80043b2:	e00f      	b.n	80043d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	8979      	ldrh	r1, [r7, #10]
 80043c6:	2300      	movs	r3, #0
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fb3a 	bl	8004a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d19a      	bne.n	8004314 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f98a 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e01a      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2220      	movs	r2, #32
 80043f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_I2C_Mem_Read+0x230>)
 8004406:	400b      	ands	r3, r1
 8004408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	80002400 	.word	0x80002400
 8004434:	fe00e800 	.word	0xfe00e800

08004438 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4603      	mov	r3, r0
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	460b      	mov	r3, r1
 800444c:	813b      	strh	r3, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	8979      	ldrh	r1, [r7, #10]
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <I2C_RequestMemoryWrite+0xa4>)
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 faf1 	bl	8004a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8ff 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02c      	b.n	80044d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	629a      	str	r2, [r3, #40]	; 0x28
 800448a:	e015      	b.n	80044b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	b29b      	uxth	r3, r3
 8004492:	b2da      	uxtb	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	69b9      	ldr	r1, [r7, #24]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f8e5 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e012      	b.n	80044d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ae:	893b      	ldrh	r3, [r7, #8]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2200      	movs	r2, #0
 80044c0:	2180      	movs	r1, #128	; 0x80
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f884 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	80002000 	.word	0x80002000

080044e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	460b      	mov	r3, r1
 80044f4:	813b      	strh	r3, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	4b20      	ldr	r3, [pc, #128]	; (8004584 <I2C_RequestMemoryRead+0xa4>)
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa9e 	bl	8004a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f8ac 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e02c      	b.n	800457a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004526:	893b      	ldrh	r3, [r7, #8]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
 8004530:	e015      	b.n	800455e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004532:	893b      	ldrh	r3, [r7, #8]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	b29b      	uxth	r3, r3
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f892 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e012      	b.n	800457a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004554:	893b      	ldrh	r3, [r7, #8]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2200      	movs	r2, #0
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f831 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	80002000 	.word	0x80002000

08004588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d103      	bne.n	80045a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d007      	beq.n	80045c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	619a      	str	r2, [r3, #24]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e0:	e031      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d02d      	beq.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fd fb9d 	bl	8001d28 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d122      	bne.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	429a      	cmp	r2, r3
 800461c:	d113      	bne.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e00f      	b.n	8004666 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	429a      	cmp	r2, r3
 8004662:	d0be      	beq.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800467a:	e033      	b.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f901 	bl	8004888 <I2C_IsErrorOccurred>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e031      	b.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d025      	beq.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004698:	f7fd fb46 	bl	8001d28 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d11a      	bne.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d013      	beq.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d1c4      	bne.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004708:	e02f      	b.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f8ba 	bl	8004888 <I2C_IsErrorOccurred>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e02d      	b.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fd fb03 	bl	8001d28 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d013      	beq.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e007      	b.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d1c8      	bne.n	800470a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004790:	e06b      	b.n	800486a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f876 	bl	8004888 <I2C_IsErrorOccurred>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e069      	b.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d138      	bne.n	8004826 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d105      	bne.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e055      	b.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d107      	bne.n	80047ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2210      	movs	r2, #16
 80047e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2204      	movs	r2, #4
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
 80047ea:	e002      	b.n	80047f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004806:	400b      	ands	r3, r1
 8004808:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e029      	b.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fd fa7f 	bl	8001d28 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d00f      	beq.n	800486a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d18c      	bne.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	fe00e800 	.word	0xfe00e800

08004888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d068      	beq.n	8004986 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2210      	movs	r2, #16
 80048ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048bc:	e049      	b.n	8004952 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d045      	beq.n	8004952 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fd fa2f 	bl	8001d28 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_IsErrorOccurred+0x54>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d13a      	bne.n	8004952 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fe:	d121      	bne.n	8004944 <I2C_IsErrorOccurred+0xbc>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004906:	d01d      	beq.n	8004944 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b20      	cmp	r3, #32
 800490c:	d01a      	beq.n	8004944 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800491e:	f7fd fa03 	bl	8001d28 <HAL_GetTick>
 8004922:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004924:	e00e      	b.n	8004944 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004926:	f7fd f9ff 	bl	8001d28 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b19      	cmp	r3, #25
 8004932:	d907      	bls.n	8004944 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f043 0320 	orr.w	r3, r3, #32
 800493a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004942:	e006      	b.n	8004952 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d1e9      	bne.n	8004926 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d003      	beq.n	8004968 <I2C_IsErrorOccurred+0xe0>
 8004960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0aa      	beq.n	80048be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01c      	beq.n	8004a36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fdc3 	bl	8004588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <I2C_IsErrorOccurred+0x1bc>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3728      	adds	r7, #40	; 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	fe00e800 	.word	0xfe00e800

08004a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	4613      	mov	r3, r2
 8004a58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a60:	7a7b      	ldrb	r3, [r7, #9]
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	0d5b      	lsrs	r3, r3, #21
 8004a82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <I2C_TransferConfig+0x60>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	ea02 0103 	and.w	r1, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	03ff63ff 	.word	0x03ff63ff

08004aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d138      	bne.n	8004b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e032      	b.n	8004b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d139      	bne.n	8004bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e033      	b.n	8004bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2224      	movs	r2, #36	; 0x24
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40007000 	.word	0x40007000

08004bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c06:	d130      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c08:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d038      	beq.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2232      	movs	r2, #50	; 0x32
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0c9b      	lsrs	r3, r3, #18
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c3c:	e002      	b.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c44:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d102      	bne.n	8004c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f2      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c64:	d110      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e00f      	b.n	8004c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c76:	d007      	beq.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c80:	4a05      	ldr	r2, [pc, #20]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	20000008 	.word	0x20000008
 8004ca0:	431bde83 	.word	0x431bde83

08004ca4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f000 bc08 	b.w	80054c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb8:	4b96      	ldr	r3, [pc, #600]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc2:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80e4 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4c>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	f040 808b 	bne.w	8004dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	f040 8087 	bne.w	8004dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cf0:	4b88      	ldr	r3, [pc, #544]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_OscConfig+0x64>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e3df      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_RCC_OscConfig+0x7e>
 8004d18:	4b7e      	ldr	r3, [pc, #504]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d20:	e005      	b.n	8004d2e <HAL_RCC_OscConfig+0x8a>
 8004d22:	4b7c      	ldr	r3, [pc, #496]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d223      	bcs.n	8004d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd5a 	bl	80057f0 <RCC_SetFlashLatencyFromMSIRange>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e3c0      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a72      	ldr	r2, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	f043 0308 	orr.w	r3, r3, #8
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	4b70      	ldr	r3, [pc, #448]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	496d      	ldr	r1, [pc, #436]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d64:	4b6b      	ldr	r3, [pc, #428]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	4968      	ldr	r1, [pc, #416]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
 8004d78:	e025      	b.n	8004dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d7a:	4b66      	ldr	r3, [pc, #408]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a65      	ldr	r2, [pc, #404]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d80:	f043 0308 	orr.w	r3, r3, #8
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4960      	ldr	r1, [pc, #384]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d98:	4b5e      	ldr	r3, [pc, #376]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	495b      	ldr	r1, [pc, #364]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fd1a 	bl	80057f0 <RCC_SetFlashLatencyFromMSIRange>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e380      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dc6:	f000 fc87 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	4950      	ldr	r1, [pc, #320]	; (8004f18 <HAL_RCC_OscConfig+0x274>)
 8004dd8:	5ccb      	ldrb	r3, [r1, r3]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	fa22 f303 	lsr.w	r3, r2, r3
 8004de2:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <HAL_RCC_OscConfig+0x278>)
 8004de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004de6:	4b4e      	ldr	r3, [pc, #312]	; (8004f20 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fc ff4c 	bl	8001c88 <HAL_InitTick>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d052      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	e364      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d032      	beq.n	8004e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e06:	4b43      	ldr	r3, [pc, #268]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a42      	ldr	r2, [pc, #264]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e12:	f7fc ff89 	bl	8001d28 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e1a:	f7fc ff85 	bl	8001d28 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e34d      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e2c:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e38:	4b36      	ldr	r3, [pc, #216]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a35      	ldr	r2, [pc, #212]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	f043 0308 	orr.w	r3, r3, #8
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4930      	ldr	r1, [pc, #192]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	492b      	ldr	r1, [pc, #172]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]
 8004e6a:	e01a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a28      	ldr	r2, [pc, #160]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e78:	f7fc ff56 	bl	8001d28 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e80:	f7fc ff52 	bl	8001d28 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e31a      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x1dc>
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d073      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x21c>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b0c      	cmp	r3, #12
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d063      	beq.n	8004f94 <HAL_RCC_OscConfig+0x2f0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d15f      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e2f7      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e025      	b.n	8004f3c <HAL_RCC_OscConfig+0x298>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef8:	d114      	bne.n	8004f24 <HAL_RCC_OscConfig+0x280>
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a02      	ldr	r2, [pc, #8]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e013      	b.n	8004f3c <HAL_RCC_OscConfig+0x298>
 8004f14:	40021000 	.word	0x40021000
 8004f18:	0800e224 	.word	0x0800e224
 8004f1c:	20000008 	.word	0x20000008
 8004f20:	2000000c 	.word	0x2000000c
 8004f24:	4ba0      	ldr	r3, [pc, #640]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a9f      	ldr	r2, [pc, #636]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b9d      	ldr	r3, [pc, #628]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a9c      	ldr	r2, [pc, #624]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d013      	beq.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fef0 	bl	8001d28 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fc feec 	bl	8001d28 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e2b4      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f5e:	4b92      	ldr	r3, [pc, #584]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x2a8>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fedc 	bl	8001d28 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fc fed8 	bl	8001d28 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e2a0      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f86:	4b88      	ldr	r3, [pc, #544]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x2d0>
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d060      	beq.n	8005064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x310>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d119      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d116      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb4:	4b7c      	ldr	r3, [pc, #496]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_OscConfig+0x328>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e27d      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fcc:	4b76      	ldr	r3, [pc, #472]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	061b      	lsls	r3, r3, #24
 8004fda:	4973      	ldr	r1, [pc, #460]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fe0:	e040      	b.n	8005064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d023      	beq.n	8005032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fea:	4b6f      	ldr	r3, [pc, #444]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6e      	ldr	r2, [pc, #440]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fc fe97 	bl	8001d28 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fc fe93 	bl	8001d28 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e25b      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005010:	4b65      	ldr	r3, [pc, #404]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b62      	ldr	r3, [pc, #392]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	495f      	ldr	r1, [pc, #380]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
 8005030:	e018      	b.n	8005064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b5d      	ldr	r3, [pc, #372]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5c      	ldr	r2, [pc, #368]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800503c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fc fe73 	bl	8001d28 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005046:	f7fc fe6f 	bl	8001d28 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e237      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03c      	beq.n	80050ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01c      	beq.n	80050b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005078:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800507a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507e:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc fe4e 	bl	8001d28 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005090:	f7fc fe4a 	bl	8001d28 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e212      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050a2:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 80050a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0ef      	beq.n	8005090 <HAL_RCC_OscConfig+0x3ec>
 80050b0:	e01b      	b.n	80050ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 80050b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b8:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fc fe31 	bl	8001d28 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ca:	f7fc fe2d 	bl	8001d28 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e1f5      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050dc:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ef      	bne.n	80050ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80a6 	beq.w	8005244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f8:	2300      	movs	r3, #0
 80050fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	6593      	str	r3, [r2, #88]	; 0x58
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005120:	2301      	movs	r3, #1
 8005122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <HAL_RCC_OscConfig+0x508>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d118      	bne.n	8005162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005130:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <HAL_RCC_OscConfig+0x508>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <HAL_RCC_OscConfig+0x508>)
 8005136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513c:	f7fc fdf4 	bl	8001d28 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005144:	f7fc fdf0 	bl	8001d28 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1b8      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005156:	4b15      	ldr	r3, [pc, #84]	; (80051ac <HAL_RCC_OscConfig+0x508>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d108      	bne.n	800517c <HAL_RCC_OscConfig+0x4d8>
 800516a:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	4a0d      	ldr	r2, [pc, #52]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800517a:	e029      	b.n	80051d0 <HAL_RCC_OscConfig+0x52c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d115      	bne.n	80051b0 <HAL_RCC_OscConfig+0x50c>
 8005184:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	4a07      	ldr	r2, [pc, #28]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800518c:	f043 0304 	orr.w	r3, r3, #4
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	4a03      	ldr	r2, [pc, #12]	; (80051a8 <HAL_RCC_OscConfig+0x504>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051a4:	e014      	b.n	80051d0 <HAL_RCC_OscConfig+0x52c>
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40007000 	.word	0x40007000
 80051b0:	4b9d      	ldr	r3, [pc, #628]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b6:	4a9c      	ldr	r2, [pc, #624]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051c0:	4b99      	ldr	r3, [pc, #612]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	4a98      	ldr	r2, [pc, #608]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d016      	beq.n	8005206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fc fda6 	bl	8001d28 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fc fda2 	bl	8001d28 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e168      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f6:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ed      	beq.n	80051e0 <HAL_RCC_OscConfig+0x53c>
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fc fd8f 	bl	8001d28 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc fd8b 	bl	8001d28 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e151      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005224:	4b80      	ldr	r3, [pc, #512]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ed      	bne.n	800520e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d105      	bne.n	8005244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005238:	4b7b      	ldr	r3, [pc, #492]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	4a7a      	ldr	r2, [pc, #488]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d03c      	beq.n	80052ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01c      	beq.n	8005292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005258:	4b73      	ldr	r3, [pc, #460]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 800525a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525e:	4a72      	ldr	r2, [pc, #456]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fc fd5e 	bl	8001d28 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005270:	f7fc fd5a 	bl	8001d28 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e122      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005282:	4b69      	ldr	r3, [pc, #420]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ef      	beq.n	8005270 <HAL_RCC_OscConfig+0x5cc>
 8005290:	e01b      	b.n	80052ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005292:	4b65      	ldr	r3, [pc, #404]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005298:	4a63      	ldr	r2, [pc, #396]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fc fd41 	bl	8001d28 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052aa:	f7fc fd3d 	bl	8001d28 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e105      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052bc:	4b5a      	ldr	r3, [pc, #360]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80052be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ef      	bne.n	80052aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80f9 	beq.w	80054c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	2b02      	cmp	r3, #2
 80052da:	f040 80cf 	bne.w	800547c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052de:	4b52      	ldr	r3, [pc, #328]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f003 0203 	and.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d12c      	bne.n	800534c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	3b01      	subs	r3, #1
 80052fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d123      	bne.n	800534c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d11b      	bne.n	800534c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d113      	bne.n	800534c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	3b01      	subs	r3, #1
 8005332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d109      	bne.n	800534c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	3b01      	subs	r3, #1
 8005346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d071      	beq.n	8005430 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d068      	beq.n	8005424 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005352:	4b35      	ldr	r3, [pc, #212]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800535e:	4b32      	ldr	r3, [pc, #200]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0ac      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800536e:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800537a:	f7fc fcd5 	bl	8001d28 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005382:	f7fc fcd1 	bl	8001d28 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e099      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f0      	bne.n	8005382 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a0:	4b21      	ldr	r3, [pc, #132]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCC_OscConfig+0x788>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053b0:	3a01      	subs	r2, #1
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	4311      	orrs	r1, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053ba:	0212      	lsls	r2, r2, #8
 80053bc:	4311      	orrs	r1, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053c2:	0852      	lsrs	r2, r2, #1
 80053c4:	3a01      	subs	r2, #1
 80053c6:	0552      	lsls	r2, r2, #21
 80053c8:	4311      	orrs	r1, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053ce:	0852      	lsrs	r2, r2, #1
 80053d0:	3a01      	subs	r2, #1
 80053d2:	0652      	lsls	r2, r2, #25
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053da:	06d2      	lsls	r2, r2, #27
 80053dc:	430a      	orrs	r2, r1
 80053de:	4912      	ldr	r1, [pc, #72]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053e4:	4b10      	ldr	r3, [pc, #64]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80053ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a0c      	ldr	r2, [pc, #48]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 80053f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053fc:	f7fc fc94 	bl	8001d28 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005404:	f7fc fc90 	bl	8001d28 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e058      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <HAL_RCC_OscConfig+0x784>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005422:	e050      	b.n	80054c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e04f      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
 8005428:	40021000 	.word	0x40021000
 800542c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d144      	bne.n	80054c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800543c:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a23      	ldr	r2, [pc, #140]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 8005442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 800544e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005454:	f7fc fc68 	bl	8001d28 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc fc64 	bl	8001d28 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e02c      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546e:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x7b8>
 800547a:	e024      	b.n	80054c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d01f      	beq.n	80054c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 8005488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800548c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fc fc4b 	bl	8001d28 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005496:	f7fc fc47 	bl	8001d28 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e00f      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f0      	bne.n	8005496 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	4905      	ldr	r1, [pc, #20]	; (80054d0 <HAL_RCC_OscConfig+0x82c>)
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_RCC_OscConfig+0x830>)
 80054bc:	4013      	ands	r3, r2
 80054be:	60cb      	str	r3, [r1, #12]
 80054c0:	e001      	b.n	80054c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	feeefffc 	.word	0xfeeefffc

080054d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0e7      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054ec:	4b75      	ldr	r3, [pc, #468]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d910      	bls.n	800551c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b72      	ldr	r3, [pc, #456]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 0207 	bic.w	r2, r3, #7
 8005502:	4970      	ldr	r1, [pc, #448]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b6e      	ldr	r3, [pc, #440]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0cf      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d010      	beq.n	800554a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	4b66      	ldr	r3, [pc, #408]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005534:	429a      	cmp	r2, r3
 8005536:	d908      	bls.n	800554a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	4b63      	ldr	r3, [pc, #396]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4960      	ldr	r1, [pc, #384]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005546:	4313      	orrs	r3, r2
 8005548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d04c      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d107      	bne.n	800556e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555e:	4b5a      	ldr	r3, [pc, #360]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d121      	bne.n	80055ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e0a6      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005576:	4b54      	ldr	r3, [pc, #336]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d115      	bne.n	80055ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e09a      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800558e:	4b4e      	ldr	r3, [pc, #312]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e08e      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800559e:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e086      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055ae:	4b46      	ldr	r3, [pc, #280]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4943      	ldr	r1, [pc, #268]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c0:	f7fc fbb2 	bl	8001d28 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fc fbae 	bl	8001d28 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e06e      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	4b3a      	ldr	r3, [pc, #232]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 020c 	and.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1eb      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005608:	429a      	cmp	r2, r3
 800560a:	d208      	bcs.n	800561e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800560c:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	492b      	ldr	r1, [pc, #172]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800561e:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d210      	bcs.n	800564e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 0207 	bic.w	r2, r3, #7
 8005634:	4923      	ldr	r1, [pc, #140]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <HAL_RCC_ClockConfig+0x1ec>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d001      	beq.n	800564e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e036      	b.n	80056bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	4918      	ldr	r1, [pc, #96]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005668:	4313      	orrs	r3, r2
 800566a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4910      	ldr	r1, [pc, #64]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005688:	4313      	orrs	r3, r2
 800568a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800568c:	f000 f824 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	490b      	ldr	r1, [pc, #44]	; (80056cc <HAL_RCC_ClockConfig+0x1f4>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 80056aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_ClockConfig+0x1fc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fc fae9 	bl	8001c88 <HAL_InitTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80056ba:	7afb      	ldrb	r3, [r7, #11]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40022000 	.word	0x40022000
 80056c8:	40021000 	.word	0x40021000
 80056cc:	0800e224 	.word	0x0800e224
 80056d0:	20000008 	.word	0x20000008
 80056d4:	2000000c 	.word	0x2000000c

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e6:	4b3e      	ldr	r3, [pc, #248]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f0:	4b3b      	ldr	r3, [pc, #236]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x34>
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b0c      	cmp	r3, #12
 8005704:	d121      	bne.n	800574a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d11e      	bne.n	800574a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800570c:	4b34      	ldr	r3, [pc, #208]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005718:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800571a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	e005      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005728:	4b2d      	ldr	r3, [pc, #180]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005734:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d102      	bne.n	8005756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e004      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d101      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800575c:	4b23      	ldr	r3, [pc, #140]	; (80057ec <HAL_RCC_GetSysClockFreq+0x114>)
 800575e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d134      	bne.n	80057d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d003      	beq.n	800577e <HAL_RCC_GetSysClockFreq+0xa6>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d003      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0xac>
 800577c:	e005      	b.n	800578a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005780:	617b      	str	r3, [r7, #20]
      break;
 8005782:	e005      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <HAL_RCC_GetSysClockFreq+0x114>)
 8005786:	617b      	str	r3, [r7, #20]
      break;
 8005788:	e002      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	617b      	str	r3, [r7, #20]
      break;
 800578e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005790:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	3301      	adds	r3, #1
 800579c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	fb03 f202 	mul.w	r2, r3, r2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	0e5b      	lsrs	r3, r3, #25
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	3301      	adds	r3, #1
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057d0:	69bb      	ldr	r3, [r7, #24]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3724      	adds	r7, #36	; 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
 80057e4:	0800e234 	.word	0x0800e234
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	007a1200 	.word	0x007a1200

080057f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005808:	f7ff f9e8 	bl	8004bdc <HAL_PWREx_GetVoltageRange>
 800580c:	6178      	str	r0, [r7, #20]
 800580e:	e014      	b.n	800583a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	6593      	str	r3, [r2, #88]	; 0x58
 800581c:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005828:	f7ff f9d8 	bl	8004bdc <HAL_PWREx_GetVoltageRange>
 800582c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005840:	d10b      	bne.n	800585a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d919      	bls.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2ba0      	cmp	r3, #160	; 0xa0
 800584c:	d902      	bls.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800584e:	2302      	movs	r3, #2
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	e013      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005854:	2301      	movs	r3, #1
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	e010      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d902      	bls.n	8005866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005860:	2303      	movs	r3, #3
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	e00a      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b80      	cmp	r3, #128	; 0x80
 800586a:	d102      	bne.n	8005872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800586c:	2302      	movs	r3, #2
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e004      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b70      	cmp	r3, #112	; 0x70
 8005876:	d101      	bne.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005878:	2301      	movs	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 0207 	bic.w	r2, r3, #7
 8005884:	4909      	ldr	r1, [pc, #36]	; (80058ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	429a      	cmp	r2, r3
 8005898:	d001      	beq.n	800589e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40022000 	.word	0x40022000

080058b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058b8:	2300      	movs	r3, #0
 80058ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058bc:	2300      	movs	r3, #0
 80058be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d041      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058d4:	d02a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058da:	d824      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058e0:	d008      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058e6:	d81e      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f0:	d010      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058f2:	e018      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058f4:	4b86      	ldr	r3, [pc, #536]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4a85      	ldr	r2, [pc, #532]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005900:	e015      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f000 facd 	bl	8005ea8 <RCCEx_PLLSAI1_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005912:	e00c      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3320      	adds	r3, #32
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fbb6 	bl	800608c <RCCEx_PLLSAI2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005924:	e003      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	74fb      	strb	r3, [r7, #19]
      break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800592c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005934:	4b76      	ldr	r3, [pc, #472]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005942:	4973      	ldr	r1, [pc, #460]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800594a:	e001      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d041      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005964:	d02a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800596a:	d824      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800596c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005970:	d008      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005976:	d81e      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800597c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005980:	d010      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005982:	e018      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005984:	4b62      	ldr	r3, [pc, #392]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a61      	ldr	r2, [pc, #388]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005990:	e015      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fa85 	bl	8005ea8 <RCCEx_PLLSAI1_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059a2:	e00c      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3320      	adds	r3, #32
 80059a8:	2100      	movs	r1, #0
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fb6e 	bl	800608c <RCCEx_PLLSAI2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059b4:	e003      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	74fb      	strb	r3, [r7, #19]
      break;
 80059ba:	e000      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80059bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059c4:	4b52      	ldr	r3, [pc, #328]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d2:	494f      	ldr	r1, [pc, #316]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059da:	e001      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a0 	beq.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059f2:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a08:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	4a40      	ldr	r2, [pc, #256]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6593      	str	r3, [r2, #88]	; 0x58
 8005a14:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a20:	2301      	movs	r3, #1
 8005a22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a24:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a30:	f7fc f97a 	bl	8001d28 <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a36:	e009      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a38:	f7fc f976 	bl	8001d28 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d902      	bls.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	74fb      	strb	r3, [r7, #19]
        break;
 8005a4a:	e005      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a4c:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ef      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a58:	7cfb      	ldrb	r3, [r7, #19]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d15c      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a5e:	4b2c      	ldr	r3, [pc, #176]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01f      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d019      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a7c:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	4a20      	ldr	r2, [pc, #128]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fc f935 	bl	8001d28 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ac0:	e00b      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc f931 	bl	8001d28 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d902      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ad8:	e006      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ec      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	4904      	ldr	r1, [pc, #16]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b06:	e009      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	74bb      	strb	r3, [r7, #18]
 8005b0c:	e006      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	7cfb      	ldrb	r3, [r7, #19]
 8005b1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b1c:	7c7b      	ldrb	r3, [r7, #17]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b22:	4ba6      	ldr	r3, [pc, #664]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b26:	4aa5      	ldr	r2, [pc, #660]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b3a:	4ba0      	ldr	r3, [pc, #640]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b40:	f023 0203 	bic.w	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	499c      	ldr	r1, [pc, #624]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b5c:	4b97      	ldr	r3, [pc, #604]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f023 020c 	bic.w	r2, r3, #12
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	4994      	ldr	r1, [pc, #592]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b7e:	4b8f      	ldr	r3, [pc, #572]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	498b      	ldr	r1, [pc, #556]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ba0:	4b86      	ldr	r3, [pc, #536]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	4983      	ldr	r1, [pc, #524]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bc2:	4b7e      	ldr	r3, [pc, #504]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd0:	497a      	ldr	r1, [pc, #488]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005be4:	4b75      	ldr	r3, [pc, #468]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	4972      	ldr	r1, [pc, #456]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c06:	4b6d      	ldr	r3, [pc, #436]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	4969      	ldr	r1, [pc, #420]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c28:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c36:	4961      	ldr	r1, [pc, #388]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c4a:	4b5c      	ldr	r3, [pc, #368]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c58:	4958      	ldr	r1, [pc, #352]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c6c:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	4950      	ldr	r1, [pc, #320]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c8e:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9c:	4947      	ldr	r1, [pc, #284]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cb0:	4b42      	ldr	r3, [pc, #264]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cb6:	f023 0203 	bic.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	493f      	ldr	r1, [pc, #252]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d028      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cd2:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	4936      	ldr	r1, [pc, #216]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf0:	d106      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf2:	4b32      	ldr	r3, [pc, #200]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	4a31      	ldr	r2, [pc, #196]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cfc:	60d3      	str	r3, [r2, #12]
 8005cfe:	e011      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f8c9 	bl	8005ea8 <RCCEx_PLLSAI1_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005d20:	7cfb      	ldrb	r3, [r7, #19]
 8005d22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d028      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d30:	4b22      	ldr	r3, [pc, #136]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	491f      	ldr	r1, [pc, #124]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d5a:	60d3      	str	r3, [r2, #12]
 8005d5c:	e011      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d66:	d10c      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f89a 	bl	8005ea8 <RCCEx_PLLSAI1_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9c:	4907      	ldr	r1, [pc, #28]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dac:	d108      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4a02      	ldr	r2, [pc, #8]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db8:	60d3      	str	r3, [r2, #12]
 8005dba:	e013      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005dbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f869 	bl	8005ea8 <RCCEx_PLLSAI1_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02f      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dfe:	4929      	ldr	r1, [pc, #164]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	2102      	movs	r1, #2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f846 	bl	8005ea8 <RCCEx_PLLSAI1_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005e26:	7cfb      	ldrb	r3, [r7, #19]
 8005e28:	74bb      	strb	r3, [r7, #18]
 8005e2a:	e011      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3320      	adds	r3, #32
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 f925 	bl	800608c <RCCEx_PLLSAI2_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005e4c:	7cfb      	ldrb	r3, [r7, #19]
 8005e4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e6c:	490d      	ldr	r1, [pc, #52]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e80:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e98:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000

08005ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eb6:	4b74      	ldr	r3, [pc, #464]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ec2:	4b71      	ldr	r3, [pc, #452]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0203 	and.w	r2, r3, #3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d10d      	bne.n	8005eee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005eda:	4b6b      	ldr	r3, [pc, #428]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
       ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d047      	beq.n	8005f7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	e044      	b.n	8005f7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d018      	beq.n	8005f2e <RCCEx_PLLSAI1_Config+0x86>
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d825      	bhi.n	8005f4c <RCCEx_PLLSAI1_Config+0xa4>
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d002      	beq.n	8005f0a <RCCEx_PLLSAI1_Config+0x62>
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d009      	beq.n	8005f1c <RCCEx_PLLSAI1_Config+0x74>
 8005f08:	e020      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f0a:	4b5f      	ldr	r3, [pc, #380]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d11d      	bne.n	8005f52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1a:	e01a      	b.n	8005f52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f1c:	4b5a      	ldr	r3, [pc, #360]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d116      	bne.n	8005f56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f2c:	e013      	b.n	8005f56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f2e:	4b56      	ldr	r3, [pc, #344]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f3a:	4b53      	ldr	r3, [pc, #332]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f4a:	e006      	b.n	8005f5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f50:	e004      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f52:	bf00      	nop
 8005f54:	e002      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10d      	bne.n	8005f7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f62:	4b49      	ldr	r3, [pc, #292]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6819      	ldr	r1, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	430b      	orrs	r3, r1
 8005f78:	4943      	ldr	r1, [pc, #268]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d17c      	bne.n	800607e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f84:	4b40      	ldr	r3, [pc, #256]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f90:	f7fb feca 	bl	8001d28 <HAL_GetTick>
 8005f94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f96:	e009      	b.n	8005fac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f98:	f7fb fec6 	bl	8001d28 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d902      	bls.n	8005fac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	73fb      	strb	r3, [r7, #15]
        break;
 8005faa:	e005      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fac:	4b36      	ldr	r3, [pc, #216]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ef      	bne.n	8005f98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d15f      	bne.n	800607e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d110      	bne.n	8005fe6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fc4:	4b30      	ldr	r3, [pc, #192]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6892      	ldr	r2, [r2, #8]
 8005fd4:	0211      	lsls	r1, r2, #8
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68d2      	ldr	r2, [r2, #12]
 8005fda:	06d2      	lsls	r2, r2, #27
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	492a      	ldr	r1, [pc, #168]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	610b      	str	r3, [r1, #16]
 8005fe4:	e027      	b.n	8006036 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d112      	bne.n	8006012 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fec:	4b26      	ldr	r3, [pc, #152]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ff4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6892      	ldr	r2, [r2, #8]
 8005ffc:	0211      	lsls	r1, r2, #8
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6912      	ldr	r2, [r2, #16]
 8006002:	0852      	lsrs	r2, r2, #1
 8006004:	3a01      	subs	r2, #1
 8006006:	0552      	lsls	r2, r2, #21
 8006008:	430a      	orrs	r2, r1
 800600a:	491f      	ldr	r1, [pc, #124]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 800600c:	4313      	orrs	r3, r2
 800600e:	610b      	str	r3, [r1, #16]
 8006010:	e011      	b.n	8006036 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006012:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800601a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6892      	ldr	r2, [r2, #8]
 8006022:	0211      	lsls	r1, r2, #8
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6952      	ldr	r2, [r2, #20]
 8006028:	0852      	lsrs	r2, r2, #1
 800602a:	3a01      	subs	r2, #1
 800602c:	0652      	lsls	r2, r2, #25
 800602e:	430a      	orrs	r2, r1
 8006030:	4915      	ldr	r1, [pc, #84]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 800603c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006040:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006042:	f7fb fe71 	bl	8001d28 <HAL_GetTick>
 8006046:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006048:	e009      	b.n	800605e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800604a:	f7fb fe6d 	bl	8001d28 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d902      	bls.n	800605e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	73fb      	strb	r3, [r7, #15]
          break;
 800605c:	e005      	b.n	800606a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800605e:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ef      	beq.n	800604a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	4903      	ldr	r1, [pc, #12]	; (8006088 <RCCEx_PLLSAI1_Config+0x1e0>)
 800607a:	4313      	orrs	r3, r2
 800607c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000

0800608c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800609a:	4b69      	ldr	r3, [pc, #420]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060a6:	4b66      	ldr	r3, [pc, #408]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0203 	and.w	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d10d      	bne.n	80060d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
       ||
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80060be:	4b60      	ldr	r3, [pc, #384]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
       ||
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d047      	beq.n	8006162 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e044      	b.n	8006162 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d018      	beq.n	8006112 <RCCEx_PLLSAI2_Config+0x86>
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d825      	bhi.n	8006130 <RCCEx_PLLSAI2_Config+0xa4>
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d002      	beq.n	80060ee <RCCEx_PLLSAI2_Config+0x62>
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d009      	beq.n	8006100 <RCCEx_PLLSAI2_Config+0x74>
 80060ec:	e020      	b.n	8006130 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060ee:	4b54      	ldr	r3, [pc, #336]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11d      	bne.n	8006136 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060fe:	e01a      	b.n	8006136 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006100:	4b4f      	ldr	r3, [pc, #316]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006108:	2b00      	cmp	r3, #0
 800610a:	d116      	bne.n	800613a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006110:	e013      	b.n	800613a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006112:	4b4b      	ldr	r3, [pc, #300]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800611e:	4b48      	ldr	r3, [pc, #288]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800612e:	e006      	b.n	800613e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
      break;
 8006134:	e004      	b.n	8006140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006136:	bf00      	nop
 8006138:	e002      	b.n	8006140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800613e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006146:	4b3e      	ldr	r3, [pc, #248]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	3b01      	subs	r3, #1
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	430b      	orrs	r3, r1
 800615c:	4938      	ldr	r1, [pc, #224]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 800615e:	4313      	orrs	r3, r2
 8006160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d166      	bne.n	8006236 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006168:	4b35      	ldr	r3, [pc, #212]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a34      	ldr	r2, [pc, #208]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006174:	f7fb fdd8 	bl	8001d28 <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800617a:	e009      	b.n	8006190 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800617c:	f7fb fdd4 	bl	8001d28 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d902      	bls.n	8006190 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
        break;
 800618e:	e005      	b.n	800619c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006190:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ef      	bne.n	800617c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d149      	bne.n	8006236 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d110      	bne.n	80061ca <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061a8:	4b25      	ldr	r3, [pc, #148]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6892      	ldr	r2, [r2, #8]
 80061b8:	0211      	lsls	r1, r2, #8
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68d2      	ldr	r2, [r2, #12]
 80061be:	06d2      	lsls	r2, r2, #27
 80061c0:	430a      	orrs	r2, r1
 80061c2:	491f      	ldr	r1, [pc, #124]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	614b      	str	r3, [r1, #20]
 80061c8:	e011      	b.n	80061ee <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	0211      	lsls	r1, r2, #8
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6912      	ldr	r2, [r2, #16]
 80061e0:	0852      	lsrs	r2, r2, #1
 80061e2:	3a01      	subs	r2, #1
 80061e4:	0652      	lsls	r2, r2, #25
 80061e6:	430a      	orrs	r2, r1
 80061e8:	4915      	ldr	r1, [pc, #84]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a13      	ldr	r2, [pc, #76]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fa:	f7fb fd95 	bl	8001d28 <HAL_GetTick>
 80061fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006200:	e009      	b.n	8006216 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006202:	f7fb fd91 	bl	8001d28 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d902      	bls.n	8006216 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	73fb      	strb	r3, [r7, #15]
          break;
 8006214:	e005      	b.n	8006222 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0ef      	beq.n	8006202 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	4903      	ldr	r1, [pc, #12]	; (8006240 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006232:	4313      	orrs	r3, r2
 8006234:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000

08006244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e095      	b.n	8006382 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d108      	bne.n	8006270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d009      	beq.n	800627c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]
 800626e:	e005      	b.n	800627c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fb fab2 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062bc:	d902      	bls.n	80062c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e002      	b.n	80062ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80062d2:	d007      	beq.n	80062e4 <HAL_SPI_Init+0xa0>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	ea42 0103 	orr.w	r1, r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	0c1b      	lsrs	r3, r3, #16
 8006340:	f003 0204 	and.w	r2, r3, #4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006360:	ea42 0103 	orr.w	r1, r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b088      	sub	sp, #32
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_SPI_Transmit+0x22>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e15f      	b.n	800666c <HAL_SPI_Transmit+0x2e2>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b4:	f7fb fcb8 	bl	8001d28 <HAL_GetTick>
 80063b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d002      	beq.n	80063d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
 80063cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ce:	e148      	b.n	8006662 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_Transmit+0x52>
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063e0:	e13f      	b.n	8006662 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2203      	movs	r2, #3
 80063e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d10f      	bne.n	800644e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800644c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d007      	beq.n	800646c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006474:	d94f      	bls.n	8006516 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_SPI_Transmit+0xfa>
 800647e:	8afb      	ldrh	r3, [r7, #22]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d142      	bne.n	800650a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	881a      	ldrh	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064a8:	e02f      	b.n	800650a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d112      	bne.n	80064de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	881a      	ldrh	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064dc:	e015      	b.n	800650a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064de:	f7fb fc23 	bl	8001d28 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d803      	bhi.n	80064f6 <HAL_SPI_Transmit+0x16c>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d102      	bne.n	80064fc <HAL_SPI_Transmit+0x172>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006508:	e0ab      	b.n	8006662 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ca      	bne.n	80064aa <HAL_SPI_Transmit+0x120>
 8006514:	e080      	b.n	8006618 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_Transmit+0x19a>
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d174      	bne.n	800660e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d912      	bls.n	8006554 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b02      	subs	r3, #2
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006552:	e05c      	b.n	800660e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800657a:	e048      	b.n	800660e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b02      	cmp	r3, #2
 8006588:	d12b      	bne.n	80065e2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	d912      	bls.n	80065ba <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	1c9a      	adds	r2, r3, #2
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b02      	subs	r3, #2
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b8:	e029      	b.n	800660e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	7812      	ldrb	r2, [r2, #0]
 80065c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065e0:	e015      	b.n	800660e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e2:	f7fb fba1 	bl	8001d28 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d803      	bhi.n	80065fa <HAL_SPI_Transmit+0x270>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d102      	bne.n	8006600 <HAL_SPI_Transmit+0x276>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800660c:	e029      	b.n	8006662 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1b1      	bne.n	800657c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fb69 	bl	8006cf4 <SPI_EndRxTxTransaction>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e003      	b.n	8006662 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800666a:	7ffb      	ldrb	r3, [r7, #31]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006682:	2301      	movs	r3, #1
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_SPI_TransmitReceive+0x26>
 8006696:	2302      	movs	r3, #2
 8006698:	e20a      	b.n	8006ab0 <HAL_SPI_TransmitReceive+0x43c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066a2:	f7fb fb41 	bl	8001d28 <HAL_GetTick>
 80066a6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066ae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80066ba:	887b      	ldrh	r3, [r7, #2]
 80066bc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066be:	7efb      	ldrb	r3, [r7, #27]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d00e      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x6e>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ca:	d106      	bne.n	80066da <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <HAL_SPI_TransmitReceive+0x66>
 80066d4:	7efb      	ldrb	r3, [r7, #27]
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d003      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80066da:	2302      	movs	r3, #2
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80066e0:	e1e0      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0x80>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0x80>
 80066ee:	887b      	ldrh	r3, [r7, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80066fa:	e1d3      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b04      	cmp	r3, #4
 8006706:	d003      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2205      	movs	r2, #5
 800670c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	887a      	ldrh	r2, [r7, #2]
 8006728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	887a      	ldrh	r2, [r7, #2]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	887a      	ldrh	r2, [r7, #2]
 800673c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006752:	d802      	bhi.n	800675a <HAL_SPI_TransmitReceive+0xe6>
 8006754:	8a3b      	ldrh	r3, [r7, #16]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d908      	bls.n	800676c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	e007      	b.n	800677c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800677a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d007      	beq.n	800679a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067a2:	f240 8081 	bls.w	80068a8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x140>
 80067ae:	8a7b      	ldrh	r3, [r7, #18]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d16d      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	1c9a      	adds	r2, r3, #2
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d8:	e05a      	b.n	8006890 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d11b      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x1ac>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <HAL_SPI_TransmitReceive+0x1ac>
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d113      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	881a      	ldrh	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d11c      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x1f4>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	b292      	uxth	r2, r2
 8006846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	1c9a      	adds	r2, r3, #2
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006864:	2301      	movs	r3, #1
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006868:	f7fb fa5e 	bl	8001d28 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006874:	429a      	cmp	r2, r3
 8006876:	d80b      	bhi.n	8006890 <HAL_SPI_TransmitReceive+0x21c>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d007      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800688e:	e109      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d19f      	bne.n	80067da <HAL_SPI_TransmitReceive+0x166>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d199      	bne.n	80067da <HAL_SPI_TransmitReceive+0x166>
 80068a6:	e0e3      	b.n	8006a70 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_SPI_TransmitReceive+0x244>
 80068b0:	8a7b      	ldrh	r3, [r7, #18]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	f040 80cf 	bne.w	8006a56 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d912      	bls.n	80068e8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	1c9a      	adds	r2, r3, #2
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b02      	subs	r3, #2
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068e6:	e0b6      	b.n	8006a56 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800690e:	e0a2      	b.n	8006a56 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d134      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x314>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d02f      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x314>
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	2b01      	cmp	r3, #1
 800692c:	d12c      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d912      	bls.n	800695e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	881a      	ldrh	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	1c9a      	adds	r2, r3, #2
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b02      	subs	r3, #2
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800695c:	e012      	b.n	8006984 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d148      	bne.n	8006a28 <HAL_SPI_TransmitReceive+0x3b4>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d042      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d923      	bls.n	80069f6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	b292      	uxth	r2, r2
 80069ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b02      	subs	r3, #2
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d81f      	bhi.n	8006a24 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069f2:	605a      	str	r2, [r3, #4]
 80069f4:	e016      	b.n	8006a24 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f103 020c 	add.w	r2, r3, #12
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a24:	2301      	movs	r3, #1
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a28:	f7fb f97e 	bl	8001d28 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d803      	bhi.n	8006a40 <HAL_SPI_TransmitReceive+0x3cc>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	d102      	bne.n	8006a46 <HAL_SPI_TransmitReceive+0x3d2>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006a54:	e026      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f af57 	bne.w	8006910 <HAL_SPI_TransmitReceive+0x29c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f af50 	bne.w	8006910 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f93d 	bl	8006cf4 <SPI_EndRxTxTransaction>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e003      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ac8:	f7fb f92e 	bl	8001d28 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ad8:	f7fb f926 	bl	8001d28 <HAL_GetTick>
 8006adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ade:	4b39      	ldr	r3, [pc, #228]	; (8006bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	015b      	lsls	r3, r3, #5
 8006ae4:	0d1b      	lsrs	r3, r3, #20
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	fb02 f303 	mul.w	r3, r2, r3
 8006aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aee:	e054      	b.n	8006b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d050      	beq.n	8006b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006af8:	f7fb f916 	bl	8001d28 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d902      	bls.n	8006b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d13d      	bne.n	8006b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b26:	d111      	bne.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	d004      	beq.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3a:	d107      	bne.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b54:	d10f      	bne.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e017      	b.n	8006bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	bf0c      	ite	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	2300      	movne	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d19b      	bne.n	8006af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000008 	.word	0x20000008

08006bc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bda:	f7fb f8a5 	bl	8001d28 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	4413      	add	r3, r2
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006bea:	f7fb f89d 	bl	8001d28 <HAL_GetTick>
 8006bee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bf8:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	00da      	lsls	r2, r3, #3
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	0d1b      	lsrs	r3, r3, #20
 8006c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c10:	e060      	b.n	8006cd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c18:	d107      	bne.n	8006c2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d050      	beq.n	8006cd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c32:	f7fb f879 	bl	8001d28 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d902      	bls.n	8006c48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d13d      	bne.n	8006cc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c60:	d111      	bne.n	8006c86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6a:	d004      	beq.n	8006c76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c74:	d107      	bne.n	8006c86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d10f      	bne.n	8006cb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e010      	b.n	8006ce6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d196      	bne.n	8006c12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3728      	adds	r7, #40	; 0x28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000008 	.word	0x20000008

08006cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff ff5b 	bl	8006bc8 <SPI_WaitFifoStateUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d007      	beq.n	8006d28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	f043 0220 	orr.w	r2, r3, #32
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e027      	b.n	8006d78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2180      	movs	r1, #128	; 0x80
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff fec0 	bl	8006ab8 <SPI_WaitFlagStateUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	f043 0220 	orr.w	r2, r3, #32
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e014      	b.n	8006d78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff ff34 	bl	8006bc8 <SPI_WaitFifoStateUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e000      	b.n	8006d78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <Get_ECG>:
#include "stm32l4xx_hal.h"

extern ADC_HandleTypeDef hadc2;
extern uint16_t ECG_VAL;

void Get_ECG(){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc2);
 8006d84:	4809      	ldr	r0, [pc, #36]	; (8006dac <Get_ECG+0x2c>)
 8006d86:	f7fb fb97 	bl	80024b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8006d8a:	210a      	movs	r1, #10
 8006d8c:	4807      	ldr	r0, [pc, #28]	; (8006dac <Get_ECG+0x2c>)
 8006d8e:	f7fb fc81 	bl	8002694 <HAL_ADC_PollForConversion>
	ECG_VAL = HAL_ADC_GetValue(&hadc2);
 8006d92:	4806      	ldr	r0, [pc, #24]	; (8006dac <Get_ECG+0x2c>)
 8006d94:	f7fb fd56 	bl	8002844 <HAL_ADC_GetValue>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <Get_ECG+0x30>)
 8006d9e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8006da0:	4802      	ldr	r0, [pc, #8]	; (8006dac <Get_ECG+0x2c>)
 8006da2:	f7fb fc43 	bl	800262c <HAL_ADC_Stop>

}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20002174 	.word	0x20002174
 8006db0:	20002384 	.word	0x20002384

08006db4 <ADC_Select_CH1>:

extern ADC_HandleTypeDef hadc1;
extern uint16_t EMG_VAL[4];


void ADC_Select_CH1(void){
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8006dba:	463b      	mov	r3, r7
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	611a      	str	r2, [r3, #16]
 8006dc8:	615a      	str	r2, [r3, #20]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8006dca:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <ADC_Select_CH1+0x4c>)
 8006dcc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006dce:	2306      	movs	r3, #6
 8006dd0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006dd6:	237f      	movs	r3, #127	; 0x7f
 8006dd8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006dda:	2304      	movs	r3, #4
 8006ddc:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006de2:	463b      	mov	r3, r7
 8006de4:	4619      	mov	r1, r3
 8006de6:	4807      	ldr	r0, [pc, #28]	; (8006e04 <ADC_Select_CH1+0x50>)
 8006de8:	f7fb fd3a 	bl	8002860 <HAL_ADC_ConfigChannel>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <ADC_Select_CH1+0x42>
	{
		Error_Handler();
 8006df2:	f7fa fb7f 	bl	80014f4 <Error_Handler>
	}
}
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	04300002 	.word	0x04300002
 8006e04:	2000210c 	.word	0x2000210c

08006e08 <ADC_Select_CH2>:

void ADC_Select_CH2(void){
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8006e0e:	463b      	mov	r3, r7
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	609a      	str	r2, [r3, #8]
 8006e18:	60da      	str	r2, [r3, #12]
 8006e1a:	611a      	str	r2, [r3, #16]
 8006e1c:	615a      	str	r2, [r3, #20]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <ADC_Select_CH2+0x3c>)
 8006e20:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e22:	2306      	movs	r3, #6
 8006e24:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e26:	463b      	mov	r3, r7
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4807      	ldr	r0, [pc, #28]	; (8006e48 <ADC_Select_CH2+0x40>)
 8006e2c:	f7fb fd18 	bl	8002860 <HAL_ADC_ConfigChannel>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <ADC_Select_CH2+0x32>
	{
		Error_Handler();
 8006e36:	f7fa fb5d 	bl	80014f4 <Error_Handler>
	}
}
 8006e3a:	bf00      	nop
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	08600004 	.word	0x08600004
 8006e48:	2000210c 	.word	0x2000210c

08006e4c <ADC_Select_CH3>:

void ADC_Select_CH3(void){
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8006e52:	463b      	mov	r3, r7
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	60da      	str	r2, [r3, #12]
 8006e5e:	611a      	str	r2, [r3, #16]
 8006e60:	615a      	str	r2, [r3, #20]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <ADC_Select_CH3+0x3c>)
 8006e64:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e66:	2306      	movs	r3, #6
 8006e68:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4807      	ldr	r0, [pc, #28]	; (8006e8c <ADC_Select_CH3+0x40>)
 8006e70:	f7fb fcf6 	bl	8002860 <HAL_ADC_ConfigChannel>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <ADC_Select_CH3+0x32>
	{
		Error_Handler();
 8006e7a:	f7fa fb3b 	bl	80014f4 <Error_Handler>
	}

}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	0c900008 	.word	0x0c900008
 8006e8c:	2000210c 	.word	0x2000210c

08006e90 <ADC_Select_CH4>:

void ADC_Select_CH4(void){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8006e96:	463b      	mov	r3, r7
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	609a      	str	r2, [r3, #8]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	611a      	str	r2, [r3, #16]
 8006ea4:	615a      	str	r2, [r3, #20]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <ADC_Select_CH4+0x3c>)
 8006ea8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006eaa:	2306      	movs	r3, #6
 8006eac:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006eae:	463b      	mov	r3, r7
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4807      	ldr	r0, [pc, #28]	; (8006ed0 <ADC_Select_CH4+0x40>)
 8006eb4:	f7fb fcd4 	bl	8002860 <HAL_ADC_ConfigChannel>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <ADC_Select_CH4+0x32>
	{
		Error_Handler();
 8006ebe:	f7fa fb19 	bl	80014f4 <Error_Handler>
	}

}
 8006ec2:	bf00      	nop
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	10c00010 	.word	0x10c00010
 8006ed0:	2000210c 	.word	0x2000210c

08006ed4 <Get_EMG>:

void Get_EMG(){
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0

	ADC_Select_CH1();
 8006ed8:	f7ff ff6c 	bl	8006db4 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8006edc:	4825      	ldr	r0, [pc, #148]	; (8006f74 <Get_EMG+0xa0>)
 8006ede:	f7fb faeb 	bl	80024b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8006ee2:	210a      	movs	r1, #10
 8006ee4:	4823      	ldr	r0, [pc, #140]	; (8006f74 <Get_EMG+0xa0>)
 8006ee6:	f7fb fbd5 	bl	8002694 <HAL_ADC_PollForConversion>
	EMG_VAL[0]=HAL_ADC_GetValue(&hadc1);
 8006eea:	4822      	ldr	r0, [pc, #136]	; (8006f74 <Get_EMG+0xa0>)
 8006eec:	f7fb fcaa 	bl	8002844 <HAL_ADC_GetValue>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	4b20      	ldr	r3, [pc, #128]	; (8006f78 <Get_EMG+0xa4>)
 8006ef6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8006ef8:	481e      	ldr	r0, [pc, #120]	; (8006f74 <Get_EMG+0xa0>)
 8006efa:	f7fb fb97 	bl	800262c <HAL_ADC_Stop>

	ADC_Select_CH2();
 8006efe:	f7ff ff83 	bl	8006e08 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 8006f02:	481c      	ldr	r0, [pc, #112]	; (8006f74 <Get_EMG+0xa0>)
 8006f04:	f7fb fad8 	bl	80024b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8006f08:	210a      	movs	r1, #10
 8006f0a:	481a      	ldr	r0, [pc, #104]	; (8006f74 <Get_EMG+0xa0>)
 8006f0c:	f7fb fbc2 	bl	8002694 <HAL_ADC_PollForConversion>
	EMG_VAL[1]=HAL_ADC_GetValue(&hadc1);
 8006f10:	4818      	ldr	r0, [pc, #96]	; (8006f74 <Get_EMG+0xa0>)
 8006f12:	f7fb fc97 	bl	8002844 <HAL_ADC_GetValue>
 8006f16:	4603      	mov	r3, r0
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <Get_EMG+0xa4>)
 8006f1c:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8006f1e:	4815      	ldr	r0, [pc, #84]	; (8006f74 <Get_EMG+0xa0>)
 8006f20:	f7fb fb84 	bl	800262c <HAL_ADC_Stop>

	ADC_Select_CH3();
 8006f24:	f7ff ff92 	bl	8006e4c <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8006f28:	4812      	ldr	r0, [pc, #72]	; (8006f74 <Get_EMG+0xa0>)
 8006f2a:	f7fb fac5 	bl	80024b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8006f2e:	210a      	movs	r1, #10
 8006f30:	4810      	ldr	r0, [pc, #64]	; (8006f74 <Get_EMG+0xa0>)
 8006f32:	f7fb fbaf 	bl	8002694 <HAL_ADC_PollForConversion>
	EMG_VAL[2]=HAL_ADC_GetValue(&hadc1);
 8006f36:	480f      	ldr	r0, [pc, #60]	; (8006f74 <Get_EMG+0xa0>)
 8006f38:	f7fb fc84 	bl	8002844 <HAL_ADC_GetValue>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <Get_EMG+0xa4>)
 8006f42:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8006f44:	480b      	ldr	r0, [pc, #44]	; (8006f74 <Get_EMG+0xa0>)
 8006f46:	f7fb fb71 	bl	800262c <HAL_ADC_Stop>

	ADC_Select_CH4();
 8006f4a:	f7ff ffa1 	bl	8006e90 <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8006f4e:	4809      	ldr	r0, [pc, #36]	; (8006f74 <Get_EMG+0xa0>)
 8006f50:	f7fb fab2 	bl	80024b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8006f54:	210a      	movs	r1, #10
 8006f56:	4807      	ldr	r0, [pc, #28]	; (8006f74 <Get_EMG+0xa0>)
 8006f58:	f7fb fb9c 	bl	8002694 <HAL_ADC_PollForConversion>
	EMG_VAL[3]=HAL_ADC_GetValue(&hadc1);
 8006f5c:	4805      	ldr	r0, [pc, #20]	; (8006f74 <Get_EMG+0xa0>)
 8006f5e:	f7fb fc71 	bl	8002844 <HAL_ADC_GetValue>
 8006f62:	4603      	mov	r3, r0
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <Get_EMG+0xa4>)
 8006f68:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8006f6a:	4802      	ldr	r0, [pc, #8]	; (8006f74 <Get_EMG+0xa0>)
 8006f6c:	f7fb fb5e 	bl	800262c <HAL_ADC_Stop>
}
 8006f70:	bf00      	nop
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	2000210c 	.word	0x2000210c
 8006f78:	20002388 	.word	0x20002388

08006f7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006f80:	4904      	ldr	r1, [pc, #16]	; (8006f94 <MX_FATFS_Init+0x18>)
 8006f82:	4805      	ldr	r0, [pc, #20]	; (8006f98 <MX_FATFS_Init+0x1c>)
 8006f84:	f003 fdf2 	bl	800ab6c <FATFS_LinkDriver>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <MX_FATFS_Init+0x20>)
 8006f8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f90:	bf00      	nop
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	200023f4 	.word	0x200023f4
 8006f98:	20000014 	.word	0x20000014
 8006f9c:	200023f0 	.word	0x200023f0

08006fa0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fa4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f004 f85f 	bl	800b080 <SD_disk_initialize>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f004 f936 	bl	800b24c <SD_disk_status>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006ffc:	7bf8      	ldrb	r0, [r7, #15]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	f004 f938 	bl	800b278 <SD_disk_read>
 8007008:	4603      	mov	r3, r0
 800700a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8007024:	7bf8      	ldrb	r0, [r7, #15]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	f004 f98e 	bl	800b34c <SD_disk_write>
 8007030:	4603      	mov	r3, r0
 8007032:	b2db      	uxtb	r3, r3

  /* USER CODE END WRITE */
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	603a      	str	r2, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
 8007048:	460b      	mov	r3, r1
 800704a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	79b9      	ldrb	r1, [r7, #6]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f004 f9fe 	bl	800b454 <SD_disk_ioctl>
 8007058:	4603      	mov	r3, r0
 800705a:	b2db      	uxtb	r3, r3

  /* USER CODE END IOCTL */
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8007070:	2300      	movs	r3, #0
 8007072:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8007074:	e015      	b.n	80070a2 <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b29a      	uxth	r2, r3
 8007080:	89fb      	ldrh	r3, [r7, #14]
 8007082:	4053      	eors	r3, r2
 8007084:	b29b      	uxth	r3, r3
 8007086:	b2db      	uxtb	r3, r3
 8007088:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 800708a:	89bb      	ldrh	r3, [r7, #12]
 800708c:	4a0b      	ldr	r2, [pc, #44]	; (80070bc <CRC8_Calc+0x58>)
 800708e:	5cd3      	ldrb	r3, [r2, r3]
 8007090:	b21a      	sxth	r2, r3
 8007092:	89fb      	ldrh	r3, [r7, #14]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	b21b      	sxth	r3, r3
 8007098:	4053      	eors	r3, r2
 800709a:	b21b      	sxth	r3, r3
 800709c:	b29b      	uxth	r3, r3
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	1e5a      	subs	r2, r3, #1
 80070a6:	70fa      	strb	r2, [r7, #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e4      	bne.n	8007076 <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	b2db      	uxtb	r3, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	0800e264 	.word	0x0800e264

080070c0 <MLX90614_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}

uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 80070c0:	b590      	push	{r4, r7, lr}
 80070c2:	b08f      	sub	sp, #60	; 0x3c
 80070c4:	af04      	add	r7, sp, #16
 80070c6:	4603      	mov	r3, r0
 80070c8:	71fb      	strb	r3, [r7, #7]
 80070ca:	460b      	mov	r3, r1
 80070cc:	71bb      	strb	r3, [r7, #6]
 80070ce:	4613      	mov	r3, r2
 80070d0:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;
	uint8_t in_buff_1[3], crc_buff_1[5], crc_1;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	b299      	uxth	r1, r3
 80070da:	79bb      	ldrb	r3, [r7, #6]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	2364      	movs	r3, #100	; 0x64
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	2303      	movs	r3, #3
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	f107 0320 	add.w	r3, r7, #32
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2301      	movs	r3, #1
 80070ee:	4823      	ldr	r0, [pc, #140]	; (800717c <MLX90614_ReadReg+0xbc>)
 80070f0:	f7fd f888 	bl	8004204 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	763b      	strb	r3, [r7, #24]
	crc_buff[1] = regAddr;
 80070fc:	79bb      	ldrb	r3, [r7, #6]
 80070fe:	767b      	strb	r3, [r7, #25]
	crc_buff[2] = (devAddr<<1) + 1;
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	3301      	adds	r3, #1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	76bb      	strb	r3, [r7, #26]
	crc_buff[3] = in_buff[0];
 800710c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007110:	76fb      	strb	r3, [r7, #27]
	crc_buff[4] = in_buff[1];
 8007112:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007116:	773b      	strb	r3, [r7, #28]
	crc = CRC8_Calc(crc_buff, 5);
 8007118:	f107 0318 	add.w	r3, r7, #24
 800711c:	2105      	movs	r1, #5
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ffa0 	bl	8007064 <CRC8_Calc>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	data = (in_buff[1] <<8 | in_buff[0]);
 800712a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	b21a      	sxth	r2, r3
 8007132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007136:	b21b      	sxth	r3, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	b21b      	sxth	r3, r3
 800713c:	84fb      	strh	r3, [r7, #38]	; 0x26

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 800713e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007142:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007146:	429a      	cmp	r2, r3
 8007148:	d001      	beq.n	800714e <MLX90614_ReadReg+0x8e>
		data = 0x0000;
 800714a:	2300      	movs	r3, #0
 800714c:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 800714e:	797b      	ldrb	r3, [r7, #5]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10d      	bne.n	8007170 <MLX90614_ReadReg+0xb0>
 8007154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007158:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800715a:	79b8      	ldrb	r0, [r7, #6]
 800715c:	79f9      	ldrb	r1, [r7, #7]
 800715e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007162:	9201      	str	r2, [sp, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4623      	mov	r3, r4
 8007168:	4602      	mov	r2, r0
 800716a:	2001      	movs	r0, #1
 800716c:	f000 f844 	bl	80071f8 <MLX90614_SendDebugMsg>

	//HAL_Delay(1);
	return data;
 8007170:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007172:	4618      	mov	r0, r3
 8007174:	372c      	adds	r7, #44	; 0x2c
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
 800717a:	bf00      	nop
 800717c:	20002244 	.word	0x20002244

08007180 <MLX90614_ReadTemp>:
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	460a      	mov	r2, r1
 800718a:	71fb      	strb	r3, [r7, #7]
 800718c:	4613      	mov	r3, r2
 800718e:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF);
 8007190:	79b9      	ldrb	r1, [r7, #6]
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2200      	movs	r2, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff ff92 	bl	80070c0 <MLX90614_ReadReg>
 800719c:	4603      	mov	r3, r0
 800719e:	81fb      	strh	r3, [r7, #14]
	temp = data*0.02 - 273.15;
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7f9 f9c6 	bl	8000534 <__aeabi_i2d>
 80071a8:	a30f      	add	r3, pc, #60	; (adr r3, 80071e8 <MLX90614_ReadTemp+0x68>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fa2b 	bl	8000608 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	a30d      	add	r3, pc, #52	; (adr r3, 80071f0 <MLX90614_ReadTemp+0x70>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f86a 	bl	8000298 <__aeabi_dsub>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4610      	mov	r0, r2
 80071ca:	4619      	mov	r1, r3
 80071cc:	f7f9 fcde 	bl	8000b8c <__aeabi_d2f>
 80071d0:	4603      	mov	r3, r0
 80071d2:	60bb      	str	r3, [r7, #8]

	return temp;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	ee07 3a90 	vmov	s15, r3
}
 80071da:	eeb0 0a67 	vmov.f32	s0, s15
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	f3af 8000 	nop.w
 80071e8:	47ae147b 	.word	0x47ae147b
 80071ec:	3f947ae1 	.word	0x3f947ae1
 80071f0:	66666666 	.word	0x66666666
 80071f4:	40711266 	.word	0x40711266

080071f8 <MLX90614_SendDebugMsg>:
				 // CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));

			  }
		  }
}
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc) {
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	4604      	mov	r4, r0
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4623      	mov	r3, r4
 8007208:	71fb      	strb	r3, [r7, #7]
 800720a:	4603      	mov	r3, r0
 800720c:	71bb      	strb	r3, [r7, #6]
 800720e:	460b      	mov	r3, r1
 8007210:	717b      	strb	r3, [r7, #5]
 8007212:	4613      	mov	r3, r2
 8007214:	807b      	strh	r3, [r7, #2]
	if(op_type == MLX90614_DBG_MSG_W) {
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <MLX90614_SendDebugMsg+0x40>
		snprintf(temp_buff, sizeof(temp_buff), "W Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_calc);
 800721c:	79b8      	ldrb	r0, [r7, #6]
 800721e:	797b      	ldrb	r3, [r7, #5]
 8007220:	887a      	ldrh	r2, [r7, #2]
 8007222:	7f39      	ldrb	r1, [r7, #28]
 8007224:	9102      	str	r1, [sp, #8]
 8007226:	9201      	str	r2, [sp, #4]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4603      	mov	r3, r0
 800722c:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <MLX90614_SendDebugMsg+0x6c>)
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	480d      	ldr	r0, [pc, #52]	; (8007268 <MLX90614_SendDebugMsg+0x70>)
 8007232:	f004 fb0f 	bl	800b854 <sniprintf>
	else if (op_type == MLX90614_DBG_MSG_R) {
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
		//CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
	}

}
 8007236:	e011      	b.n	800725c <MLX90614_SendDebugMsg+0x64>
	else if (op_type == MLX90614_DBG_MSG_R) {
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10e      	bne.n	800725c <MLX90614_SendDebugMsg+0x64>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
 800723e:	79bc      	ldrb	r4, [r7, #6]
 8007240:	797b      	ldrb	r3, [r7, #5]
 8007242:	887a      	ldrh	r2, [r7, #2]
 8007244:	7e39      	ldrb	r1, [r7, #24]
 8007246:	7f38      	ldrb	r0, [r7, #28]
 8007248:	9003      	str	r0, [sp, #12]
 800724a:	9102      	str	r1, [sp, #8]
 800724c:	9201      	str	r2, [sp, #4]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4623      	mov	r3, r4
 8007252:	4a06      	ldr	r2, [pc, #24]	; (800726c <MLX90614_SendDebugMsg+0x74>)
 8007254:	2180      	movs	r1, #128	; 0x80
 8007256:	4804      	ldr	r0, [pc, #16]	; (8007268 <MLX90614_SendDebugMsg+0x70>)
 8007258:	f004 fafc 	bl	800b854 <sniprintf>
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bd90      	pop	{r4, r7, pc}
 8007264:	0800e14c 	.word	0x0800e14c
 8007268:	200023f8 	.word	0x200023f8
 800726c:	0800e18c 	.word	0x0800e18c

08007270 <MPU6050_Init>:
extern int16_t Gyro_Y_RAW;
extern int16_t Gyro_Z_RAW;
extern float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8007276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	2301      	movs	r3, #1
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2301      	movs	r3, #1
 8007286:	2275      	movs	r2, #117	; 0x75
 8007288:	21d0      	movs	r1, #208	; 0xd0
 800728a:	4823      	ldr	r0, [pc, #140]	; (8007318 <MPU6050_Init+0xa8>)
 800728c:	f7fc ffba 	bl	8004204 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b68      	cmp	r3, #104	; 0x68
 8007294:	d13b      	bne.n	800730e <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800729a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800729e:	9302      	str	r3, [sp, #8]
 80072a0:	2301      	movs	r3, #1
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	1dbb      	adds	r3, r7, #6
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	226b      	movs	r2, #107	; 0x6b
 80072ac:	21d0      	movs	r1, #208	; 0xd0
 80072ae:	481a      	ldr	r0, [pc, #104]	; (8007318 <MPU6050_Init+0xa8>)
 80072b0:	f7fc fe94 	bl	8003fdc <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80072b4:	2307      	movs	r3, #7
 80072b6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80072b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	2301      	movs	r3, #1
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	1dbb      	adds	r3, r7, #6
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	2301      	movs	r3, #1
 80072c8:	2219      	movs	r2, #25
 80072ca:	21d0      	movs	r1, #208	; 0xd0
 80072cc:	4812      	ldr	r0, [pc, #72]	; (8007318 <MPU6050_Init+0xa8>)
 80072ce:	f7fc fe85 	bl	8003fdc <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80072d2:	2300      	movs	r3, #0
 80072d4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80072d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072da:	9302      	str	r3, [sp, #8]
 80072dc:	2301      	movs	r3, #1
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	1dbb      	adds	r3, r7, #6
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2301      	movs	r3, #1
 80072e6:	221c      	movs	r2, #28
 80072e8:	21d0      	movs	r1, #208	; 0xd0
 80072ea:	480b      	ldr	r0, [pc, #44]	; (8007318 <MPU6050_Init+0xa8>)
 80072ec:	f7fc fe76 	bl	8003fdc <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80072f0:	2300      	movs	r3, #0
 80072f2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80072f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072f8:	9302      	str	r3, [sp, #8]
 80072fa:	2301      	movs	r3, #1
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	1dbb      	adds	r3, r7, #6
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	2301      	movs	r3, #1
 8007304:	221b      	movs	r2, #27
 8007306:	21d0      	movs	r1, #208	; 0xd0
 8007308:	4803      	ldr	r0, [pc, #12]	; (8007318 <MPU6050_Init+0xa8>)
 800730a:	f7fc fe67 	bl	8003fdc <HAL_I2C_Mem_Write>
	}
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20002244 	.word	0x20002244

0800731c <MPU6050_Read_Accel>:
	void MPU6050_Read_Accel (void)
	{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af04      	add	r7, sp, #16
		uint8_t Rec_Data[6];

		// Read 6 BYTES of data starting from ACCEL_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8007322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007326:	9302      	str	r3, [sp, #8]
 8007328:	2306      	movs	r3, #6
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	463b      	mov	r3, r7
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2301      	movs	r3, #1
 8007332:	223b      	movs	r2, #59	; 0x3b
 8007334:	21d0      	movs	r1, #208	; 0xd0
 8007336:	482f      	ldr	r0, [pc, #188]	; (80073f4 <MPU6050_Read_Accel+0xd8>)
 8007338:	f7fc ff64 	bl	8004204 <HAL_I2C_Mem_Read>

		Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800733c:	783b      	ldrb	r3, [r7, #0]
 800733e:	021b      	lsls	r3, r3, #8
 8007340:	b21a      	sxth	r2, r3
 8007342:	787b      	ldrb	r3, [r7, #1]
 8007344:	b21b      	sxth	r3, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	b21a      	sxth	r2, r3
 800734a:	4b2b      	ldr	r3, [pc, #172]	; (80073f8 <MPU6050_Read_Accel+0xdc>)
 800734c:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800734e:	78bb      	ldrb	r3, [r7, #2]
 8007350:	021b      	lsls	r3, r3, #8
 8007352:	b21a      	sxth	r2, r3
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	b21b      	sxth	r3, r3
 8007358:	4313      	orrs	r3, r2
 800735a:	b21a      	sxth	r2, r3
 800735c:	4b27      	ldr	r3, [pc, #156]	; (80073fc <MPU6050_Read_Accel+0xe0>)
 800735e:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8007360:	793b      	ldrb	r3, [r7, #4]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	b21a      	sxth	r2, r3
 8007366:	797b      	ldrb	r3, [r7, #5]
 8007368:	b21b      	sxth	r3, r3
 800736a:	4313      	orrs	r3, r2
 800736c:	b21a      	sxth	r2, r3
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <MPU6050_Read_Accel+0xe4>)
 8007370:	801a      	strh	r2, [r3, #0]
		/*** convert the RAW values into acceleration in 'g'
		     we have to divide according to the Full scale value set in FS_SEL
		     I have configured FS_SEL = 0. So I am dividing by 16384.0
		     for more details check ACCEL_CONFIG Register              ****/

		Ax = Accel_X_RAW/16384.0;
 8007372:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <MPU6050_Read_Accel+0xdc>)
 8007374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007378:	4618      	mov	r0, r3
 800737a:	f7f9 f8db 	bl	8000534 <__aeabi_i2d>
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	4b20      	ldr	r3, [pc, #128]	; (8007404 <MPU6050_Read_Accel+0xe8>)
 8007384:	f7f9 fa6a 	bl	800085c <__aeabi_ddiv>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4610      	mov	r0, r2
 800738e:	4619      	mov	r1, r3
 8007390:	f7f9 fbfc 	bl	8000b8c <__aeabi_d2f>
 8007394:	4603      	mov	r3, r0
 8007396:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <MPU6050_Read_Accel+0xec>)
 8007398:	6013      	str	r3, [r2, #0]
		Ay = Accel_Y_RAW/16384.0;
 800739a:	4b18      	ldr	r3, [pc, #96]	; (80073fc <MPU6050_Read_Accel+0xe0>)
 800739c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7f9 f8c7 	bl	8000534 <__aeabi_i2d>
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <MPU6050_Read_Accel+0xe8>)
 80073ac:	f7f9 fa56 	bl	800085c <__aeabi_ddiv>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4610      	mov	r0, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	f7f9 fbe8 	bl	8000b8c <__aeabi_d2f>
 80073bc:	4603      	mov	r3, r0
 80073be:	4a13      	ldr	r2, [pc, #76]	; (800740c <MPU6050_Read_Accel+0xf0>)
 80073c0:	6013      	str	r3, [r2, #0]
		Az = Accel_Z_RAW/16384.0;
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <MPU6050_Read_Accel+0xe4>)
 80073c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7f9 f8b3 	bl	8000534 <__aeabi_i2d>
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <MPU6050_Read_Accel+0xe8>)
 80073d4:	f7f9 fa42 	bl	800085c <__aeabi_ddiv>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	f7f9 fbd4 	bl	8000b8c <__aeabi_d2f>
 80073e4:	4603      	mov	r3, r0
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <MPU6050_Read_Accel+0xf4>)
 80073e8:	6013      	str	r3, [r2, #0]
	}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20002244 	.word	0x20002244
 80073f8:	2000235e 	.word	0x2000235e
 80073fc:	20002360 	.word	0x20002360
 8007400:	20002362 	.word	0x20002362
 8007404:	40d00000 	.word	0x40d00000
 8007408:	2000236c 	.word	0x2000236c
 800740c:	20002370 	.word	0x20002370
 8007410:	20002374 	.word	0x20002374
 8007414:	00000000 	.word	0x00000000

08007418 <MPU6050_Read_Gyro>:


	void MPU6050_Read_Gyro (void)
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af04      	add	r7, sp, #16
		uint8_t Rec_Data[6];

		// Read 6 BYTES of data starting from GYRO_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800741e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007422:	9302      	str	r3, [sp, #8]
 8007424:	2306      	movs	r3, #6
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	463b      	mov	r3, r7
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	2301      	movs	r3, #1
 800742e:	2243      	movs	r2, #67	; 0x43
 8007430:	21d0      	movs	r1, #208	; 0xd0
 8007432:	4831      	ldr	r0, [pc, #196]	; (80074f8 <MPU6050_Read_Gyro+0xe0>)
 8007434:	f7fc fee6 	bl	8004204 <HAL_I2C_Mem_Read>

		Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8007438:	783b      	ldrb	r3, [r7, #0]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b21a      	sxth	r2, r3
 800743e:	787b      	ldrb	r3, [r7, #1]
 8007440:	b21b      	sxth	r3, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	b21a      	sxth	r2, r3
 8007446:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <MPU6050_Read_Gyro+0xe4>)
 8007448:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800744a:	78bb      	ldrb	r3, [r7, #2]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	b21a      	sxth	r2, r3
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b21b      	sxth	r3, r3
 8007454:	4313      	orrs	r3, r2
 8007456:	b21a      	sxth	r2, r3
 8007458:	4b29      	ldr	r3, [pc, #164]	; (8007500 <MPU6050_Read_Gyro+0xe8>)
 800745a:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800745c:	793b      	ldrb	r3, [r7, #4]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	b21a      	sxth	r2, r3
 8007462:	797b      	ldrb	r3, [r7, #5]
 8007464:	b21b      	sxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b21a      	sxth	r2, r3
 800746a:	4b26      	ldr	r3, [pc, #152]	; (8007504 <MPU6050_Read_Gyro+0xec>)
 800746c:	801a      	strh	r2, [r3, #0]
		/*** convert the RAW values into dps (�/s)
		     we have to divide according to the Full scale value set in FS_SEL
		     I have configured FS_SEL = 0. So I am dividing by 131.0
		     for more details check GYRO_CONFIG Register              ****/

		Gx = Gyro_X_RAW/131.0;
 800746e:	4b23      	ldr	r3, [pc, #140]	; (80074fc <MPU6050_Read_Gyro+0xe4>)
 8007470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007474:	4618      	mov	r0, r3
 8007476:	f7f9 f85d 	bl	8000534 <__aeabi_i2d>
 800747a:	a31d      	add	r3, pc, #116	; (adr r3, 80074f0 <MPU6050_Read_Gyro+0xd8>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f9 f9ec 	bl	800085c <__aeabi_ddiv>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4610      	mov	r0, r2
 800748a:	4619      	mov	r1, r3
 800748c:	f7f9 fb7e 	bl	8000b8c <__aeabi_d2f>
 8007490:	4603      	mov	r3, r0
 8007492:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <MPU6050_Read_Gyro+0xf0>)
 8007494:	6013      	str	r3, [r2, #0]
		Gy = Gyro_Y_RAW/131.0;
 8007496:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <MPU6050_Read_Gyro+0xe8>)
 8007498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800749c:	4618      	mov	r0, r3
 800749e:	f7f9 f849 	bl	8000534 <__aeabi_i2d>
 80074a2:	a313      	add	r3, pc, #76	; (adr r3, 80074f0 <MPU6050_Read_Gyro+0xd8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f9d8 	bl	800085c <__aeabi_ddiv>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4610      	mov	r0, r2
 80074b2:	4619      	mov	r1, r3
 80074b4:	f7f9 fb6a 	bl	8000b8c <__aeabi_d2f>
 80074b8:	4603      	mov	r3, r0
 80074ba:	4a14      	ldr	r2, [pc, #80]	; (800750c <MPU6050_Read_Gyro+0xf4>)
 80074bc:	6013      	str	r3, [r2, #0]
		Gz = Gyro_Z_RAW/131.0;
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <MPU6050_Read_Gyro+0xec>)
 80074c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 f835 	bl	8000534 <__aeabi_i2d>
 80074ca:	a309      	add	r3, pc, #36	; (adr r3, 80074f0 <MPU6050_Read_Gyro+0xd8>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 f9c4 	bl	800085c <__aeabi_ddiv>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4610      	mov	r0, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	f7f9 fb56 	bl	8000b8c <__aeabi_d2f>
 80074e0:	4603      	mov	r3, r0
 80074e2:	4a0b      	ldr	r2, [pc, #44]	; (8007510 <MPU6050_Read_Gyro+0xf8>)
 80074e4:	6013      	str	r3, [r2, #0]
	}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	00000000 	.word	0x00000000
 80074f4:	40606000 	.word	0x40606000
 80074f8:	20002244 	.word	0x20002244
 80074fc:	20002364 	.word	0x20002364
 8007500:	20002366 	.word	0x20002366
 8007504:	20002368 	.word	0x20002368
 8007508:	20002378 	.word	0x20002378
 800750c:	2000237c 	.word	0x2000237c
 8007510:	20002380 	.word	0x20002380

08007514 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	4a08      	ldr	r2, [pc, #32]	; (8007544 <disk_status+0x30>)
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	79fa      	ldrb	r2, [r7, #7]
 800752c:	4905      	ldr	r1, [pc, #20]	; (8007544 <disk_status+0x30>)
 800752e:	440a      	add	r2, r1
 8007530:	7a12      	ldrb	r2, [r2, #8]
 8007532:	4610      	mov	r0, r2
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
  return stat;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	200026a0 	.word	0x200026a0

08007548 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <disk_initialize+0x48>)
 800755a:	5cd3      	ldrb	r3, [r2, r3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d111      	bne.n	8007584 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	4a0b      	ldr	r2, [pc, #44]	; (8007590 <disk_initialize+0x48>)
 8007564:	2101      	movs	r1, #1
 8007566:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	4a09      	ldr	r2, [pc, #36]	; (8007590 <disk_initialize+0x48>)
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	79fa      	ldrb	r2, [r7, #7]
 8007576:	4906      	ldr	r1, [pc, #24]	; (8007590 <disk_initialize+0x48>)
 8007578:	440a      	add	r2, r1
 800757a:	7a12      	ldrb	r2, [r2, #8]
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	200026a0 	.word	0x200026a0

08007594 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <disk_read+0x3c>)
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	689c      	ldr	r4, [r3, #8]
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <disk_read+0x3c>)
 80075b4:	4413      	add	r3, r2
 80075b6:	7a18      	ldrb	r0, [r3, #8]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	47a0      	blx	r4
 80075c0:	4603      	mov	r3, r0
 80075c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200026a0 	.word	0x200026a0

080075d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <disk_write+0x3c>)
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68dc      	ldr	r4, [r3, #12]
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	4a07      	ldr	r2, [pc, #28]	; (8007610 <disk_write+0x3c>)
 80075f4:	4413      	add	r3, r2
 80075f6:	7a18      	ldrb	r0, [r3, #8]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	47a0      	blx	r4
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]
  return res;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}
 800760e:	bf00      	nop
 8007610:	200026a0 	.word	0x200026a0

08007614 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	603a      	str	r2, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	460b      	mov	r3, r1
 8007622:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <disk_ioctl+0x38>)
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	79fa      	ldrb	r2, [r7, #7]
 8007632:	4906      	ldr	r1, [pc, #24]	; (800764c <disk_ioctl+0x38>)
 8007634:	440a      	add	r2, r1
 8007636:	7a10      	ldrb	r0, [r2, #8]
 8007638:	79b9      	ldrb	r1, [r7, #6]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4798      	blx	r3
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]
  return res;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	200026a0 	.word	0x200026a0

08007650 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007660:	89fb      	ldrh	r3, [r7, #14]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b21a      	sxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b21b      	sxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b21b      	sxth	r3, r3
 8007670:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007672:	89fb      	ldrh	r3, [r7, #14]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	3202      	adds	r2, #2
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	3201      	adds	r2, #1
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	887a      	ldrh	r2, [r7, #2]
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	887b      	ldrh	r3, [r7, #2]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	1c53      	adds	r3, r2, #1
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1c59      	adds	r1, r3, #1
 8007778:	6179      	str	r1, [r7, #20]
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3b01      	subs	r3, #1
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f1      	bne.n	800776e <mem_cpy+0x1a>
	}
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	617a      	str	r2, [r7, #20]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f3      	bne.n	80077a6 <mem_set+0x10>
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077cc:	b480      	push	{r7}
 80077ce:	b089      	sub	sp, #36	; 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	61fa      	str	r2, [r7, #28]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	4619      	mov	r1, r3
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	61ba      	str	r2, [r7, #24]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	1acb      	subs	r3, r1, r3
 80077f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	607b      	str	r3, [r7, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <mem_cmp+0x40>
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0eb      	beq.n	80077e4 <mem_cmp+0x18>

	return r;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3724      	adds	r7, #36	; 0x24
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007824:	e002      	b.n	800782c <chk_chr+0x12>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3301      	adds	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <chk_chr+0x26>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	4293      	cmp	r3, r2
 800783e:	d1f2      	bne.n	8007826 <chk_chr+0xc>
	return *str;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781b      	ldrb	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	e029      	b.n	80078b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007864:	4a27      	ldr	r2, [pc, #156]	; (8007904 <chk_lock+0xb4>)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	4413      	add	r3, r2
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01d      	beq.n	80078ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007872:	4a24      	ldr	r2, [pc, #144]	; (8007904 <chk_lock+0xb4>)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	4413      	add	r3, r2
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d116      	bne.n	80078b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007884:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <chk_lock+0xb4>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4413      	add	r3, r2
 800788c:	3304      	adds	r3, #4
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007894:	429a      	cmp	r2, r3
 8007896:	d10c      	bne.n	80078b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007898:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <chk_lock+0xb4>)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	4413      	add	r3, r2
 80078a0:	3308      	adds	r3, #8
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d102      	bne.n	80078b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078ac:	e007      	b.n	80078be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d9d2      	bls.n	8007864 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d109      	bne.n	80078d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <chk_lock+0x80>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d101      	bne.n	80078d4 <chk_lock+0x84>
 80078d0:	2300      	movs	r3, #0
 80078d2:	e010      	b.n	80078f6 <chk_lock+0xa6>
 80078d4:	2312      	movs	r3, #18
 80078d6:	e00e      	b.n	80078f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d108      	bne.n	80078f0 <chk_lock+0xa0>
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <chk_lock+0xb4>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	330c      	adds	r3, #12
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ee:	d101      	bne.n	80078f4 <chk_lock+0xa4>
 80078f0:	2310      	movs	r3, #16
 80078f2:	e000      	b.n	80078f6 <chk_lock+0xa6>
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20002480 	.word	0x20002480

08007908 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	e002      	b.n	800791a <enq_lock+0x12>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3301      	adds	r3, #1
 8007918:	607b      	str	r3, [r7, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d806      	bhi.n	800792e <enq_lock+0x26>
 8007920:	4a09      	ldr	r2, [pc, #36]	; (8007948 <enq_lock+0x40>)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	4413      	add	r3, r2
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f2      	bne.n	8007914 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b02      	cmp	r3, #2
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20002480 	.word	0x20002480

0800794c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	e01f      	b.n	800799c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800795c:	4a41      	ldr	r2, [pc, #260]	; (8007a64 <inc_lock+0x118>)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	4413      	add	r3, r2
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d113      	bne.n	8007996 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800796e:	4a3d      	ldr	r2, [pc, #244]	; (8007a64 <inc_lock+0x118>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	4413      	add	r3, r2
 8007976:	3304      	adds	r3, #4
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800797e:	429a      	cmp	r2, r3
 8007980:	d109      	bne.n	8007996 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007982:	4a38      	ldr	r2, [pc, #224]	; (8007a64 <inc_lock+0x118>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4413      	add	r3, r2
 800798a:	3308      	adds	r3, #8
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007992:	429a      	cmp	r2, r3
 8007994:	d006      	beq.n	80079a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d9dc      	bls.n	800795c <inc_lock+0x10>
 80079a2:	e000      	b.n	80079a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d132      	bne.n	8007a12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e002      	b.n	80079b8 <inc_lock+0x6c>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d806      	bhi.n	80079cc <inc_lock+0x80>
 80079be:	4a29      	ldr	r2, [pc, #164]	; (8007a64 <inc_lock+0x118>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	4413      	add	r3, r2
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f2      	bne.n	80079b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d101      	bne.n	80079d6 <inc_lock+0x8a>
 80079d2:	2300      	movs	r3, #0
 80079d4:	e040      	b.n	8007a58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4922      	ldr	r1, [pc, #136]	; (8007a64 <inc_lock+0x118>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	440b      	add	r3, r1
 80079e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	491e      	ldr	r1, [pc, #120]	; (8007a64 <inc_lock+0x118>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	440b      	add	r3, r1
 80079f0:	3304      	adds	r3, #4
 80079f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695a      	ldr	r2, [r3, #20]
 80079f8:	491a      	ldr	r1, [pc, #104]	; (8007a64 <inc_lock+0x118>)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	440b      	add	r3, r1
 8007a00:	3308      	adds	r3, #8
 8007a02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a04:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <inc_lock+0x118>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	2200      	movs	r2, #0
 8007a10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <inc_lock+0xe0>
 8007a18:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <inc_lock+0x118>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	4413      	add	r3, r2
 8007a20:	330c      	adds	r3, #12
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <inc_lock+0xe0>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e015      	b.n	8007a58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d108      	bne.n	8007a44 <inc_lock+0xf8>
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <inc_lock+0x118>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	4413      	add	r3, r2
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	e001      	b.n	8007a48 <inc_lock+0xfc>
 8007a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a48:	4906      	ldr	r1, [pc, #24]	; (8007a64 <inc_lock+0x118>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	440b      	add	r3, r1
 8007a50:	330c      	adds	r3, #12
 8007a52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	20002480 	.word	0x20002480

08007a68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d825      	bhi.n	8007ac8 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a7c:	4a17      	ldr	r2, [pc, #92]	; (8007adc <dec_lock+0x74>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	4413      	add	r3, r2
 8007a84:	330c      	adds	r3, #12
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a8a:	89fb      	ldrh	r3, [r7, #14]
 8007a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a90:	d101      	bne.n	8007a96 <dec_lock+0x2e>
 8007a92:	2300      	movs	r3, #0
 8007a94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a96:	89fb      	ldrh	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <dec_lock+0x3a>
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007aa2:	4a0e      	ldr	r2, [pc, #56]	; (8007adc <dec_lock+0x74>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	330c      	adds	r3, #12
 8007aac:	89fa      	ldrh	r2, [r7, #14]
 8007aae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <dec_lock+0x5a>
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <dec_lock+0x74>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	4413      	add	r3, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	737b      	strb	r3, [r7, #13]
 8007ac6:	e001      	b.n	8007acc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ac8:	2302      	movs	r3, #2
 8007aca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007acc:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20002480 	.word	0x20002480

08007ae0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e010      	b.n	8007b10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007aee:	4a0d      	ldr	r2, [pc, #52]	; (8007b24 <clear_lock+0x44>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	4413      	add	r3, r2
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d105      	bne.n	8007b0a <clear_lock+0x2a>
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <clear_lock+0x44>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	4413      	add	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d9eb      	bls.n	8007aee <clear_lock+0xe>
	}
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20002480 	.word	0x20002480

08007b28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d034      	beq.n	8007ba6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7858      	ldrb	r0, [r3, #1]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	f7ff fd40 	bl	80075d4 <disk_write>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	73fb      	strb	r3, [r7, #15]
 8007b5e:	e022      	b.n	8007ba6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	1ad2      	subs	r2, r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d217      	bcs.n	8007ba6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	789b      	ldrb	r3, [r3, #2]
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	e010      	b.n	8007ba0 <sync_window+0x78>
					wsect += fs->fsize;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4413      	add	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7858      	ldrb	r0, [r3, #1]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b92:	2301      	movs	r3, #1
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	f7ff fd1d 	bl	80075d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d8eb      	bhi.n	8007b7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d01b      	beq.n	8007c00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff ffad 	bl	8007b28 <sync_window>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d113      	bne.n	8007c00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7858      	ldrb	r0, [r3, #1]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007be2:	2301      	movs	r3, #1
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	f7ff fcd5 	bl	8007594 <disk_read>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff ff87 	bl	8007b28 <sync_window>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d159      	bne.n	8007cd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d149      	bne.n	8007cc0 <sync_fs+0xb4>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	791b      	ldrb	r3, [r3, #4]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d145      	bne.n	8007cc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	899b      	ldrh	r3, [r3, #12]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2100      	movs	r1, #0
 8007c42:	f7ff fda8 	bl	8007796 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3338      	adds	r3, #56	; 0x38
 8007c4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fd37 	bl	80076c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3338      	adds	r3, #56	; 0x38
 8007c5c:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <sync_fs+0xd8>)
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fd4c 	bl	80076fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3338      	adds	r3, #56	; 0x38
 8007c68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c6c:	491e      	ldr	r1, [pc, #120]	; (8007ce8 <sync_fs+0xdc>)
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fd44 	bl	80076fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3338      	adds	r3, #56	; 0x38
 8007c78:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7ff fd3a 	bl	80076fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3338      	adds	r3, #56	; 0x38
 8007c8c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7ff fd30 	bl	80076fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7858      	ldrb	r0, [r3, #1]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f7ff fc8d 	bl	80075d4 <disk_write>
			fs->fsi_flag = 0;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fca3 	bl	8007614 <disk_ioctl>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <sync_fs+0xcc>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	41615252 	.word	0x41615252
 8007ce8:	61417272 	.word	0x61417272

08007cec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3b02      	subs	r3, #2
 8007cfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	3b02      	subs	r3, #2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d301      	bcc.n	8007d0c <clust2sect+0x20>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e008      	b.n	8007d1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	895b      	ldrh	r3, [r3, #10]
 8007d10:	461a      	mov	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	fb03 f202 	mul.w	r2, r3, r2
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	4413      	add	r3, r2
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d904      	bls.n	8007d4a <get_fat+0x20>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d302      	bcc.n	8007d50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e0bb      	b.n	8007ec8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	f000 8083 	beq.w	8007e66 <get_fat+0x13c>
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	f300 80a7 	bgt.w	8007eb4 <get_fat+0x18a>
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d002      	beq.n	8007d70 <get_fat+0x46>
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d056      	beq.n	8007e1c <get_fat+0xf2>
 8007d6e:	e0a1      	b.n	8007eb4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	899b      	ldrh	r3, [r3, #12]
 8007d86:	4619      	mov	r1, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d8e:	4413      	add	r3, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	6938      	ldr	r0, [r7, #16]
 8007d94:	f7ff ff0c 	bl	8007bb0 <move_window>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 808d 	bne.w	8007eba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	60fa      	str	r2, [r7, #12]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	8992      	ldrh	r2, [r2, #12]
 8007daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dae:	fb01 f202 	mul.w	r2, r1, r2
 8007db2:	1a9b      	subs	r3, r3, r2
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4413      	add	r3, r2
 8007db8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dbc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	899b      	ldrh	r3, [r3, #12]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dce:	4413      	add	r3, r2
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6938      	ldr	r0, [r7, #16]
 8007dd4:	f7ff feec 	bl	8007bb0 <move_window>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d16f      	bne.n	8007ebe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	899b      	ldrh	r3, [r3, #12]
 8007de2:	461a      	mov	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dea:	fb01 f202 	mul.w	r2, r1, r2
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <get_fat+0xe8>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	091b      	lsrs	r3, r3, #4
 8007e10:	e002      	b.n	8007e18 <get_fat+0xee>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e18:	617b      	str	r3, [r7, #20]
			break;
 8007e1a:	e055      	b.n	8007ec8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	899b      	ldrh	r3, [r3, #12]
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4619      	mov	r1, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e30:	4413      	add	r3, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	6938      	ldr	r0, [r7, #16]
 8007e36:	f7ff febb 	bl	8007bb0 <move_window>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d140      	bne.n	8007ec2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	8992      	ldrh	r2, [r2, #12]
 8007e4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e52:	fb00 f202 	mul.w	r2, r0, r2
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	440b      	add	r3, r1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fbf8 	bl	8007650 <ld_word>
 8007e60:	4603      	mov	r3, r0
 8007e62:	617b      	str	r3, [r7, #20]
			break;
 8007e64:	e030      	b.n	8007ec8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	899b      	ldrh	r3, [r3, #12]
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f7ff fe96 	bl	8007bb0 <move_window>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d11d      	bne.n	8007ec6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	8992      	ldrh	r2, [r2, #12]
 8007e98:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e9c:	fb00 f202 	mul.w	r2, r0, r2
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff fbeb 	bl	8007680 <ld_dword>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007eb0:	617b      	str	r3, [r7, #20]
			break;
 8007eb2:	e009      	b.n	8007ec8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	e006      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ec6:	bf00      	nop
		}
	}

	return val;
 8007ec8:	697b      	ldr	r3, [r7, #20]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ed2:	b590      	push	{r4, r7, lr}
 8007ed4:	b089      	sub	sp, #36	; 0x24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	f240 8109 	bls.w	80080fc <put_fat+0x22a>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	f080 8103 	bcs.w	80080fc <put_fat+0x22a>
		switch (fs->fs_type) {
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f000 80b6 	beq.w	800806c <put_fat+0x19a>
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	f300 80fb 	bgt.w	80080fc <put_fat+0x22a>
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d003      	beq.n	8007f12 <put_fat+0x40>
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	f000 8083 	beq.w	8008016 <put_fat+0x144>
 8007f10:	e0f4      	b.n	80080fc <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	899b      	ldrh	r3, [r3, #12]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f30:	4413      	add	r3, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7ff fe3b 	bl	8007bb0 <move_window>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f040 80d4 	bne.w	80080ee <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	61ba      	str	r2, [r7, #24]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	8992      	ldrh	r2, [r2, #12]
 8007f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f5a:	fb00 f202 	mul.w	r2, r0, r2
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	440b      	add	r3, r1
 8007f62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <put_fat+0xb8>
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	b25a      	sxtb	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	b25b      	sxtb	r3, r3
 8007f82:	4313      	orrs	r3, r2
 8007f84:	b25b      	sxtb	r3, r3
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	e001      	b.n	8007f8e <put_fat+0xbc>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	899b      	ldrh	r3, [r3, #12]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fa8:	4413      	add	r3, r2
 8007faa:	4619      	mov	r1, r3
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7ff fdff 	bl	8007bb0 <move_window>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 809a 	bne.w	80080f2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	899b      	ldrh	r3, [r3, #12]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fd0:	fb00 f202 	mul.w	r2, r0, r2
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <put_fat+0x11a>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	091b      	lsrs	r3, r3, #4
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	e00e      	b.n	800800a <put_fat+0x138>
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b25b      	sxtb	r3, r3
 8007ff2:	f023 030f 	bic.w	r3, r3, #15
 8007ff6:	b25a      	sxtb	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b25b      	sxtb	r3, r3
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	b25b      	sxtb	r3, r3
 8008004:	4313      	orrs	r3, r2
 8008006:	b25b      	sxtb	r3, r3
 8008008:	b2db      	uxtb	r3, r3
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	70da      	strb	r2, [r3, #3]
			break;
 8008014:	e072      	b.n	80080fc <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	899b      	ldrh	r3, [r3, #12]
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	fbb3 f3f1 	udiv	r3, r3, r1
 800802a:	4413      	add	r3, r2
 800802c:	4619      	mov	r1, r3
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fdbe 	bl	8007bb0 <move_window>
 8008034:	4603      	mov	r3, r0
 8008036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008038:	7ffb      	ldrb	r3, [r7, #31]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d15b      	bne.n	80080f6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	8992      	ldrh	r2, [r2, #12]
 800804c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008050:	fb00 f202 	mul.w	r2, r0, r2
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	440b      	add	r3, r1
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	b292      	uxth	r2, r2
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fb31 	bl	80076c6 <st_word>
			fs->wflag = 1;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	70da      	strb	r2, [r3, #3]
			break;
 800806a:	e047      	b.n	80080fc <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	899b      	ldrh	r3, [r3, #12]
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	b29b      	uxth	r3, r3
 8008078:	4619      	mov	r1, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008080:	4413      	add	r3, r2
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fd93 	bl	8007bb0 <move_window>
 800808a:	4603      	mov	r3, r0
 800808c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800808e:	7ffb      	ldrb	r3, [r7, #31]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d132      	bne.n	80080fa <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	8992      	ldrh	r2, [r2, #12]
 80080a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ac:	fb00 f202 	mul.w	r2, r0, r2
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	440b      	add	r3, r1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fae3 	bl	8007680 <ld_dword>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080c0:	4323      	orrs	r3, r4
 80080c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	8992      	ldrh	r2, [r2, #12]
 80080d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80080d6:	fb00 f202 	mul.w	r2, r0, r2
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	440b      	add	r3, r1
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fb0b 	bl	80076fc <st_dword>
			fs->wflag = 1;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	70da      	strb	r2, [r3, #3]
			break;
 80080ec:	e006      	b.n	80080fc <put_fat+0x22a>
			if (res != FR_OK) break;
 80080ee:	bf00      	nop
 80080f0:	e004      	b.n	80080fc <put_fat+0x22a>
			if (res != FR_OK) break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <put_fat+0x22a>
			if (res != FR_OK) break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <put_fat+0x22a>
			if (res != FR_OK) break;
 80080fa:	bf00      	nop
		}
	}
	return res;
 80080fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3724      	adds	r7, #36	; 0x24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd90      	pop	{r4, r7, pc}

08008106 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b088      	sub	sp, #32
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d904      	bls.n	800812c <remove_chain+0x26>
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	429a      	cmp	r2, r3
 800812a:	d301      	bcc.n	8008130 <remove_chain+0x2a>
 800812c:	2302      	movs	r3, #2
 800812e:	e04b      	b.n	80081c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00c      	beq.n	8008150 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	69b8      	ldr	r0, [r7, #24]
 800813e:	f7ff fec8 	bl	8007ed2 <put_fat>
 8008142:	4603      	mov	r3, r0
 8008144:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008146:	7ffb      	ldrb	r3, [r7, #31]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <remove_chain+0x4a>
 800814c:	7ffb      	ldrb	r3, [r7, #31]
 800814e:	e03b      	b.n	80081c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fde9 	bl	8007d2a <get_fat>
 8008158:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d031      	beq.n	80081c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <remove_chain+0x64>
 8008166:	2302      	movs	r3, #2
 8008168:	e02e      	b.n	80081c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d101      	bne.n	8008176 <remove_chain+0x70>
 8008172:	2301      	movs	r3, #1
 8008174:	e028      	b.n	80081c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008176:	2200      	movs	r2, #0
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	69b8      	ldr	r0, [r7, #24]
 800817c:	f7ff fea9 	bl	8007ed2 <put_fat>
 8008180:	4603      	mov	r3, r0
 8008182:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008184:	7ffb      	ldrb	r3, [r7, #31]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <remove_chain+0x88>
 800818a:	7ffb      	ldrb	r3, [r7, #31]
 800818c:	e01c      	b.n	80081c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	3b02      	subs	r3, #2
 8008198:	429a      	cmp	r2, r3
 800819a:	d20b      	bcs.n	80081b4 <remove_chain+0xae>
			fs->free_clst++;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	791b      	ldrb	r3, [r3, #4]
 80081aa:	f043 0301 	orr.w	r3, r3, #1
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d3c6      	bcc.n	8008150 <remove_chain+0x4a>
 80081c2:	e000      	b.n	80081c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <create_chain+0x2c>
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d31b      	bcc.n	8008234 <create_chain+0x64>
 80081fc:	2301      	movs	r3, #1
 80081fe:	61bb      	str	r3, [r7, #24]
 8008200:	e018      	b.n	8008234 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fd90 	bl	8007d2a <get_fat>
 800820a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d801      	bhi.n	8008216 <create_chain+0x46>
 8008212:	2301      	movs	r3, #1
 8008214:	e070      	b.n	80082f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d101      	bne.n	8008222 <create_chain+0x52>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	e06a      	b.n	80082f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	429a      	cmp	r2, r3
 800822a:	d201      	bcs.n	8008230 <create_chain+0x60>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	e063      	b.n	80082f8 <create_chain+0x128>
		scl = clst;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	3301      	adds	r3, #1
 800823c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	429a      	cmp	r2, r3
 8008246:	d307      	bcc.n	8008258 <create_chain+0x88>
				ncl = 2;
 8008248:	2302      	movs	r3, #2
 800824a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	429a      	cmp	r2, r3
 8008252:	d901      	bls.n	8008258 <create_chain+0x88>
 8008254:	2300      	movs	r3, #0
 8008256:	e04f      	b.n	80082f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008258:	69f9      	ldr	r1, [r7, #28]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff fd65 	bl	8007d2a <get_fat>
 8008260:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00e      	beq.n	8008286 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d003      	beq.n	8008276 <create_chain+0xa6>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d101      	bne.n	800827a <create_chain+0xaa>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	e03e      	b.n	80082f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	429a      	cmp	r2, r3
 8008280:	d1da      	bne.n	8008238 <create_chain+0x68>
 8008282:	2300      	movs	r3, #0
 8008284:	e038      	b.n	80082f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008286:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008288:	f04f 32ff 	mov.w	r2, #4294967295
 800828c:	69f9      	ldr	r1, [r7, #28]
 800828e:	6938      	ldr	r0, [r7, #16]
 8008290:	f7ff fe1f 	bl	8007ed2 <put_fat>
 8008294:	4603      	mov	r3, r0
 8008296:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <create_chain+0xe2>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d006      	beq.n	80082b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6938      	ldr	r0, [r7, #16]
 80082aa:	f7ff fe12 	bl	8007ed2 <put_fat>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d116      	bne.n	80082e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	3b02      	subs	r3, #2
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d804      	bhi.n	80082d6 <create_chain+0x106>
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	1e5a      	subs	r2, r3, #1
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	791b      	ldrb	r3, [r3, #4]
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	711a      	strb	r2, [r3, #4]
 80082e4:	e007      	b.n	80082f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d102      	bne.n	80082f2 <create_chain+0x122>
 80082ec:	f04f 33ff 	mov.w	r3, #4294967295
 80082f0:	e000      	b.n	80082f4 <create_chain+0x124>
 80082f2:	2301      	movs	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80082f6:	69fb      	ldr	r3, [r7, #28]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3720      	adds	r7, #32
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	3304      	adds	r3, #4
 8008316:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	899b      	ldrh	r3, [r3, #12]
 800831c:	461a      	mov	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	fbb3 f3f2 	udiv	r3, r3, r2
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	8952      	ldrh	r2, [r2, #10]
 8008328:	fbb3 f3f2 	udiv	r3, r3, r2
 800832c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	613a      	str	r2, [r7, #16]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <clmt_clust+0x42>
 800833e:	2300      	movs	r3, #0
 8008340:	e010      	b.n	8008364 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	d307      	bcc.n	800835a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3304      	adds	r3, #4
 8008356:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008358:	e7e9      	b.n	800832e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800835a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4413      	add	r3, r2
}
 8008364:	4618      	mov	r0, r3
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008386:	d204      	bcs.n	8008392 <dir_sdi+0x22>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008392:	2302      	movs	r3, #2
 8008394:	e071      	b.n	800847a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d106      	bne.n	80083b6 <dir_sdi+0x46>
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d902      	bls.n	80083b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	8912      	ldrh	r2, [r2, #8]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d301      	bcc.n	80083cc <dir_sdi+0x5c>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e056      	b.n	800847a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	61da      	str	r2, [r3, #28]
 80083d4:	e02d      	b.n	8008432 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	895b      	ldrh	r3, [r3, #10]
 80083da:	461a      	mov	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	899b      	ldrh	r3, [r3, #12]
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083e6:	e019      	b.n	800841c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6979      	ldr	r1, [r7, #20]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fc9c 	bl	8007d2a <get_fat>
 80083f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d101      	bne.n	8008400 <dir_sdi+0x90>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e03c      	b.n	800847a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d904      	bls.n	8008410 <dir_sdi+0xa0>
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	429a      	cmp	r2, r3
 800840e:	d301      	bcc.n	8008414 <dir_sdi+0xa4>
 8008410:	2302      	movs	r3, #2
 8008412:	e032      	b.n	800847a <dir_sdi+0x10a>
			ofs -= csz;
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	429a      	cmp	r2, r3
 8008422:	d2e1      	bcs.n	80083e8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	6938      	ldr	r0, [r7, #16]
 8008428:	f7ff fc60 	bl	8007cec <clust2sect>
 800842c:	4602      	mov	r2, r0
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <dir_sdi+0xd4>
 8008440:	2302      	movs	r3, #2
 8008442:	e01a      	b.n	800847a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	899b      	ldrh	r3, [r3, #12]
 800844c:	4619      	mov	r1, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	fbb3 f3f1 	udiv	r3, r3, r1
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	899b      	ldrh	r3, [r3, #12]
 8008464:	461a      	mov	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	fbb3 f0f2 	udiv	r0, r3, r2
 800846c:	fb00 f202 	mul.w	r2, r0, r2
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	18ca      	adds	r2, r1, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b086      	sub	sp, #24
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	3320      	adds	r3, #32
 8008498:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <dir_next+0x28>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084a8:	d301      	bcc.n	80084ae <dir_next+0x2c>
 80084aa:	2304      	movs	r3, #4
 80084ac:	e0bb      	b.n	8008626 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	899b      	ldrh	r3, [r3, #12]
 80084b2:	461a      	mov	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ba:	fb01 f202 	mul.w	r2, r1, r2
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f040 809d 	bne.w	8008600 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	8912      	ldrh	r2, [r2, #8]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	f0c0 808d 	bcc.w	8008600 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	61da      	str	r2, [r3, #28]
 80084ec:	2304      	movs	r3, #4
 80084ee:	e09a      	b.n	8008626 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	899b      	ldrh	r3, [r3, #12]
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	8952      	ldrh	r2, [r2, #10]
 8008500:	3a01      	subs	r2, #1
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d17b      	bne.n	8008600 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7ff fc0a 	bl	8007d2a <get_fat>
 8008516:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d801      	bhi.n	8008522 <dir_next+0xa0>
 800851e:	2302      	movs	r3, #2
 8008520:	e081      	b.n	8008626 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008528:	d101      	bne.n	800852e <dir_next+0xac>
 800852a:	2301      	movs	r3, #1
 800852c:	e07b      	b.n	8008626 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d359      	bcc.n	80085ec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d104      	bne.n	8008548 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	61da      	str	r2, [r3, #28]
 8008544:	2304      	movs	r3, #4
 8008546:	e06e      	b.n	8008626 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	4619      	mov	r1, r3
 8008550:	4610      	mov	r0, r2
 8008552:	f7ff fe3d 	bl	80081d0 <create_chain>
 8008556:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <dir_next+0xe0>
 800855e:	2307      	movs	r3, #7
 8008560:	e061      	b.n	8008626 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <dir_next+0xea>
 8008568:	2302      	movs	r3, #2
 800856a:	e05c      	b.n	8008626 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008572:	d101      	bne.n	8008578 <dir_next+0xf6>
 8008574:	2301      	movs	r3, #1
 8008576:	e056      	b.n	8008626 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff fad5 	bl	8007b28 <sync_window>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <dir_next+0x106>
 8008584:	2301      	movs	r3, #1
 8008586:	e04e      	b.n	8008626 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	899b      	ldrh	r3, [r3, #12]
 8008592:	461a      	mov	r2, r3
 8008594:	2100      	movs	r1, #0
 8008596:	f7ff f8fe 	bl	8007796 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	6979      	ldr	r1, [r7, #20]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff fba3 	bl	8007cec <clust2sect>
 80085a6:	4602      	mov	r2, r0
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	635a      	str	r2, [r3, #52]	; 0x34
 80085ac:	e012      	b.n	80085d4 <dir_next+0x152>
						fs->wflag = 1;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff fab7 	bl	8007b28 <sync_window>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <dir_next+0x142>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e030      	b.n	8008626 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	635a      	str	r2, [r3, #52]	; 0x34
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	895b      	ldrh	r3, [r3, #10]
 80085d8:	461a      	mov	r2, r3
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	4293      	cmp	r3, r2
 80085de:	d3e6      	bcc.n	80085ae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad2      	subs	r2, r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80085f2:	6979      	ldr	r1, [r7, #20]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7ff fb79 	bl	8007cec <clust2sect>
 80085fa:	4602      	mov	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	899b      	ldrh	r3, [r3, #12]
 8008610:	461a      	mov	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	fbb3 f0f2 	udiv	r0, r3, r2
 8008618:	fb00 f202 	mul.w	r2, r0, r2
 800861c:	1a9b      	subs	r3, r3, r2
 800861e:	18ca      	adds	r2, r1, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b086      	sub	sp, #24
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800863e:	2100      	movs	r1, #0
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff fe95 	bl	8008370 <dir_sdi>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d12b      	bne.n	80086a8 <dir_alloc+0x7a>
		n = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	4619      	mov	r1, r3
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff faa8 	bl	8007bb0 <move_window>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d11d      	bne.n	80086a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2be5      	cmp	r3, #229	; 0xe5
 8008672:	d004      	beq.n	800867e <dir_alloc+0x50>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d107      	bne.n	800868e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3301      	adds	r3, #1
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d102      	bne.n	8008692 <dir_alloc+0x64>
 800868c:	e00c      	b.n	80086a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008692:	2101      	movs	r1, #1
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fef4 	bl	8008482 <dir_next>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0d7      	beq.n	8008654 <dir_alloc+0x26>
 80086a4:	e000      	b.n	80086a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d101      	bne.n	80086b2 <dir_alloc+0x84>
 80086ae:	2307      	movs	r3, #7
 80086b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	331a      	adds	r3, #26
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe ffc0 	bl	8007650 <ld_word>
 80086d0:	4603      	mov	r3, r0
 80086d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d109      	bne.n	80086f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	3314      	adds	r3, #20
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe ffb5 	bl	8007650 <ld_word>
 80086e6:	4603      	mov	r3, r0
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80086f0:	68fb      	ldr	r3, [r7, #12]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	331a      	adds	r3, #26
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	b292      	uxth	r2, r2
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe ffd8 	bl	80076c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d109      	bne.n	8008732 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f103 0214 	add.w	r2, r3, #20
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	b29b      	uxth	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f7fe ffca 	bl	80076c6 <st_word>
	}
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800873c:	b590      	push	{r4, r7, lr}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	331a      	adds	r3, #26
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe ff80 	bl	8007650 <ld_word>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <cmp_lfn+0x1e>
 8008756:	2300      	movs	r3, #0
 8008758:	e059      	b.n	800880e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	4613      	mov	r3, r2
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008770:	2301      	movs	r3, #1
 8008772:	81fb      	strh	r3, [r7, #14]
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	e033      	b.n	80087e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800877a:	4a27      	ldr	r2, [pc, #156]	; (8008818 <cmp_lfn+0xdc>)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4413      	add	r3, r2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	4413      	add	r3, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe ff61 	bl	8007650 <ld_word>
 800878e:	4603      	mov	r3, r0
 8008790:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008792:	89fb      	ldrh	r3, [r7, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01a      	beq.n	80087ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2bfe      	cmp	r3, #254	; 0xfe
 800879c:	d812      	bhi.n	80087c4 <cmp_lfn+0x88>
 800879e:	89bb      	ldrh	r3, [r7, #12]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 fa2f 	bl	800ac04 <ff_wtoupper>
 80087a6:	4603      	mov	r3, r0
 80087a8:	461c      	mov	r4, r3
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	617a      	str	r2, [r7, #20]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f002 fa23 	bl	800ac04 <ff_wtoupper>
 80087be:	4603      	mov	r3, r0
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d001      	beq.n	80087c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80087c4:	2300      	movs	r3, #0
 80087c6:	e022      	b.n	800880e <cmp_lfn+0xd2>
			}
			wc = uc;
 80087c8:	89bb      	ldrh	r3, [r7, #12]
 80087ca:	81fb      	strh	r3, [r7, #14]
 80087cc:	e006      	b.n	80087dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80087ce:	89bb      	ldrh	r3, [r7, #12]
 80087d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d001      	beq.n	80087dc <cmp_lfn+0xa0>
 80087d8:	2300      	movs	r3, #0
 80087da:	e018      	b.n	800880e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3301      	adds	r3, #1
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	2b0c      	cmp	r3, #12
 80087e6:	d9c8      	bls.n	800877a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <cmp_lfn+0xd0>
 80087f4:	89fb      	ldrh	r3, [r7, #14]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d008      	beq.n	800880c <cmp_lfn+0xd0>
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <cmp_lfn+0xd0>
 8008808:	2300      	movs	r3, #0
 800880a:	e000      	b.n	800880e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800880c:	2301      	movs	r3, #1
}
 800880e:	4618      	mov	r0, r3
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd90      	pop	{r4, r7, pc}
 8008816:	bf00      	nop
 8008818:	0800e3e4 	.word	0x0800e3e4

0800881c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4611      	mov	r1, r2
 8008828:	461a      	mov	r2, r3
 800882a:	460b      	mov	r3, r1
 800882c:	71fb      	strb	r3, [r7, #7]
 800882e:	4613      	mov	r3, r2
 8008830:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	330d      	adds	r3, #13
 8008836:	79ba      	ldrb	r2, [r7, #6]
 8008838:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	330b      	adds	r3, #11
 800883e:	220f      	movs	r2, #15
 8008840:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	330c      	adds	r3, #12
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	331a      	adds	r3, #26
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe ff38 	bl	80076c6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	1e5a      	subs	r2, r3, #1
 800885a:	4613      	mov	r3, r2
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	82fb      	strh	r3, [r7, #22]
 800886a:	2300      	movs	r3, #0
 800886c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800886e:	8afb      	ldrh	r3, [r7, #22]
 8008870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <put_lfn+0x6c>
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	61fa      	str	r2, [r7, #28]
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008888:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <put_lfn+0xcc>)
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	4413      	add	r3, r2
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4413      	add	r3, r2
 8008896:	8afa      	ldrh	r2, [r7, #22]
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ff13 	bl	80076c6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80088a0:	8afb      	ldrh	r3, [r7, #22]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d102      	bne.n	80088ac <put_lfn+0x90>
 80088a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	3301      	adds	r3, #1
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b0c      	cmp	r3, #12
 80088b6:	d9da      	bls.n	800886e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80088b8:	8afb      	ldrh	r3, [r7, #22]
 80088ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088be:	4293      	cmp	r3, r2
 80088c0:	d006      	beq.n	80088d0 <put_lfn+0xb4>
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <put_lfn+0xbc>
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	79fa      	ldrb	r2, [r7, #7]
 80088dc:	701a      	strb	r2, [r3, #0]
}
 80088de:	bf00      	nop
 80088e0:	3720      	adds	r7, #32
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	0800e3e4 	.word	0x0800e3e4

080088ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	; 0x30
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80088fa:	220b      	movs	r2, #11
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7fe ff28 	bl	8007754 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b05      	cmp	r3, #5
 8008908:	d92b      	bls.n	8008962 <gen_numname+0x76>
		sr = seq;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800890e:	e022      	b.n	8008956 <gen_numname+0x6a>
			wc = *lfn++;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	1c9a      	adds	r2, r3, #2
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800891a:	2300      	movs	r3, #0
 800891c:	62bb      	str	r3, [r7, #40]	; 0x28
 800891e:	e017      	b.n	8008950 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	005a      	lsls	r2, r3, #1
 8008924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	4413      	add	r3, r2
 800892c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800892e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008930:	085b      	lsrs	r3, r3, #1
 8008932:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <gen_numname+0x5e>
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008944:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008948:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	3301      	adds	r3, #1
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	2b0f      	cmp	r3, #15
 8008954:	d9e4      	bls.n	8008920 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1d8      	bne.n	8008910 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008962:	2307      	movs	r3, #7
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	b2db      	uxtb	r3, r3
 8008970:	3330      	adds	r3, #48	; 0x30
 8008972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800897a:	2b39      	cmp	r3, #57	; 0x39
 800897c:	d904      	bls.n	8008988 <gen_numname+0x9c>
 800897e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008982:	3307      	adds	r3, #7
 8008984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	1e5a      	subs	r2, r3, #1
 800898c:	62ba      	str	r2, [r7, #40]	; 0x28
 800898e:	3330      	adds	r3, #48	; 0x30
 8008990:	443b      	add	r3, r7
 8008992:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008996:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	603b      	str	r3, [r7, #0]
	} while (seq);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1df      	bne.n	8008966 <gen_numname+0x7a>
	ns[i] = '~';
 80089a6:	f107 0214 	add.w	r2, r7, #20
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	4413      	add	r3, r2
 80089ae:	227e      	movs	r2, #126	; 0x7e
 80089b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80089b2:	2300      	movs	r3, #0
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
 80089b6:	e002      	b.n	80089be <gen_numname+0xd2>
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	3301      	adds	r3, #1
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d205      	bcs.n	80089d2 <gen_numname+0xe6>
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	4413      	add	r3, r2
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	d1f2      	bne.n	80089b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	2b07      	cmp	r3, #7
 80089d6:	d807      	bhi.n	80089e8 <gen_numname+0xfc>
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80089de:	3330      	adds	r3, #48	; 0x30
 80089e0:	443b      	add	r3, r7
 80089e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80089e6:	e000      	b.n	80089ea <gen_numname+0xfe>
 80089e8:	2120      	movs	r1, #32
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	627a      	str	r2, [r7, #36]	; 0x24
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	460a      	mov	r2, r1
 80089f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	2b07      	cmp	r3, #7
 80089fc:	d9e9      	bls.n	80089d2 <gen_numname+0xe6>
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	3730      	adds	r7, #48	; 0x30
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008a14:	230b      	movs	r3, #11
 8008a16:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	0852      	lsrs	r2, r2, #1
 8008a1e:	01db      	lsls	r3, r3, #7
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	1c59      	adds	r1, r3, #1
 8008a28:	6079      	str	r1, [r7, #4]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1ed      	bne.n	8008a18 <sum_sfn+0x10>
	return sum;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff fc88 	bl	8008370 <dir_sdi>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <dir_find+0x24>
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	e0a9      	b.n	8008bc2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a6e:	23ff      	movs	r3, #255	; 0xff
 8008a70:	753b      	strb	r3, [r7, #20]
 8008a72:	7d3b      	ldrb	r3, [r7, #20]
 8008a74:	757b      	strb	r3, [r7, #21]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6938      	ldr	r0, [r7, #16]
 8008a86:	f7ff f893 	bl	8007bb0 <move_window>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 8090 	bne.w	8008bb6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a9e:	7dbb      	ldrb	r3, [r7, #22]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <dir_find+0x60>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	75fb      	strb	r3, [r7, #23]
 8008aa8:	e08a      	b.n	8008bc0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	330b      	adds	r3, #11
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab6:	73fb      	strb	r3, [r7, #15]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7bfa      	ldrb	r2, [r7, #15]
 8008abc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008abe:	7dbb      	ldrb	r3, [r7, #22]
 8008ac0:	2be5      	cmp	r3, #229	; 0xe5
 8008ac2:	d007      	beq.n	8008ad4 <dir_find+0x8a>
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <dir_find+0x98>
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b0f      	cmp	r3, #15
 8008ad2:	d006      	beq.n	8008ae2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ad4:	23ff      	movs	r3, #255	; 0xff
 8008ad6:	757b      	strb	r3, [r7, #21]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
 8008ae0:	e05e      	b.n	8008ba0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b0f      	cmp	r3, #15
 8008ae6:	d136      	bne.n	8008b56 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d154      	bne.n	8008ba0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00d      	beq.n	8008b1c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	7b5b      	ldrb	r3, [r3, #13]
 8008b06:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008b08:	7dbb      	ldrb	r3, [r7, #22]
 8008b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b0e:	75bb      	strb	r3, [r7, #22]
 8008b10:	7dbb      	ldrb	r3, [r7, #22]
 8008b12:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008b1c:	7dba      	ldrb	r2, [r7, #22]
 8008b1e:	7d7b      	ldrb	r3, [r7, #21]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d115      	bne.n	8008b50 <dir_find+0x106>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	330d      	adds	r3, #13
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	7d3a      	ldrb	r2, [r7, #20]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d10e      	bne.n	8008b50 <dir_find+0x106>
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	691a      	ldr	r2, [r3, #16]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7ff fdfd 	bl	800873c <cmp_lfn>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <dir_find+0x106>
 8008b48:	7d7b      	ldrb	r3, [r7, #21]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	e000      	b.n	8008b52 <dir_find+0x108>
 8008b50:	23ff      	movs	r3, #255	; 0xff
 8008b52:	757b      	strb	r3, [r7, #21]
 8008b54:	e024      	b.n	8008ba0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b56:	7d7b      	ldrb	r3, [r7, #21]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d109      	bne.n	8008b70 <dir_find+0x126>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff ff51 	bl	8008a08 <sum_sfn>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	7d3b      	ldrb	r3, [r7, #20]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d024      	beq.n	8008bba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <dir_find+0x14a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a18      	ldr	r0, [r3, #32]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	220b      	movs	r2, #11
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7fe fe1f 	bl	80077cc <mem_cmp>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d014      	beq.n	8008bbe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b94:	23ff      	movs	r3, #255	; 0xff
 8008b96:	757b      	strb	r3, [r7, #21]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff fc6d 	bl	8008482 <dir_next>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f43f af65 	beq.w	8008a7e <dir_find+0x34>
 8008bb4:	e004      	b.n	8008bc0 <dir_find+0x176>
		if (res != FR_OK) break;
 8008bb6:	bf00      	nop
 8008bb8:	e002      	b.n	8008bc0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008bba:	bf00      	nop
 8008bbc:	e000      	b.n	8008bc0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008bbe:	bf00      	nop

	return res;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	; 0x30
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008be0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <dir_register+0x20>
 8008be8:	2306      	movs	r3, #6
 8008bea:	e0e0      	b.n	8008dae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008bec:	2300      	movs	r3, #0
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf0:	e002      	b.n	8008bf8 <dir_register+0x2c>
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	4413      	add	r3, r2
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1f4      	bne.n	8008bf2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	220c      	movs	r2, #12
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fd9d 	bl	8007754 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d032      	beq.n	8008c8a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2240      	movs	r2, #64	; 0x40
 8008c28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c30:	e016      	b.n	8008c60 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	f107 010c 	add.w	r1, r7, #12
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	f7ff fe53 	bl	80088ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff feff 	bl	8008a4a <dir_find>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d106      	bne.n	8008c68 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	2b63      	cmp	r3, #99	; 0x63
 8008c64:	d9e5      	bls.n	8008c32 <dir_register+0x66>
 8008c66:	e000      	b.n	8008c6a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008c68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	2b64      	cmp	r3, #100	; 0x64
 8008c6e:	d101      	bne.n	8008c74 <dir_register+0xa8>
 8008c70:	2307      	movs	r3, #7
 8008c72:	e09c      	b.n	8008dae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d002      	beq.n	8008c82 <dir_register+0xb6>
 8008c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c80:	e095      	b.n	8008dae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008c82:	7dfa      	ldrb	r2, [r7, #23]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d007      	beq.n	8008ca4 <dir_register+0xd8>
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	330c      	adds	r3, #12
 8008c98:	4a47      	ldr	r2, [pc, #284]	; (8008db8 <dir_register+0x1ec>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	089b      	lsrs	r3, r3, #2
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	e000      	b.n	8008ca6 <dir_register+0xda>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008ca8:	6a39      	ldr	r1, [r7, #32]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff fcbf 	bl	800862e <dir_alloc>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d148      	bne.n	8008d50 <dir_register+0x184>
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	623b      	str	r3, [r7, #32]
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d042      	beq.n	8008d50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695a      	ldr	r2, [r3, #20]
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	015b      	lsls	r3, r3, #5
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff fb4a 	bl	8008370 <dir_sdi>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d132      	bne.n	8008d50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3324      	adds	r3, #36	; 0x24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fe8a 	bl	8008a08 <sum_sfn>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f7fe ff56 	bl	8007bb0 <move_window>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d11d      	bne.n	8008d4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	6918      	ldr	r0, [r3, #16]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a19      	ldr	r1, [r3, #32]
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	7efb      	ldrb	r3, [r7, #27]
 8008d20:	f7ff fd7c 	bl	800881c <put_lfn>
				fs->wflag = 1;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2201      	movs	r2, #1
 8008d28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fba8 	bl	8008482 <dir_next>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <dir_register+0x184>
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	623b      	str	r3, [r7, #32]
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1d5      	bne.n	8008cf8 <dir_register+0x12c>
 8008d4c:	e000      	b.n	8008d50 <dir_register+0x184>
				if (res != FR_OK) break;
 8008d4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d128      	bne.n	8008daa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	69f8      	ldr	r0, [r7, #28]
 8008d60:	f7fe ff26 	bl	8007bb0 <move_window>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d11b      	bne.n	8008daa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	2220      	movs	r2, #32
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fd0b 	bl	8007796 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a18      	ldr	r0, [r3, #32]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3324      	adds	r3, #36	; 0x24
 8008d88:	220b      	movs	r2, #11
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f7fe fce2 	bl	8007754 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	330c      	adds	r3, #12
 8008d9c:	f002 0218 	and.w	r2, r2, #24
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2201      	movs	r2, #1
 8008da8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3730      	adds	r7, #48	; 0x30
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	4ec4ec4f 	.word	0x4ec4ec4f

08008dbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	613b      	str	r3, [r7, #16]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	61ba      	str	r2, [r7, #24]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dec:	2b1f      	cmp	r3, #31
 8008dee:	d940      	bls.n	8008e72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df2:	2b2f      	cmp	r3, #47	; 0x2f
 8008df4:	d006      	beq.n	8008e04 <create_name+0x48>
 8008df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df8:	2b5c      	cmp	r3, #92	; 0x5c
 8008dfa:	d110      	bne.n	8008e1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008dfc:	e002      	b.n	8008e04 <create_name+0x48>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	3301      	adds	r3, #1
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	4413      	add	r3, r2
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b2f      	cmp	r3, #47	; 0x2f
 8008e0e:	d0f6      	beq.n	8008dfe <create_name+0x42>
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	4413      	add	r3, r2
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b5c      	cmp	r3, #92	; 0x5c
 8008e1a:	d0f0      	beq.n	8008dfe <create_name+0x42>
			break;
 8008e1c:	e02a      	b.n	8008e74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2bfe      	cmp	r3, #254	; 0xfe
 8008e22:	d901      	bls.n	8008e28 <create_name+0x6c>
 8008e24:	2306      	movs	r3, #6
 8008e26:	e17d      	b.n	8009124 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e30:	2101      	movs	r1, #1
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 feaa 	bl	800ab8c <ff_convert>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <create_name+0x8a>
 8008e42:	2306      	movs	r3, #6
 8008e44:	e16e      	b.n	8009124 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e48:	2b7f      	cmp	r3, #127	; 0x7f
 8008e4a:	d809      	bhi.n	8008e60 <create_name+0xa4>
 8008e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e4e:	4619      	mov	r1, r3
 8008e50:	488d      	ldr	r0, [pc, #564]	; (8009088 <create_name+0x2cc>)
 8008e52:	f7fe fce2 	bl	800781a <chk_chr>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <create_name+0xa4>
 8008e5c:	2306      	movs	r3, #6
 8008e5e:	e161      	b.n	8009124 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	617a      	str	r2, [r7, #20]
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008e70:	e7b4      	b.n	8008ddc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008e72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	441a      	add	r2, r3
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e80:	2b1f      	cmp	r3, #31
 8008e82:	d801      	bhi.n	8008e88 <create_name+0xcc>
 8008e84:	2304      	movs	r3, #4
 8008e86:	e000      	b.n	8008e8a <create_name+0xce>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008e8e:	e011      	b.n	8008eb4 <create_name+0xf8>
		w = lfn[di - 1];
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e96:	3b01      	subs	r3, #1
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d002      	beq.n	8008eae <create_name+0xf2>
 8008ea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8008eac:	d106      	bne.n	8008ebc <create_name+0x100>
		di--;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ea      	bne.n	8008e90 <create_name+0xd4>
 8008eba:	e000      	b.n	8008ebe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008ebc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <create_name+0x118>
 8008ed0:	2306      	movs	r3, #6
 8008ed2:	e127      	b.n	8009124 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3324      	adds	r3, #36	; 0x24
 8008ed8:	220b      	movs	r2, #11
 8008eda:	2120      	movs	r1, #32
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fc5a 	bl	8007796 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e002      	b.n	8008eee <create_name+0x132>
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	2b20      	cmp	r3, #32
 8008efa:	d0f5      	beq.n	8008ee8 <create_name+0x12c>
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	2b2e      	cmp	r3, #46	; 0x2e
 8008f08:	d0ee      	beq.n	8008ee8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <create_name+0x168>
 8008f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f14:	f043 0303 	orr.w	r3, r3, #3
 8008f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008f1c:	e002      	b.n	8008f24 <create_name+0x168>
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <create_name+0x182>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f30:	3b01      	subs	r3, #1
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f3c:	d1ef      	bne.n	8008f1e <create_name+0x162>

	i = b = 0; ni = 8;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f44:	2300      	movs	r3, #0
 8008f46:	623b      	str	r3, [r7, #32]
 8008f48:	2308      	movs	r3, #8
 8008f4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	61ba      	str	r2, [r7, #24]
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 8090 	beq.w	8009084 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	d006      	beq.n	8008f78 <create_name+0x1bc>
 8008f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f6e:	d10a      	bne.n	8008f86 <create_name+0x1ca>
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d006      	beq.n	8008f86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f7c:	f043 0303 	orr.w	r3, r3, #3
 8008f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f84:	e07d      	b.n	8009082 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008f86:	6a3a      	ldr	r2, [r7, #32]
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d203      	bcs.n	8008f96 <create_name+0x1da>
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d123      	bne.n	8008fde <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b0b      	cmp	r3, #11
 8008f9a:	d106      	bne.n	8008faa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa0:	f043 0303 	orr.w	r3, r3, #3
 8008fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fa8:	e075      	b.n	8009096 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d005      	beq.n	8008fbe <create_name+0x202>
 8008fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fb6:	f043 0303 	orr.w	r3, r3, #3
 8008fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d866      	bhi.n	8009094 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	2308      	movs	r3, #8
 8008fcc:	623b      	str	r3, [r7, #32]
 8008fce:	230b      	movs	r3, #11
 8008fd0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fdc:	e051      	b.n	8009082 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8008fe2:	d914      	bls.n	800900e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008fe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 fdcf 	bl	800ab8c <ff_convert>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d004      	beq.n	8009002 <create_name+0x246>
 8008ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ffa:	3b80      	subs	r3, #128	; 0x80
 8008ffc:	4a23      	ldr	r2, [pc, #140]	; (800908c <create_name+0x2d0>)
 8008ffe:	5cd3      	ldrb	r3, [r2, r3]
 8009000:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009006:	f043 0302 	orr.w	r3, r3, #2
 800900a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800900e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	d007      	beq.n	8009024 <create_name+0x268>
 8009014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009016:	4619      	mov	r1, r3
 8009018:	481d      	ldr	r0, [pc, #116]	; (8009090 <create_name+0x2d4>)
 800901a:	f7fe fbfe 	bl	800781a <chk_chr>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009024:	235f      	movs	r3, #95	; 0x5f
 8009026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800902c:	f043 0303 	orr.w	r3, r3, #3
 8009030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009034:	e01b      	b.n	800906e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	d909      	bls.n	8009050 <create_name+0x294>
 800903c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800903e:	2b5a      	cmp	r3, #90	; 0x5a
 8009040:	d806      	bhi.n	8009050 <create_name+0x294>
					b |= 2;
 8009042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009046:	f043 0302 	orr.w	r3, r3, #2
 800904a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800904e:	e00e      	b.n	800906e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009052:	2b60      	cmp	r3, #96	; 0x60
 8009054:	d90b      	bls.n	800906e <create_name+0x2b2>
 8009056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009058:	2b7a      	cmp	r3, #122	; 0x7a
 800905a:	d808      	bhi.n	800906e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800905c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800906a:	3b20      	subs	r3, #32
 800906c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	623a      	str	r2, [r7, #32]
 8009074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009076:	b2d1      	uxtb	r1, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	4413      	add	r3, r2
 800907c:	460a      	mov	r2, r1
 800907e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009082:	e763      	b.n	8008f4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009084:	bf00      	nop
 8009086:	e006      	b.n	8009096 <create_name+0x2da>
 8009088:	0800e1dc 	.word	0x0800e1dc
 800908c:	0800e364 	.word	0x0800e364
 8009090:	0800e1e8 	.word	0x0800e1e8
			if (si > di) break;			/* No extension */
 8009094:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800909c:	2be5      	cmp	r3, #229	; 0xe5
 800909e:	d103      	bne.n	80090a8 <create_name+0x2ec>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2205      	movs	r2, #5
 80090a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d104      	bne.n	80090b8 <create_name+0x2fc>
 80090ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80090b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090bc:	f003 030c 	and.w	r3, r3, #12
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d005      	beq.n	80090d0 <create_name+0x314>
 80090c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090c8:	f003 0303 	and.w	r3, r3, #3
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d105      	bne.n	80090dc <create_name+0x320>
 80090d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80090dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d117      	bne.n	8009118 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80090e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d105      	bne.n	8009100 <create_name+0x344>
 80090f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090f8:	f043 0310 	orr.w	r3, r3, #16
 80090fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009104:	f003 030c 	and.w	r3, r3, #12
 8009108:	2b04      	cmp	r3, #4
 800910a:	d105      	bne.n	8009118 <create_name+0x35c>
 800910c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800911e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009122:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009124:	4618      	mov	r0, r3
 8009126:	3728      	adds	r7, #40	; 0x28
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009140:	e002      	b.n	8009148 <follow_path+0x1c>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	3301      	adds	r3, #1
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b2f      	cmp	r3, #47	; 0x2f
 800914e:	d0f8      	beq.n	8009142 <follow_path+0x16>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b5c      	cmp	r3, #92	; 0x5c
 8009156:	d0f4      	beq.n	8009142 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2200      	movs	r2, #0
 800915c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b1f      	cmp	r3, #31
 8009164:	d80a      	bhi.n	800917c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2280      	movs	r2, #128	; 0x80
 800916a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800916e:	2100      	movs	r1, #0
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff f8fd 	bl	8008370 <dir_sdi>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]
 800917a:	e048      	b.n	800920e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800917c:	463b      	mov	r3, r7
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff fe1b 	bl	8008dbc <create_name>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d139      	bne.n	8009204 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff fc5a 	bl	8008a4a <dir_find>
 8009196:	4603      	mov	r3, r0
 8009198:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d12c      	bne.n	8009208 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d127      	bne.n	8009208 <follow_path+0xdc>
 80091b8:	2305      	movs	r3, #5
 80091ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80091bc:	e024      	b.n	8009208 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d121      	bne.n	800920c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	799b      	ldrb	r3, [r3, #6]
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80091d4:	2305      	movs	r3, #5
 80091d6:	75fb      	strb	r3, [r7, #23]
 80091d8:	e019      	b.n	800920e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	8992      	ldrh	r2, [r2, #12]
 80091e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80091ec:	fb00 f202 	mul.w	r2, r0, r2
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	440b      	add	r3, r1
 80091f4:	4619      	mov	r1, r3
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff fa60 	bl	80086bc <ld_clust>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009202:	e7bb      	b.n	800917c <follow_path+0x50>
			if (res != FR_OK) break;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <follow_path+0xe2>
				break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800920c:	bf00      	nop
			}
		}
	}

	return res;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d031      	beq.n	8009292 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	e002      	b.n	800923c <get_ldnumber+0x24>
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	3301      	adds	r3, #1
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b1f      	cmp	r3, #31
 8009242:	d903      	bls.n	800924c <get_ldnumber+0x34>
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b3a      	cmp	r3, #58	; 0x3a
 800924a:	d1f4      	bne.n	8009236 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b3a      	cmp	r3, #58	; 0x3a
 8009252:	d11c      	bne.n	800928e <get_ldnumber+0x76>
			tp = *path;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	60fa      	str	r2, [r7, #12]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	3b30      	subs	r3, #48	; 0x30
 8009264:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b09      	cmp	r3, #9
 800926a:	d80e      	bhi.n	800928a <get_ldnumber+0x72>
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	429a      	cmp	r2, r3
 8009272:	d10a      	bne.n	800928a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d107      	bne.n	800928a <get_ldnumber+0x72>
					vol = (int)i;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	3301      	adds	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	e002      	b.n	8009294 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009292:	693b      	ldr	r3, [r7, #16]
}
 8009294:	4618      	mov	r0, r3
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	70da      	strb	r2, [r3, #3]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295
 80092b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe fc78 	bl	8007bb0 <move_window>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <check_fs+0x2a>
 80092c6:	2304      	movs	r3, #4
 80092c8:	e038      	b.n	800933c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	3338      	adds	r3, #56	; 0x38
 80092ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe f9bc 	bl	8007650 <ld_word>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d001      	beq.n	80092e8 <check_fs+0x48>
 80092e4:	2303      	movs	r3, #3
 80092e6:	e029      	b.n	800933c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092ee:	2be9      	cmp	r3, #233	; 0xe9
 80092f0:	d009      	beq.n	8009306 <check_fs+0x66>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092f8:	2beb      	cmp	r3, #235	; 0xeb
 80092fa:	d11e      	bne.n	800933a <check_fs+0x9a>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009302:	2b90      	cmp	r3, #144	; 0x90
 8009304:	d119      	bne.n	800933a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3338      	adds	r3, #56	; 0x38
 800930a:	3336      	adds	r3, #54	; 0x36
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe f9b7 	bl	8007680 <ld_dword>
 8009312:	4603      	mov	r3, r0
 8009314:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009318:	4a0a      	ldr	r2, [pc, #40]	; (8009344 <check_fs+0xa4>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d101      	bne.n	8009322 <check_fs+0x82>
 800931e:	2300      	movs	r3, #0
 8009320:	e00c      	b.n	800933c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3338      	adds	r3, #56	; 0x38
 8009326:	3352      	adds	r3, #82	; 0x52
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe f9a9 	bl	8007680 <ld_dword>
 800932e:	4603      	mov	r3, r0
 8009330:	4a05      	ldr	r2, [pc, #20]	; (8009348 <check_fs+0xa8>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d101      	bne.n	800933a <check_fs+0x9a>
 8009336:	2300      	movs	r3, #0
 8009338:	e000      	b.n	800933c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800933a:	2302      	movs	r3, #2
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	00544146 	.word	0x00544146
 8009348:	33544146 	.word	0x33544146

0800934c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b096      	sub	sp, #88	; 0x58
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	4613      	mov	r3, r2
 8009358:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff ff59 	bl	8009218 <get_ldnumber>
 8009366:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	da01      	bge.n	8009372 <find_volume+0x26>
 800936e:	230b      	movs	r3, #11
 8009370:	e265      	b.n	800983e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009372:	4a9f      	ldr	r2, [pc, #636]	; (80095f0 <find_volume+0x2a4>)
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800937a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <find_volume+0x3a>
 8009382:	230c      	movs	r3, #12
 8009384:	e25b      	b.n	800983e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	f023 0301 	bic.w	r3, r3, #1
 8009392:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d01a      	beq.n	80093d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	785b      	ldrb	r3, [r3, #1]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe f8b7 	bl	8007514 <disk_status>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10c      	bne.n	80093d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <find_volume+0x82>
 80093be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80093ca:	230a      	movs	r3, #10
 80093cc:	e237      	b.n	800983e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80093ce:	2300      	movs	r3, #0
 80093d0:	e235      	b.n	800983e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80093d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe f8af 	bl	8007548 <disk_initialize>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80093f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80093fc:	2303      	movs	r3, #3
 80093fe:	e21e      	b.n	800983e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <find_volume+0xca>
 8009406:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009412:	230a      	movs	r3, #10
 8009414:	e213      	b.n	800983e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	7858      	ldrb	r0, [r3, #1]
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	330c      	adds	r3, #12
 800941e:	461a      	mov	r2, r3
 8009420:	2102      	movs	r1, #2
 8009422:	f7fe f8f7 	bl	8007614 <disk_ioctl>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <find_volume+0xe4>
 800942c:	2301      	movs	r3, #1
 800942e:	e206      	b.n	800983e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	899b      	ldrh	r3, [r3, #12]
 8009434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009438:	d80d      	bhi.n	8009456 <find_volume+0x10a>
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	899b      	ldrh	r3, [r3, #12]
 800943e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009442:	d308      	bcc.n	8009456 <find_volume+0x10a>
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	899b      	ldrh	r3, [r3, #12]
 8009448:	461a      	mov	r2, r3
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	3b01      	subs	r3, #1
 8009450:	4013      	ands	r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <find_volume+0x10e>
 8009456:	2301      	movs	r3, #1
 8009458:	e1f1      	b.n	800983e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800945e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009462:	f7ff ff1d 	bl	80092a0 <check_fs>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800946c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009470:	2b02      	cmp	r3, #2
 8009472:	d149      	bne.n	8009508 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009474:	2300      	movs	r3, #0
 8009476:	643b      	str	r3, [r7, #64]	; 0x40
 8009478:	e01e      	b.n	80094b8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009488:	4413      	add	r3, r2
 800948a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	3304      	adds	r3, #4
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d006      	beq.n	80094a4 <find_volume+0x158>
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	3308      	adds	r3, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe f8f0 	bl	8007680 <ld_dword>
 80094a0:	4602      	mov	r2, r0
 80094a2:	e000      	b.n	80094a6 <find_volume+0x15a>
 80094a4:	2200      	movs	r2, #0
 80094a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	3358      	adds	r3, #88	; 0x58
 80094ac:	443b      	add	r3, r7
 80094ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b4:	3301      	adds	r3, #1
 80094b6:	643b      	str	r3, [r7, #64]	; 0x40
 80094b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d9dd      	bls.n	800947a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80094be:	2300      	movs	r3, #0
 80094c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <find_volume+0x182>
 80094c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ca:	3b01      	subs	r3, #1
 80094cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80094ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	3358      	adds	r3, #88	; 0x58
 80094d4:	443b      	add	r3, r7
 80094d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80094da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80094dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <find_volume+0x1a2>
 80094e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094e6:	f7ff fedb 	bl	80092a0 <check_fs>
 80094ea:	4603      	mov	r3, r0
 80094ec:	e000      	b.n	80094f0 <find_volume+0x1a4>
 80094ee:	2303      	movs	r3, #3
 80094f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80094f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d905      	bls.n	8009508 <find_volume+0x1bc>
 80094fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fe:	3301      	adds	r3, #1
 8009500:	643b      	str	r3, [r7, #64]	; 0x40
 8009502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009504:	2b03      	cmp	r3, #3
 8009506:	d9e2      	bls.n	80094ce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800950c:	2b04      	cmp	r3, #4
 800950e:	d101      	bne.n	8009514 <find_volume+0x1c8>
 8009510:	2301      	movs	r3, #1
 8009512:	e194      	b.n	800983e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009518:	2b01      	cmp	r3, #1
 800951a:	d901      	bls.n	8009520 <find_volume+0x1d4>
 800951c:	230d      	movs	r3, #13
 800951e:	e18e      	b.n	800983e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	3338      	adds	r3, #56	; 0x38
 8009524:	330b      	adds	r3, #11
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe f892 	bl	8007650 <ld_word>
 800952c:	4603      	mov	r3, r0
 800952e:	461a      	mov	r2, r3
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	899b      	ldrh	r3, [r3, #12]
 8009534:	429a      	cmp	r2, r3
 8009536:	d001      	beq.n	800953c <find_volume+0x1f0>
 8009538:	230d      	movs	r3, #13
 800953a:	e180      	b.n	800983e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	3338      	adds	r3, #56	; 0x38
 8009540:	3316      	adds	r3, #22
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe f884 	bl	8007650 <ld_word>
 8009548:	4603      	mov	r3, r0
 800954a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800954c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <find_volume+0x214>
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	3338      	adds	r3, #56	; 0x38
 8009556:	3324      	adds	r3, #36	; 0x24
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe f891 	bl	8007680 <ld_dword>
 800955e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009564:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	789b      	ldrb	r3, [r3, #2]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d005      	beq.n	8009584 <find_volume+0x238>
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	789b      	ldrb	r3, [r3, #2]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d001      	beq.n	8009584 <find_volume+0x238>
 8009580:	230d      	movs	r3, #13
 8009582:	e15c      	b.n	800983e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	789b      	ldrb	r3, [r3, #2]
 8009588:	461a      	mov	r2, r3
 800958a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958c:	fb02 f303 	mul.w	r3, r2, r3
 8009590:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009598:	b29a      	uxth	r2, r3
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	895b      	ldrh	r3, [r3, #10]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d008      	beq.n	80095b8 <find_volume+0x26c>
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	895b      	ldrh	r3, [r3, #10]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	895b      	ldrh	r3, [r3, #10]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4013      	ands	r3, r2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <find_volume+0x270>
 80095b8:	230d      	movs	r3, #13
 80095ba:	e140      	b.n	800983e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	3338      	adds	r3, #56	; 0x38
 80095c0:	3311      	adds	r3, #17
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe f844 	bl	8007650 <ld_word>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461a      	mov	r2, r3
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	891b      	ldrh	r3, [r3, #8]
 80095d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095d6:	8992      	ldrh	r2, [r2, #12]
 80095d8:	0952      	lsrs	r2, r2, #5
 80095da:	b292      	uxth	r2, r2
 80095dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80095e0:	fb01 f202 	mul.w	r2, r1, r2
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <find_volume+0x2a8>
 80095ec:	230d      	movs	r3, #13
 80095ee:	e126      	b.n	800983e <find_volume+0x4f2>
 80095f0:	20002478 	.word	0x20002478

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	3338      	adds	r3, #56	; 0x38
 80095f8:	3313      	adds	r3, #19
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe f828 	bl	8007650 <ld_word>
 8009600:	4603      	mov	r3, r0
 8009602:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <find_volume+0x2cc>
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	3338      	adds	r3, #56	; 0x38
 800960e:	3320      	adds	r3, #32
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe f835 	bl	8007680 <ld_dword>
 8009616:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	3338      	adds	r3, #56	; 0x38
 800961c:	330e      	adds	r3, #14
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe f816 	bl	8007650 <ld_word>
 8009624:	4603      	mov	r3, r0
 8009626:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <find_volume+0x2e6>
 800962e:	230d      	movs	r3, #13
 8009630:	e105      	b.n	800983e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009632:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009636:	4413      	add	r3, r2
 8009638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800963a:	8911      	ldrh	r1, [r2, #8]
 800963c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800963e:	8992      	ldrh	r2, [r2, #12]
 8009640:	0952      	lsrs	r2, r2, #5
 8009642:	b292      	uxth	r2, r2
 8009644:	fbb1 f2f2 	udiv	r2, r1, r2
 8009648:	b292      	uxth	r2, r2
 800964a:	4413      	add	r3, r2
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800964e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	429a      	cmp	r2, r3
 8009654:	d201      	bcs.n	800965a <find_volume+0x30e>
 8009656:	230d      	movs	r3, #13
 8009658:	e0f1      	b.n	800983e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800965a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009662:	8952      	ldrh	r2, [r2, #10]
 8009664:	fbb3 f3f2 	udiv	r3, r3, r2
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <find_volume+0x328>
 8009670:	230d      	movs	r3, #13
 8009672:	e0e4      	b.n	800983e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009674:	2303      	movs	r3, #3
 8009676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009680:	4293      	cmp	r3, r2
 8009682:	d802      	bhi.n	800968a <find_volume+0x33e>
 8009684:	2302      	movs	r3, #2
 8009686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009690:	4293      	cmp	r3, r2
 8009692:	d802      	bhi.n	800969a <find_volume+0x34e>
 8009694:	2301      	movs	r3, #1
 8009696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	1c9a      	adds	r2, r3, #2
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096a6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80096a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ac:	441a      	add	r2, r3
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80096b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	441a      	add	r2, r3
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80096bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d11e      	bne.n	8009702 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	3338      	adds	r3, #56	; 0x38
 80096c8:	332a      	adds	r3, #42	; 0x2a
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fd ffc0 	bl	8007650 <ld_word>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <find_volume+0x38e>
 80096d6:	230d      	movs	r3, #13
 80096d8:	e0b1      	b.n	800983e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	891b      	ldrh	r3, [r3, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <find_volume+0x39a>
 80096e2:	230d      	movs	r3, #13
 80096e4:	e0ab      	b.n	800983e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	3338      	adds	r3, #56	; 0x38
 80096ea:	332c      	adds	r3, #44	; 0x2c
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fd ffc7 	bl	8007680 <ld_dword>
 80096f2:	4602      	mov	r2, r0
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009700:	e01f      	b.n	8009742 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009704:	891b      	ldrh	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <find_volume+0x3c2>
 800970a:	230d      	movs	r3, #13
 800970c:	e097      	b.n	800983e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009714:	441a      	add	r2, r3
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800971a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800971e:	2b02      	cmp	r3, #2
 8009720:	d103      	bne.n	800972a <find_volume+0x3de>
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	e00a      	b.n	8009740 <find_volume+0x3f4>
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	69da      	ldr	r2, [r3, #28]
 800972e:	4613      	mov	r3, r2
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	4413      	add	r3, r2
 8009734:	085a      	lsrs	r2, r3, #1
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009740:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	6a1a      	ldr	r2, [r3, #32]
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	899b      	ldrh	r3, [r3, #12]
 800974a:	4619      	mov	r1, r3
 800974c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800974e:	440b      	add	r3, r1
 8009750:	3b01      	subs	r3, #1
 8009752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009754:	8989      	ldrh	r1, [r1, #12]
 8009756:	fbb3 f3f1 	udiv	r3, r3, r1
 800975a:	429a      	cmp	r2, r3
 800975c:	d201      	bcs.n	8009762 <find_volume+0x416>
 800975e:	230d      	movs	r3, #13
 8009760:	e06d      	b.n	800983e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	619a      	str	r2, [r3, #24]
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	2280      	movs	r2, #128	; 0x80
 8009776:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800977c:	2b03      	cmp	r3, #3
 800977e:	d149      	bne.n	8009814 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	3338      	adds	r3, #56	; 0x38
 8009784:	3330      	adds	r3, #48	; 0x30
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd ff62 	bl	8007650 <ld_word>
 800978c:	4603      	mov	r3, r0
 800978e:	2b01      	cmp	r3, #1
 8009790:	d140      	bne.n	8009814 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009794:	3301      	adds	r3, #1
 8009796:	4619      	mov	r1, r3
 8009798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800979a:	f7fe fa09 	bl	8007bb0 <move_window>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d137      	bne.n	8009814 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2200      	movs	r2, #0
 80097a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	3338      	adds	r3, #56	; 0x38
 80097ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fd ff4c 	bl	8007650 <ld_word>
 80097b8:	4603      	mov	r3, r0
 80097ba:	461a      	mov	r2, r3
 80097bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d127      	bne.n	8009814 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	3338      	adds	r3, #56	; 0x38
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fd ff59 	bl	8007680 <ld_dword>
 80097ce:	4603      	mov	r3, r0
 80097d0:	4a1d      	ldr	r2, [pc, #116]	; (8009848 <find_volume+0x4fc>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d11e      	bne.n	8009814 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	3338      	adds	r3, #56	; 0x38
 80097da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fd ff4e 	bl	8007680 <ld_dword>
 80097e4:	4603      	mov	r3, r0
 80097e6:	4a19      	ldr	r2, [pc, #100]	; (800984c <find_volume+0x500>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d113      	bne.n	8009814 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	3338      	adds	r3, #56	; 0x38
 80097f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fd ff43 	bl	8007680 <ld_dword>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	3338      	adds	r3, #56	; 0x38
 8009804:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009808:	4618      	mov	r0, r3
 800980a:	f7fd ff39 	bl	8007680 <ld_dword>
 800980e:	4602      	mov	r2, r0
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800981a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800981c:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <find_volume+0x504>)
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	3301      	adds	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <find_volume+0x504>)
 8009826:	801a      	strh	r2, [r3, #0]
 8009828:	4b09      	ldr	r3, [pc, #36]	; (8009850 <find_volume+0x504>)
 800982a:	881a      	ldrh	r2, [r3, #0]
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	4a08      	ldr	r2, [pc, #32]	; (8009854 <find_volume+0x508>)
 8009834:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009836:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009838:	f7fe f952 	bl	8007ae0 <clear_lock>
#endif
	return FR_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3758      	adds	r7, #88	; 0x58
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	41615252 	.word	0x41615252
 800984c:	61417272 	.word	0x61417272
 8009850:	2000247c 	.word	0x2000247c
 8009854:	200024a0 	.word	0x200024a0

08009858 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009862:	2309      	movs	r3, #9
 8009864:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01c      	beq.n	80098a6 <validate+0x4e>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d018      	beq.n	80098a6 <validate+0x4e>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d013      	beq.n	80098a6 <validate+0x4e>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	889a      	ldrh	r2, [r3, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	88db      	ldrh	r3, [r3, #6]
 8009888:	429a      	cmp	r2, r3
 800988a:	d10c      	bne.n	80098a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	4618      	mov	r0, r3
 8009894:	f7fd fe3e 	bl	8007514 <disk_status>
 8009898:	4603      	mov	r3, r0
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <validate+0x4e>
			res = FR_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <validate+0x5a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	e000      	b.n	80098b4 <validate+0x5c>
 80098b2:	2300      	movs	r3, #0
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	6013      	str	r3, [r2, #0]
	return res;
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	4613      	mov	r3, r2
 80098d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80098d6:	f107 0310 	add.w	r3, r7, #16
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff fc9c 	bl	8009218 <get_ldnumber>
 80098e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da01      	bge.n	80098ec <f_mount+0x28>
 80098e8:	230b      	movs	r3, #11
 80098ea:	e02b      	b.n	8009944 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80098ec:	4a17      	ldr	r2, [pc, #92]	; (800994c <f_mount+0x88>)
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80098fc:	69b8      	ldr	r0, [r7, #24]
 80098fe:	f7fe f8ef 	bl	8007ae0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	490d      	ldr	r1, [pc, #52]	; (800994c <f_mount+0x88>)
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <f_mount+0x66>
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d001      	beq.n	800992e <f_mount+0x6a>
 800992a:	2300      	movs	r3, #0
 800992c:	e00a      	b.n	8009944 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800992e:	f107 010c 	add.w	r1, r7, #12
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	2200      	movs	r2, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fd07 	bl	800934c <find_volume>
 800993e:	4603      	mov	r3, r0
 8009940:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009942:	7dfb      	ldrb	r3, [r7, #23]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3720      	adds	r7, #32
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20002478 	.word	0x20002478

08009950 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b09a      	sub	sp, #104	; 0x68
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <f_open+0x18>
 8009964:	2309      	movs	r3, #9
 8009966:	e1bb      	b.n	8009ce0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800996e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009970:	79fa      	ldrb	r2, [r7, #7]
 8009972:	f107 0114 	add.w	r1, r7, #20
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff fce6 	bl	800934c <find_volume>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009986:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800998a:	2b00      	cmp	r3, #0
 800998c:	f040 819f 	bne.w	8009cce <f_open+0x37e>
		dj.obj.fs = fs;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	f107 0318 	add.w	r3, r7, #24
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fbc5 	bl	800912c <follow_path>
 80099a2:	4603      	mov	r3, r0
 80099a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80099a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11a      	bne.n	80099e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80099b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099b4:	b25b      	sxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	da03      	bge.n	80099c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80099ba:	2306      	movs	r3, #6
 80099bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80099c0:	e011      	b.n	80099e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bf14      	ite	ne
 80099cc:	2301      	movne	r3, #1
 80099ce:	2300      	moveq	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	f107 0318 	add.w	r3, r7, #24
 80099d8:	4611      	mov	r1, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fd ff38 	bl	8007850 <chk_lock>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	f003 031c 	and.w	r3, r3, #28
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d07f      	beq.n	8009af0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80099f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d017      	beq.n	8009a28 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80099f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d10e      	bne.n	8009a1e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a00:	f7fd ff82 	bl	8007908 <enq_lock>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <f_open+0xc8>
 8009a0a:	f107 0318 	add.w	r3, r7, #24
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff f8dc 	bl	8008bcc <dir_register>
 8009a14:	4603      	mov	r3, r0
 8009a16:	e000      	b.n	8009a1a <f_open+0xca>
 8009a18:	2312      	movs	r3, #18
 8009a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	f043 0308 	orr.w	r3, r3, #8
 8009a24:	71fb      	strb	r3, [r7, #7]
 8009a26:	e010      	b.n	8009a4a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a28:	7fbb      	ldrb	r3, [r7, #30]
 8009a2a:	f003 0311 	and.w	r3, r3, #17
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <f_open+0xea>
					res = FR_DENIED;
 8009a32:	2307      	movs	r3, #7
 8009a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a38:	e007      	b.n	8009a4a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <f_open+0xfa>
 8009a44:	2308      	movs	r3, #8
 8009a46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d168      	bne.n	8009b24 <f_open+0x1d4>
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d063      	beq.n	8009b24 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a5c:	f7fd faa0 	bl	8006fa0 <get_fattime>
 8009a60:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	330e      	adds	r3, #14
 8009a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fd fe47 	bl	80076fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	3316      	adds	r3, #22
 8009a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fd fe41 	bl	80076fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7c:	330b      	adds	r3, #11
 8009a7e:	2220      	movs	r2, #32
 8009a80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe fe17 	bl	80086bc <ld_clust>
 8009a8e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a94:	2200      	movs	r2, #0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fe2f 	bl	80086fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	331c      	adds	r3, #28
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fd fe2a 	bl	80076fc <st_dword>
					fs->wflag = 1;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d037      	beq.n	8009b24 <f_open+0x1d4>
						dw = fs->winsect;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009aba:	f107 0318 	add.w	r3, r7, #24
 8009abe:	2200      	movs	r2, #0
 8009ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fb1f 	bl	8008106 <remove_chain>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d126      	bne.n	8009b24 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe f868 	bl	8007bb0 <move_window>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aea:	3a01      	subs	r2, #1
 8009aec:	615a      	str	r2, [r3, #20]
 8009aee:	e019      	b.n	8009b24 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009af0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d115      	bne.n	8009b24 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009af8:	7fbb      	ldrb	r3, [r7, #30]
 8009afa:	f003 0310 	and.w	r3, r3, #16
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009b02:	2304      	movs	r3, #4
 8009b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009b08:	e00c      	b.n	8009b24 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d007      	beq.n	8009b24 <f_open+0x1d4>
 8009b14:	7fbb      	ldrb	r3, [r7, #30]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <f_open+0x1d4>
						res = FR_DENIED;
 8009b1e:	2307      	movs	r3, #7
 8009b20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009b24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d128      	bne.n	8009b7e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	f023 0301 	bic.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bf14      	ite	ne
 8009b56:	2301      	movne	r3, #1
 8009b58:	2300      	moveq	r3, #0
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f107 0318 	add.w	r3, r7, #24
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fd fef1 	bl	800794c <inc_lock>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <f_open+0x22e>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f040 80a3 	bne.w	8009cce <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fd94 	bl	80086bc <ld_clust>
 8009b94:	4602      	mov	r2, r0
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	331c      	adds	r3, #28
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd fd6e 	bl	8007680 <ld_dword>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	88da      	ldrh	r2, [r3, #6]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	79fa      	ldrb	r2, [r7, #7]
 8009bc2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3330      	adds	r3, #48	; 0x30
 8009bda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fd fdd8 	bl	8007796 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d06e      	beq.n	8009cce <f_open+0x37e>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d06a      	beq.n	8009cce <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	895b      	ldrh	r3, [r3, #10]
 8009c04:	461a      	mov	r2, r3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	899b      	ldrh	r3, [r3, #12]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
 8009c0e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c1c:	e016      	b.n	8009c4c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe f881 	bl	8007d2a <get_fat>
 8009c28:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d802      	bhi.n	8009c36 <f_open+0x2e6>
 8009c30:	2302      	movs	r3, #2
 8009c32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d102      	bne.n	8009c44 <f_open+0x2f4>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <f_open+0x30c>
 8009c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d8e0      	bhi.n	8009c1e <f_open+0x2ce>
				}
				fp->clust = clst;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d131      	bne.n	8009cce <f_open+0x37e>
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	899b      	ldrh	r3, [r3, #12]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c76:	fb01 f202 	mul.w	r2, r1, r2
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d026      	beq.n	8009cce <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe f831 	bl	8007cec <clust2sect>
 8009c8a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d103      	bne.n	8009c9a <f_open+0x34a>
						res = FR_INT_ERR;
 8009c92:	2302      	movs	r3, #2
 8009c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009c98:	e019      	b.n	8009cce <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	899b      	ldrh	r3, [r3, #12]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca8:	441a      	add	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	7858      	ldrb	r0, [r3, #1]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6a1a      	ldr	r2, [r3, #32]
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f7fd fc69 	bl	8007594 <disk_read>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <f_open+0x37e>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009cce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <f_open+0x38c>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3768      	adds	r7, #104	; 0x68
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08c      	sub	sp, #48	; 0x30
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f107 0210 	add.w	r2, r7, #16
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff fda5 	bl	8009858 <validate>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d107      	bne.n	8009d2c <f_write+0x44>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	7d5b      	ldrb	r3, [r3, #21]
 8009d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <f_write+0x4a>
 8009d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d30:	e16a      	b.n	800a008 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	7d1b      	ldrb	r3, [r3, #20]
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <f_write+0x5a>
 8009d3e:	2307      	movs	r3, #7
 8009d40:	e162      	b.n	800a008 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	441a      	add	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	f080 814c 	bcs.w	8009fec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	43db      	mvns	r3, r3
 8009d5a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d5c:	e146      	b.n	8009fec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	8992      	ldrh	r2, [r2, #12]
 8009d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d6a:	fb01 f202 	mul.w	r2, r1, r2
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f040 80f1 	bne.w	8009f58 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	8992      	ldrh	r2, [r2, #12]
 8009d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	8952      	ldrh	r2, [r2, #10]
 8009d86:	3a01      	subs	r2, #1
 8009d88:	4013      	ands	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d143      	bne.n	8009e1a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10c      	bne.n	8009db4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11a      	bne.n	8009ddc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fa10 	bl	80081d0 <create_chain>
 8009db0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009db2:	e013      	b.n	8009ddc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d007      	beq.n	8009dcc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7fe fa9c 	bl	8008300 <clmt_clust>
 8009dc8:	62b8      	str	r0, [r7, #40]	; 0x28
 8009dca:	e007      	b.n	8009ddc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7fe f9fb 	bl	80081d0 <create_chain>
 8009dda:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 8109 	beq.w	8009ff6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d104      	bne.n	8009df4 <f_write+0x10c>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2202      	movs	r2, #2
 8009dee:	755a      	strb	r2, [r3, #21]
 8009df0:	2302      	movs	r3, #2
 8009df2:	e109      	b.n	800a008 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfa:	d104      	bne.n	8009e06 <f_write+0x11e>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	755a      	strb	r2, [r3, #21]
 8009e02:	2301      	movs	r3, #1
 8009e04:	e100      	b.n	800a008 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e0a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d102      	bne.n	8009e1a <f_write+0x132>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	7d1b      	ldrb	r3, [r3, #20]
 8009e1e:	b25b      	sxtb	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	da18      	bge.n	8009e56 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	7858      	ldrb	r0, [r3, #1]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1a      	ldr	r2, [r3, #32]
 8009e32:	2301      	movs	r3, #1
 8009e34:	f7fd fbce 	bl	80075d4 <disk_write>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <f_write+0x160>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	755a      	strb	r2, [r3, #21]
 8009e44:	2301      	movs	r3, #1
 8009e46:	e0df      	b.n	800a008 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	7d1b      	ldrb	r3, [r3, #20]
 8009e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7fd ff44 	bl	8007cec <clust2sect>
 8009e64:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d104      	bne.n	8009e76 <f_write+0x18e>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	755a      	strb	r2, [r3, #21]
 8009e72:	2302      	movs	r3, #2
 8009e74:	e0c8      	b.n	800a008 <f_write+0x320>
			sect += csect;
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	899b      	ldrh	r3, [r3, #12]
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e8a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d043      	beq.n	8009f1a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	4413      	add	r3, r2
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	8952      	ldrh	r2, [r2, #10]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d905      	bls.n	8009eac <f_write+0x1c4>
					cc = fs->csize - csect;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	895b      	ldrh	r3, [r3, #10]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	7858      	ldrb	r0, [r3, #1]
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	69f9      	ldr	r1, [r7, #28]
 8009eb6:	f7fd fb8d 	bl	80075d4 <disk_write>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <f_write+0x1e2>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	755a      	strb	r2, [r3, #21]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e09e      	b.n	800a008 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a1a      	ldr	r2, [r3, #32]
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	6a3a      	ldr	r2, [r7, #32]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d918      	bls.n	8009f0a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a1a      	ldr	r2, [r3, #32]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	8992      	ldrh	r2, [r2, #12]
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
 8009eee:	69fa      	ldr	r2, [r7, #28]
 8009ef0:	18d1      	adds	r1, r2, r3
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	899b      	ldrh	r3, [r3, #12]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7fd fc2c 	bl	8007754 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	7d1b      	ldrb	r3, [r3, #20]
 8009f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	899b      	ldrh	r3, [r3, #12]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	fb02 f303 	mul.w	r3, r2, r3
 8009f16:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009f18:	e04b      	b.n	8009fb2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d016      	beq.n	8009f52 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d210      	bcs.n	8009f52 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	7858      	ldrb	r0, [r3, #1]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	f7fd fb29 	bl	8007594 <disk_read>
 8009f42:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	755a      	strb	r2, [r3, #21]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e05a      	b.n	800a008 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	899b      	ldrh	r3, [r3, #12]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	8992      	ldrh	r2, [r2, #12]
 8009f66:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f6a:	fb01 f202 	mul.w	r2, r1, r2
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	1ac3      	subs	r3, r0, r3
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d901      	bls.n	8009f80 <f_write+0x298>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	8992      	ldrh	r2, [r2, #12]
 8009f8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f92:	fb00 f202 	mul.w	r2, r0, r2
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	440b      	add	r3, r1
 8009f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9c:	69f9      	ldr	r1, [r7, #28]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fd fbd8 	bl	8007754 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	7d1b      	ldrb	r3, [r3, #20]
 8009fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	4413      	add	r3, r2
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	699a      	ldr	r2, [r3, #24]
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	619a      	str	r2, [r3, #24]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	bf38      	it	cc
 8009fd2:	461a      	movcc	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	60da      	str	r2, [r3, #12]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	441a      	add	r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f47f aeb5 	bne.w	8009d5e <f_write+0x76>
 8009ff4:	e000      	b.n	8009ff8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ff6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	7d1b      	ldrb	r3, [r3, #20]
 8009ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a000:	b2da      	uxtb	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3730      	adds	r7, #48	; 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f107 0208 	add.w	r2, r7, #8
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff fc19 	bl	8009858 <validate>
 800a026:	4603      	mov	r3, r0
 800a028:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d168      	bne.n	800a102 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7d1b      	ldrb	r3, [r3, #20]
 800a034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d062      	beq.n	800a102 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	7d1b      	ldrb	r3, [r3, #20]
 800a040:	b25b      	sxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	da15      	bge.n	800a072 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	7858      	ldrb	r0, [r3, #1]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1a      	ldr	r2, [r3, #32]
 800a054:	2301      	movs	r3, #1
 800a056:	f7fd fabd 	bl	80075d4 <disk_write>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <f_sync+0x54>
 800a060:	2301      	movs	r3, #1
 800a062:	e04f      	b.n	800a104 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7d1b      	ldrb	r3, [r3, #20]
 800a068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a072:	f7fc ff95 	bl	8006fa0 <get_fattime>
 800a076:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fd fd95 	bl	8007bb0 <move_window>
 800a086:	4603      	mov	r3, r0
 800a088:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d138      	bne.n	800a102 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a094:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	330b      	adds	r3, #11
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	330b      	adds	r3, #11
 800a0a0:	f042 0220 	orr.w	r2, r2, #32
 800a0a4:	b2d2      	uxtb	r2, r2
 800a0a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	f7fe fb21 	bl	80086fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f103 021c 	add.w	r2, r3, #28
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7fd fb19 	bl	80076fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3316      	adds	r3, #22
 800a0ce:	6939      	ldr	r1, [r7, #16]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd fb13 	bl	80076fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3312      	adds	r3, #18
 800a0da:	2100      	movs	r1, #0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fd faf2 	bl	80076c6 <st_word>
					fs->wflag = 1;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fd fd8e 	bl	8007c0c <sync_fs>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	7d1b      	ldrb	r3, [r3, #20]
 800a0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a102:	7dfb      	ldrb	r3, [r7, #23]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ff7b 	bl	800a010 <f_sync>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d118      	bne.n	800a156 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f107 0208 	add.w	r2, r7, #8
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7ff fb93 	bl	8009858 <validate>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10c      	bne.n	800a156 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	4618      	mov	r0, r3
 800a142:	f7fd fc91 	bl	8007a68 <dec_lock>
 800a146:	4603      	mov	r3, r0
 800a148:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b090      	sub	sp, #64	; 0x40
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f107 0208 	add.w	r2, r7, #8
 800a170:	4611      	mov	r1, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fb70 	bl	8009858 <validate>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a17e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <f_lseek+0x2e>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	7d5b      	ldrb	r3, [r3, #21]
 800a18a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a18e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <f_lseek+0x3c>
 800a196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a19a:	e201      	b.n	800a5a0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80d9 	beq.w	800a358 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d15a      	bne.n	800a264 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	1d1a      	adds	r2, r3, #4
 800a1b8:	627a      	str	r2, [r7, #36]	; 0x24
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	617b      	str	r3, [r7, #20]
 800a1be:	2302      	movs	r3, #2
 800a1c0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d03a      	beq.n	800a244 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	613b      	str	r3, [r7, #16]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	3302      	adds	r3, #2
 800a1da:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fd fd9d 	bl	8007d2a <get_fat>
 800a1f0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d804      	bhi.n	800a202 <f_lseek+0xa2>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	755a      	strb	r2, [r3, #21]
 800a1fe:	2302      	movs	r3, #2
 800a200:	e1ce      	b.n	800a5a0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d104      	bne.n	800a214 <f_lseek+0xb4>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	755a      	strb	r2, [r3, #21]
 800a210:	2301      	movs	r3, #1
 800a212:	e1c5      	b.n	800a5a0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3301      	adds	r3, #1
 800a218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d0de      	beq.n	800a1dc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	429a      	cmp	r2, r3
 800a224:	d809      	bhi.n	800a23a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	1d1a      	adds	r2, r3, #4
 800a22a:	627a      	str	r2, [r7, #36]	; 0x24
 800a22c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a22e:	601a      	str	r2, [r3, #0]
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	1d1a      	adds	r2, r3, #4
 800a234:	627a      	str	r2, [r7, #36]	; 0x24
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a240:	429a      	cmp	r2, r3
 800a242:	d3c4      	bcc.n	800a1ce <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	429a      	cmp	r2, r3
 800a252:	d803      	bhi.n	800a25c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	e19f      	b.n	800a59c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a25c:	2311      	movs	r3, #17
 800a25e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a262:	e19b      	b.n	800a59c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d902      	bls.n	800a274 <f_lseek+0x114>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 818d 	beq.w	800a59c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	3b01      	subs	r3, #1
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7fe f839 	bl	8008300 <clmt_clust>
 800a28e:	4602      	mov	r2, r0
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fd fd25 	bl	8007cec <clust2sect>
 800a2a2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d104      	bne.n	800a2b4 <f_lseek+0x154>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	755a      	strb	r2, [r3, #21]
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e175      	b.n	800a5a0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	8992      	ldrh	r2, [r2, #12]
 800a2bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	8952      	ldrh	r2, [r2, #10]
 800a2c4:	3a01      	subs	r2, #1
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	8992      	ldrh	r2, [r2, #12]
 800a2d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2da:	fb01 f202 	mul.w	r2, r1, r2
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 815b 	beq.w	800a59c <f_lseek+0x43c>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	f000 8155 	beq.w	800a59c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7d1b      	ldrb	r3, [r3, #20]
 800a2f6:	b25b      	sxtb	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da18      	bge.n	800a32e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	7858      	ldrb	r0, [r3, #1]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1a      	ldr	r2, [r3, #32]
 800a30a:	2301      	movs	r3, #1
 800a30c:	f7fd f962 	bl	80075d4 <disk_write>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <f_lseek+0x1c0>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	755a      	strb	r2, [r3, #21]
 800a31c:	2301      	movs	r3, #1
 800a31e:	e13f      	b.n	800a5a0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7d1b      	ldrb	r3, [r3, #20]
 800a324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	7858      	ldrb	r0, [r3, #1]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a338:	2301      	movs	r3, #1
 800a33a:	69ba      	ldr	r2, [r7, #24]
 800a33c:	f7fd f92a 	bl	8007594 <disk_read>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <f_lseek+0x1f0>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	755a      	strb	r2, [r3, #21]
 800a34c:	2301      	movs	r3, #1
 800a34e:	e127      	b.n	800a5a0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	621a      	str	r2, [r3, #32]
 800a356:	e121      	b.n	800a59c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d908      	bls.n	800a374 <f_lseek+0x214>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	7d1b      	ldrb	r3, [r3, #20]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	637b      	str	r3, [r7, #52]	; 0x34
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a382:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 80b5 	beq.w	800a4f6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	895b      	ldrh	r3, [r3, #10]
 800a390:	461a      	mov	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	899b      	ldrh	r3, [r3, #12]
 800a396:	fb02 f303 	mul.w	r3, r2, r3
 800a39a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01b      	beq.n	800a3da <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	1e5a      	subs	r2, r3, #1
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	1e59      	subs	r1, r3, #1
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d30f      	bcc.n	800a3da <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	1e5a      	subs	r2, r3, #1
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	425b      	negs	r3, r3
 800a3c2:	401a      	ands	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3d8:	e022      	b.n	800a420 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d119      	bne.n	800a41a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fd fef0 	bl	80081d0 <create_chain>
 800a3f0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d104      	bne.n	800a402 <f_lseek+0x2a2>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	755a      	strb	r2, [r3, #21]
 800a3fe:	2302      	movs	r3, #2
 800a400:	e0ce      	b.n	800a5a0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a408:	d104      	bne.n	800a414 <f_lseek+0x2b4>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	755a      	strb	r2, [r3, #21]
 800a410:	2301      	movs	r3, #1
 800a412:	e0c5      	b.n	800a5a0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a418:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a41e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	2b00      	cmp	r3, #0
 800a424:	d067      	beq.n	800a4f6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a426:	e03a      	b.n	800a49e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	603b      	str	r3, [r7, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699a      	ldr	r2, [r3, #24]
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	441a      	add	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	7d1b      	ldrb	r3, [r3, #20]
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00b      	beq.n	800a460 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fd febf 	bl	80081d0 <create_chain>
 800a452:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	2b00      	cmp	r3, #0
 800a458:	d108      	bne.n	800a46c <f_lseek+0x30c>
							ofs = 0; break;
 800a45a:	2300      	movs	r3, #0
 800a45c:	603b      	str	r3, [r7, #0]
 800a45e:	e022      	b.n	800a4a6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd fc60 	bl	8007d2a <get_fat>
 800a46a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a472:	d104      	bne.n	800a47e <f_lseek+0x31e>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	755a      	strb	r2, [r3, #21]
 800a47a:	2301      	movs	r3, #1
 800a47c:	e090      	b.n	800a5a0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	2b01      	cmp	r3, #1
 800a482:	d904      	bls.n	800a48e <f_lseek+0x32e>
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	69db      	ldr	r3, [r3, #28]
 800a488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d304      	bcc.n	800a498 <f_lseek+0x338>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	755a      	strb	r2, [r3, #21]
 800a494:	2302      	movs	r3, #2
 800a496:	e083      	b.n	800a5a0 <f_lseek+0x440>
					fp->clust = clst;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a49c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d8c0      	bhi.n	800a428 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699a      	ldr	r2, [r3, #24]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	441a      	add	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	899b      	ldrh	r3, [r3, #12]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4be:	fb01 f202 	mul.w	r2, r1, r2
 800a4c2:	1a9b      	subs	r3, r3, r2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d016      	beq.n	800a4f6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fd fc0d 	bl	8007cec <clust2sect>
 800a4d2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <f_lseek+0x384>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	755a      	strb	r2, [r3, #21]
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e05d      	b.n	800a5a0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	899b      	ldrh	r3, [r3, #12]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f2:	4413      	add	r3, r2
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d90a      	bls.n	800a518 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	699a      	ldr	r2, [r3, #24]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	8992      	ldrh	r2, [r2, #12]
 800a520:	fbb3 f1f2 	udiv	r1, r3, r2
 800a524:	fb01 f202 	mul.w	r2, r1, r2
 800a528:	1a9b      	subs	r3, r3, r2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d036      	beq.n	800a59c <f_lseek+0x43c>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a534:	429a      	cmp	r2, r3
 800a536:	d031      	beq.n	800a59c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7d1b      	ldrb	r3, [r3, #20]
 800a53c:	b25b      	sxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	da18      	bge.n	800a574 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	7858      	ldrb	r0, [r3, #1]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a1a      	ldr	r2, [r3, #32]
 800a550:	2301      	movs	r3, #1
 800a552:	f7fd f83f 	bl	80075d4 <disk_write>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <f_lseek+0x406>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	755a      	strb	r2, [r3, #21]
 800a562:	2301      	movs	r3, #1
 800a564:	e01c      	b.n	800a5a0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7d1b      	ldrb	r3, [r3, #20]
 800a56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	7858      	ldrb	r0, [r3, #1]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a57e:	2301      	movs	r3, #1
 800a580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a582:	f7fd f807 	bl	8007594 <disk_read>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <f_lseek+0x436>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	755a      	strb	r2, [r3, #21]
 800a592:	2301      	movs	r3, #1
 800a594:	e004      	b.n	800a5a0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a59a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a59c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3740      	adds	r7, #64	; 0x40
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	2b0a      	cmp	r3, #10
 800a5b8:	d103      	bne.n	800a5c2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a5ba:	210d      	movs	r1, #13
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fff3 	bl	800a5a8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	db25      	blt.n	800a61a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	60fa      	str	r2, [r7, #12]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	78fa      	ldrb	r2, [r7, #3]
 800a5da:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b3c      	cmp	r3, #60	; 0x3c
 800a5e0:	dd12      	ble.n	800a608 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f103 010c 	add.w	r1, r3, #12
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f107 0308 	add.w	r3, r7, #8
 800a5f2:	f7ff fb79 	bl	8009ce8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d101      	bne.n	800a602 <putc_bfd+0x5a>
 800a5fe:	2300      	movs	r3, #0
 800a600:	e001      	b.n	800a606 <putc_bfd+0x5e>
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	609a      	str	r2, [r3, #8]
 800a618:	e000      	b.n	800a61c <putc_bfd+0x74>
	if (i < 0) return;
 800a61a:	bf00      	nop
}
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	db16      	blt.n	800a660 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f103 010c 	add.w	r1, r3, #12
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	461a      	mov	r2, r3
 800a642:	f107 030c 	add.w	r3, r7, #12
 800a646:	f7ff fb4f 	bl	8009ce8 <f_write>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d107      	bne.n	800a660 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4293      	cmp	r3, r2
 800a658:	d102      	bne.n	800a660 <putc_flush+0x3e>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	e001      	b.n	800a664 <putc_flush+0x42>
	return EOF;
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	609a      	str	r2, [r3, #8]
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a698:	b40e      	push	{r1, r2, r3}
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b0a7      	sub	sp, #156	; 0x9c
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a6a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ffdf 	bl	800a66c <putc_init>

	va_start(arp, fmt);
 800a6ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a6b2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a6b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a6c4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 81f2 	beq.w	800aab2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800a6ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6d2:	2b25      	cmp	r3, #37	; 0x25
 800a6d4:	d008      	beq.n	800a6e8 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a6d6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a6da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff ff61 	bl	800a5a8 <putc_bfd>
			continue;
 800a6e6:	e1e3      	b.n	800aab0 <f_printf+0x418>
		}
		w = f = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a6f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a704:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a708:	2b30      	cmp	r3, #48	; 0x30
 800a70a:	d10b      	bne.n	800a724 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a722:	e024      	b.n	800a76e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a724:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a728:	2b2d      	cmp	r3, #45	; 0x2d
 800a72a:	d120      	bne.n	800a76e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a72c:	2302      	movs	r3, #2
 800a72e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a742:	e014      	b.n	800a76e <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a744:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a748:	4613      	mov	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	461a      	mov	r2, r3
 800a752:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a756:	4413      	add	r3, r2
 800a758:	3b30      	subs	r3, #48	; 0x30
 800a75a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a75e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a76e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a772:	2b2f      	cmp	r3, #47	; 0x2f
 800a774:	d903      	bls.n	800a77e <f_printf+0xe6>
 800a776:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a77a:	2b39      	cmp	r3, #57	; 0x39
 800a77c:	d9e2      	bls.n	800a744 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a77e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a782:	2b6c      	cmp	r3, #108	; 0x6c
 800a784:	d003      	beq.n	800a78e <f_printf+0xf6>
 800a786:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a78a:	2b4c      	cmp	r3, #76	; 0x4c
 800a78c:	d10d      	bne.n	800a7aa <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a78e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a792:	f043 0304 	orr.w	r3, r3, #4
 800a796:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a79a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a7aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 8181 	beq.w	800aab6 <f_printf+0x41e>
		d = c;
 800a7b4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a7b8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a7bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a7c0:	2b60      	cmp	r3, #96	; 0x60
 800a7c2:	d908      	bls.n	800a7d6 <f_printf+0x13e>
 800a7c4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a7c8:	2b7a      	cmp	r3, #122	; 0x7a
 800a7ca:	d804      	bhi.n	800a7d6 <f_printf+0x13e>
 800a7cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a7d0:	3b20      	subs	r3, #32
 800a7d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a7d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a7da:	3b42      	subs	r3, #66	; 0x42
 800a7dc:	2b16      	cmp	r3, #22
 800a7de:	f200 8098 	bhi.w	800a912 <f_printf+0x27a>
 800a7e2:	a201      	add	r2, pc, #4	; (adr r2, 800a7e8 <f_printf+0x150>)
 800a7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e8:	0800a8f3 	.word	0x0800a8f3
 800a7ec:	0800a8db 	.word	0x0800a8db
 800a7f0:	0800a903 	.word	0x0800a903
 800a7f4:	0800a913 	.word	0x0800a913
 800a7f8:	0800a913 	.word	0x0800a913
 800a7fc:	0800a913 	.word	0x0800a913
 800a800:	0800a913 	.word	0x0800a913
 800a804:	0800a913 	.word	0x0800a913
 800a808:	0800a913 	.word	0x0800a913
 800a80c:	0800a913 	.word	0x0800a913
 800a810:	0800a913 	.word	0x0800a913
 800a814:	0800a913 	.word	0x0800a913
 800a818:	0800a913 	.word	0x0800a913
 800a81c:	0800a8fb 	.word	0x0800a8fb
 800a820:	0800a913 	.word	0x0800a913
 800a824:	0800a913 	.word	0x0800a913
 800a828:	0800a913 	.word	0x0800a913
 800a82c:	0800a845 	.word	0x0800a845
 800a830:	0800a913 	.word	0x0800a913
 800a834:	0800a903 	.word	0x0800a903
 800a838:	0800a913 	.word	0x0800a913
 800a83c:	0800a913 	.word	0x0800a913
 800a840:	0800a90b 	.word	0x0800a90b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a846:	1d1a      	adds	r2, r3, #4
 800a848:	67ba      	str	r2, [r7, #120]	; 0x78
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a84e:	2300      	movs	r3, #0
 800a850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a854:	e004      	b.n	800a860 <f_printf+0x1c8>
 800a856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a85a:	3301      	adds	r3, #1
 800a85c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a860:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a866:	4413      	add	r3, r2
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1f3      	bne.n	800a856 <f_printf+0x1be>
			if (!(f & 2)) {
 800a86e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a872:	f003 0302 	and.w	r3, r3, #2
 800a876:	2b00      	cmp	r3, #0
 800a878:	d11a      	bne.n	800a8b0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a87a:	e005      	b.n	800a888 <f_printf+0x1f0>
 800a87c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a880:	2120      	movs	r1, #32
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fe90 	bl	800a5a8 <putc_bfd>
 800a888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a892:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a896:	429a      	cmp	r2, r3
 800a898:	d8f0      	bhi.n	800a87c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a89a:	e009      	b.n	800a8b0 <f_printf+0x218>
 800a89c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fe7c 	bl	800a5a8 <putc_bfd>
 800a8b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f1      	bne.n	800a89c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a8b8:	e005      	b.n	800a8c6 <f_printf+0x22e>
 800a8ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8be:	2120      	movs	r1, #32
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff fe71 	bl	800a5a8 <putc_bfd>
 800a8c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a8d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d8f0      	bhi.n	800a8ba <f_printf+0x222>
			continue;
 800a8d8:	e0ea      	b.n	800aab0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a8da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8dc:	1d1a      	adds	r2, r3, #4
 800a8de:	67ba      	str	r2, [r7, #120]	; 0x78
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff fe5c 	bl	800a5a8 <putc_bfd>
 800a8f0:	e0de      	b.n	800aab0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a8f8:	e014      	b.n	800a924 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a8fa:	2308      	movs	r3, #8
 800a8fc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a900:	e010      	b.n	800a924 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a902:	230a      	movs	r3, #10
 800a904:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a908:	e00c      	b.n	800a924 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a90a:	2310      	movs	r3, #16
 800a90c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a910:	e008      	b.n	800a924 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a912:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a91a:	4611      	mov	r1, r2
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff fe43 	bl	800a5a8 <putc_bfd>
 800a922:	e0c5      	b.n	800aab0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a924:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <f_printf+0x2a2>
 800a930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a932:	1d1a      	adds	r2, r3, #4
 800a934:	67ba      	str	r2, [r7, #120]	; 0x78
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	e00c      	b.n	800a954 <f_printf+0x2bc>
 800a93a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a93e:	2b44      	cmp	r3, #68	; 0x44
 800a940:	d104      	bne.n	800a94c <f_printf+0x2b4>
 800a942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	67ba      	str	r2, [r7, #120]	; 0x78
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	e003      	b.n	800a954 <f_printf+0x2bc>
 800a94c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	67ba      	str	r2, [r7, #120]	; 0x78
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a958:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a95c:	2b44      	cmp	r3, #68	; 0x44
 800a95e:	d10e      	bne.n	800a97e <f_printf+0x2e6>
 800a960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a964:	2b00      	cmp	r3, #0
 800a966:	da0a      	bge.n	800a97e <f_printf+0x2e6>
			v = 0 - v;
 800a968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a96c:	425b      	negs	r3, r3
 800a96e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a972:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a976:	f043 0308 	orr.w	r3, r3, #8
 800a97a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a984:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a98c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a990:	fb01 f202 	mul.w	r2, r1, r2
 800a994:	1a9b      	subs	r3, r3, r2
 800a996:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a99a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a99e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a9aa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a9ae:	2b09      	cmp	r3, #9
 800a9b0:	d90b      	bls.n	800a9ca <f_printf+0x332>
 800a9b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9b6:	2b78      	cmp	r3, #120	; 0x78
 800a9b8:	d101      	bne.n	800a9be <f_printf+0x326>
 800a9ba:	2227      	movs	r2, #39	; 0x27
 800a9bc:	e000      	b.n	800a9c0 <f_printf+0x328>
 800a9be:	2207      	movs	r2, #7
 800a9c0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a9ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a9d4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a9d8:	3230      	adds	r2, #48	; 0x30
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	3398      	adds	r3, #152	; 0x98
 800a9de:	443b      	add	r3, r7
 800a9e0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a9e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <f_printf+0x35c>
 800a9ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9f0:	2b1f      	cmp	r3, #31
 800a9f2:	d9c7      	bls.n	800a984 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a9f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d009      	beq.n	800aa14 <f_printf+0x37c>
 800aa00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800aa0a:	3398      	adds	r3, #152	; 0x98
 800aa0c:	443b      	add	r3, r7
 800aa0e:	222d      	movs	r2, #45	; 0x2d
 800aa10:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800aa14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa1c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <f_printf+0x394>
 800aa28:	2330      	movs	r3, #48	; 0x30
 800aa2a:	e000      	b.n	800aa2e <f_printf+0x396>
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800aa32:	e007      	b.n	800aa44 <f_printf+0x3ac>
 800aa34:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800aa38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff fdb2 	bl	800a5a8 <putc_bfd>
 800aa44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d108      	bne.n	800aa62 <f_printf+0x3ca>
 800aa50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa54:	1c5a      	adds	r2, r3, #1
 800aa56:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d8e8      	bhi.n	800aa34 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800aa62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa66:	3b01      	subs	r3, #1
 800aa68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa6c:	f107 020c 	add.w	r2, r7, #12
 800aa70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa74:	4413      	add	r3, r2
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff fd92 	bl	800a5a8 <putc_bfd>
		} while (i);
 800aa84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1ea      	bne.n	800aa62 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800aa8c:	e007      	b.n	800aa9e <f_printf+0x406>
 800aa8e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800aa92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff fd85 	bl	800a5a8 <putc_bfd>
 800aa9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aaa8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d8ee      	bhi.n	800aa8e <f_printf+0x3f6>
		c = *fmt++;
 800aab0:	e600      	b.n	800a6b4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800aab2:	bf00      	nop
 800aab4:	e000      	b.n	800aab8 <f_printf+0x420>
		if (!c) break;
 800aab6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800aab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff fdb0 	bl	800a622 <putc_flush>
 800aac2:	4603      	mov	r3, r0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	379c      	adds	r7, #156	; 0x9c
 800aac8:	46bd      	mov	sp, r7
 800aaca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aace:	b003      	add	sp, #12
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop

0800aad4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	4613      	mov	r3, r2
 800aae0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aae2:	2301      	movs	r3, #1
 800aae4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aaea:	4b1f      	ldr	r3, [pc, #124]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800aaec:	7a5b      	ldrb	r3, [r3, #9]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d131      	bne.n	800ab58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aaf4:	4b1c      	ldr	r3, [pc, #112]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800aaf6:	7a5b      	ldrb	r3, [r3, #9]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	4b1a      	ldr	r3, [pc, #104]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800aafe:	2100      	movs	r1, #0
 800ab00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab02:	4b19      	ldr	r3, [pc, #100]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800ab04:	7a5b      	ldrb	r3, [r3, #9]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab12:	4b15      	ldr	r3, [pc, #84]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800ab14:	7a5b      	ldrb	r3, [r3, #9]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800ab1c:	4413      	add	r3, r2
 800ab1e:	79fa      	ldrb	r2, [r7, #7]
 800ab20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab22:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800ab24:	7a5b      	ldrb	r3, [r3, #9]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	b2d1      	uxtb	r1, r2
 800ab2c:	4a0e      	ldr	r2, [pc, #56]	; (800ab68 <FATFS_LinkDriverEx+0x94>)
 800ab2e:	7251      	strb	r1, [r2, #9]
 800ab30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab32:	7dbb      	ldrb	r3, [r7, #22]
 800ab34:	3330      	adds	r3, #48	; 0x30
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	223a      	movs	r2, #58	; 0x3a
 800ab42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3302      	adds	r3, #2
 800ab48:	222f      	movs	r2, #47	; 0x2f
 800ab4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	3303      	adds	r3, #3
 800ab50:	2200      	movs	r2, #0
 800ab52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	200026a0 	.word	0x200026a0

0800ab6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab76:	2200      	movs	r2, #0
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff ffaa 	bl	800aad4 <FATFS_LinkDriverEx>
 800ab80:	4603      	mov	r3, r0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab9c:	d802      	bhi.n	800aba4 <ff_convert+0x18>
		c = chr;
 800ab9e:	88fb      	ldrh	r3, [r7, #6]
 800aba0:	81fb      	strh	r3, [r7, #14]
 800aba2:	e025      	b.n	800abf0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00b      	beq.n	800abc2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800abaa:	88fb      	ldrh	r3, [r7, #6]
 800abac:	2bff      	cmp	r3, #255	; 0xff
 800abae:	d805      	bhi.n	800abbc <ff_convert+0x30>
 800abb0:	88fb      	ldrh	r3, [r7, #6]
 800abb2:	3b80      	subs	r3, #128	; 0x80
 800abb4:	4a12      	ldr	r2, [pc, #72]	; (800ac00 <ff_convert+0x74>)
 800abb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abba:	e000      	b.n	800abbe <ff_convert+0x32>
 800abbc:	2300      	movs	r3, #0
 800abbe:	81fb      	strh	r3, [r7, #14]
 800abc0:	e016      	b.n	800abf0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800abc2:	2300      	movs	r3, #0
 800abc4:	81fb      	strh	r3, [r7, #14]
 800abc6:	e009      	b.n	800abdc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800abc8:	89fb      	ldrh	r3, [r7, #14]
 800abca:	4a0d      	ldr	r2, [pc, #52]	; (800ac00 <ff_convert+0x74>)
 800abcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abd0:	88fa      	ldrh	r2, [r7, #6]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d006      	beq.n	800abe4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800abd6:	89fb      	ldrh	r3, [r7, #14]
 800abd8:	3301      	adds	r3, #1
 800abda:	81fb      	strh	r3, [r7, #14]
 800abdc:	89fb      	ldrh	r3, [r7, #14]
 800abde:	2b7f      	cmp	r3, #127	; 0x7f
 800abe0:	d9f2      	bls.n	800abc8 <ff_convert+0x3c>
 800abe2:	e000      	b.n	800abe6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800abe4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800abe6:	89fb      	ldrh	r3, [r7, #14]
 800abe8:	3380      	adds	r3, #128	; 0x80
 800abea:	b29b      	uxth	r3, r3
 800abec:	b2db      	uxtb	r3, r3
 800abee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800abf0:	89fb      	ldrh	r3, [r7, #14]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	0800e3f4 	.word	0x0800e3f4

0800ac04 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac14:	d201      	bcs.n	800ac1a <ff_wtoupper+0x16>
 800ac16:	4b3e      	ldr	r3, [pc, #248]	; (800ad10 <ff_wtoupper+0x10c>)
 800ac18:	e000      	b.n	800ac1c <ff_wtoupper+0x18>
 800ac1a:	4b3e      	ldr	r3, [pc, #248]	; (800ad14 <ff_wtoupper+0x110>)
 800ac1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	1c9a      	adds	r2, r3, #2
 800ac22:	617a      	str	r2, [r7, #20]
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ac28:	8a7b      	ldrh	r3, [r7, #18]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d068      	beq.n	800ad00 <ff_wtoupper+0xfc>
 800ac2e:	88fa      	ldrh	r2, [r7, #6]
 800ac30:	8a7b      	ldrh	r3, [r7, #18]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d364      	bcc.n	800ad00 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	1c9a      	adds	r2, r3, #2
 800ac3a:	617a      	str	r2, [r7, #20]
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	823b      	strh	r3, [r7, #16]
 800ac40:	8a3b      	ldrh	r3, [r7, #16]
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	81fb      	strh	r3, [r7, #14]
 800ac46:	8a3b      	ldrh	r3, [r7, #16]
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	8a79      	ldrh	r1, [r7, #18]
 800ac50:	8a3b      	ldrh	r3, [r7, #16]
 800ac52:	440b      	add	r3, r1
 800ac54:	429a      	cmp	r2, r3
 800ac56:	da49      	bge.n	800acec <ff_wtoupper+0xe8>
			switch (cmd) {
 800ac58:	89fb      	ldrh	r3, [r7, #14]
 800ac5a:	2b08      	cmp	r3, #8
 800ac5c:	d84f      	bhi.n	800acfe <ff_wtoupper+0xfa>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <ff_wtoupper+0x60>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac9b 	.word	0x0800ac9b
 800ac6c:	0800acb1 	.word	0x0800acb1
 800ac70:	0800acb9 	.word	0x0800acb9
 800ac74:	0800acc1 	.word	0x0800acc1
 800ac78:	0800acc9 	.word	0x0800acc9
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800acd9 	.word	0x0800acd9
 800ac84:	0800ace1 	.word	0x0800ace1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ac88:	88fa      	ldrh	r2, [r7, #6]
 800ac8a:	8a7b      	ldrh	r3, [r7, #18]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	005b      	lsls	r3, r3, #1
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	4413      	add	r3, r2
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	80fb      	strh	r3, [r7, #6]
 800ac98:	e027      	b.n	800acea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ac9a:	88fa      	ldrh	r2, [r7, #6]
 800ac9c:	8a7b      	ldrh	r3, [r7, #18]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	88fa      	ldrh	r2, [r7, #6]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	80fb      	strh	r3, [r7, #6]
 800acae:	e01c      	b.n	800acea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	3b10      	subs	r3, #16
 800acb4:	80fb      	strh	r3, [r7, #6]
 800acb6:	e018      	b.n	800acea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800acb8:	88fb      	ldrh	r3, [r7, #6]
 800acba:	3b20      	subs	r3, #32
 800acbc:	80fb      	strh	r3, [r7, #6]
 800acbe:	e014      	b.n	800acea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	3b30      	subs	r3, #48	; 0x30
 800acc4:	80fb      	strh	r3, [r7, #6]
 800acc6:	e010      	b.n	800acea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800acc8:	88fb      	ldrh	r3, [r7, #6]
 800acca:	3b1a      	subs	r3, #26
 800accc:	80fb      	strh	r3, [r7, #6]
 800acce:	e00c      	b.n	800acea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	3308      	adds	r3, #8
 800acd4:	80fb      	strh	r3, [r7, #6]
 800acd6:	e008      	b.n	800acea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800acd8:	88fb      	ldrh	r3, [r7, #6]
 800acda:	3b50      	subs	r3, #80	; 0x50
 800acdc:	80fb      	strh	r3, [r7, #6]
 800acde:	e004      	b.n	800acea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ace6:	80fb      	strh	r3, [r7, #6]
 800ace8:	bf00      	nop
			}
			break;
 800acea:	e008      	b.n	800acfe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800acec:	89fb      	ldrh	r3, [r7, #14]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d195      	bne.n	800ac1e <ff_wtoupper+0x1a>
 800acf2:	8a3b      	ldrh	r3, [r7, #16]
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4413      	add	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800acfc:	e78f      	b.n	800ac1e <ff_wtoupper+0x1a>
			break;
 800acfe:	bf00      	nop
	}

	return chr;
 800ad00:	88fb      	ldrh	r3, [r7, #6]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	0800e4f4 	.word	0x0800e4f4
 800ad14:	0800e6e8 	.word	0x0800e6e8

0800ad18 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2110      	movs	r1, #16
 800ad20:	4803      	ldr	r0, [pc, #12]	; (800ad30 <SELECT+0x18>)
 800ad22:	f7f8 fe99 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ad26:	2001      	movs	r0, #1
 800ad28:	f7f7 f80a 	bl	8001d40 <HAL_Delay>
}
 800ad2c:	bf00      	nop
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	48000800 	.word	0x48000800

0800ad34 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800ad38:	2201      	movs	r2, #1
 800ad3a:	2110      	movs	r1, #16
 800ad3c:	4803      	ldr	r0, [pc, #12]	; (800ad4c <DESELECT+0x18>)
 800ad3e:	f7f8 fe8b 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ad42:	2001      	movs	r0, #1
 800ad44:	f7f6 fffc 	bl	8001d40 <HAL_Delay>
}
 800ad48:	bf00      	nop
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	48000800 	.word	0x48000800

0800ad50 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ad5a:	bf00      	nop
 800ad5c:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <SPI_TxByte+0x30>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d1f8      	bne.n	800ad5c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800ad6a:	1df9      	adds	r1, r7, #7
 800ad6c:	2364      	movs	r3, #100	; 0x64
 800ad6e:	2201      	movs	r2, #1
 800ad70:	4803      	ldr	r0, [pc, #12]	; (800ad80 <SPI_TxByte+0x30>)
 800ad72:	f7fb fb0a 	bl	800638a <HAL_SPI_Transmit>
}
 800ad76:	bf00      	nop
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200022ec 	.word	0x200022ec

0800ad84 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ad90:	bf00      	nop
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <SPI_TxBuffer+0x30>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d1f8      	bne.n	800ad92 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ada0:	887a      	ldrh	r2, [r7, #2]
 800ada2:	2364      	movs	r3, #100	; 0x64
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	4803      	ldr	r0, [pc, #12]	; (800adb4 <SPI_TxBuffer+0x30>)
 800ada8:	f7fb faef 	bl	800638a <HAL_SPI_Transmit>
}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	200022ec 	.word	0x200022ec

0800adb8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800adbe:	23ff      	movs	r3, #255	; 0xff
 800adc0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800adc2:	bf00      	nop
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <SPI_RxByte+0x34>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b02      	cmp	r3, #2
 800add0:	d1f8      	bne.n	800adc4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800add2:	1dba      	adds	r2, r7, #6
 800add4:	1df9      	adds	r1, r7, #7
 800add6:	2364      	movs	r3, #100	; 0x64
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	2301      	movs	r3, #1
 800addc:	4803      	ldr	r0, [pc, #12]	; (800adec <SPI_RxByte+0x34>)
 800adde:	f7fb fc49 	bl	8006674 <HAL_SPI_TransmitReceive>

	return data;
 800ade2:	79bb      	ldrb	r3, [r7, #6]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200022ec 	.word	0x200022ec

0800adf0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800adf8:	f7ff ffde 	bl	800adb8 <SPI_RxByte>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	701a      	strb	r2, [r3, #0]
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800ae12:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <SD_ReadyWait+0x30>)
 800ae14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ae18:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800ae1a:	f7ff ffcd 	bl	800adb8 <SPI_RxByte>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2bff      	cmp	r3, #255	; 0xff
 800ae26:	d003      	beq.n	800ae30 <SD_ReadyWait+0x24>
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <SD_ReadyWait+0x30>)
 800ae2a:	881b      	ldrh	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f4      	bne.n	800ae1a <SD_ReadyWait+0xe>

	return res;
 800ae30:	79fb      	ldrb	r3, [r7, #7]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	200026ae 	.word	0x200026ae

0800ae40 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800ae46:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800ae4a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800ae4c:	f7ff ff72 	bl	800ad34 <DESELECT>
	for(int i = 0; i < 10; i++)
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]
 800ae54:	e005      	b.n	800ae62 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800ae56:	20ff      	movs	r0, #255	; 0xff
 800ae58:	f7ff ff7a 	bl	800ad50 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60bb      	str	r3, [r7, #8]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	ddf6      	ble.n	800ae56 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800ae68:	f7ff ff56 	bl	800ad18 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800ae6c:	2340      	movs	r3, #64	; 0x40
 800ae6e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800ae80:	2395      	movs	r3, #149	; 0x95
 800ae82:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800ae84:	463b      	mov	r3, r7
 800ae86:	2106      	movs	r1, #6
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff ff7b 	bl	800ad84 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800ae8e:	e002      	b.n	800ae96 <SD_PowerOn+0x56>
	{
		cnt--;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800ae96:	f7ff ff8f 	bl	800adb8 <SPI_RxByte>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d002      	beq.n	800aea6 <SD_PowerOn+0x66>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f4      	bne.n	800ae90 <SD_PowerOn+0x50>
	}

	DESELECT();
 800aea6:	f7ff ff45 	bl	800ad34 <DESELECT>
	SPI_TxByte(0XFF);
 800aeaa:	20ff      	movs	r0, #255	; 0xff
 800aeac:	f7ff ff50 	bl	800ad50 <SPI_TxByte>

	PowerFlag = 1;
 800aeb0:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <SD_PowerOn+0x80>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	701a      	strb	r2, [r3, #0]
}
 800aeb6:	bf00      	nop
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200026b1 	.word	0x200026b1

0800aec4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800aec8:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <SD_PowerOff+0x14>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	701a      	strb	r2, [r3, #0]
}
 800aece:	bf00      	nop
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	200026b1 	.word	0x200026b1

0800aedc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
	return PowerFlag;
 800aee0:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <SD_CheckPower+0x14>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	200026b1 	.word	0x200026b1

0800aef4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <SD_RxDataBlock+0x58>)
 800af00:	22c8      	movs	r2, #200	; 0xc8
 800af02:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800af04:	f7ff ff58 	bl	800adb8 <SPI_RxByte>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2bff      	cmp	r3, #255	; 0xff
 800af10:	d103      	bne.n	800af1a <SD_RxDataBlock+0x26>
 800af12:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <SD_RxDataBlock+0x58>)
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1f4      	bne.n	800af04 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2bfe      	cmp	r3, #254	; 0xfe
 800af1e:	d001      	beq.n	800af24 <SD_RxDataBlock+0x30>
 800af20:	2300      	movs	r3, #0
 800af22:	e00f      	b.n	800af44 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	607a      	str	r2, [r7, #4]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff ff60 	bl	800adf0 <SPI_RxBytePtr>
	} while(len--);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	1e5a      	subs	r2, r3, #1
 800af34:	603a      	str	r2, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f4      	bne.n	800af24 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800af3a:	f7ff ff3d 	bl	800adb8 <SPI_RxByte>
	SPI_RxByte();
 800af3e:	f7ff ff3b 	bl	800adb8 <SPI_RxByte>

	return TRUE;
 800af42:	2301      	movs	r3, #1
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	200026ac 	.word	0x200026ac

0800af50 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800af60:	f7ff ff54 	bl	800ae0c <SD_ReadyWait>
 800af64:	4603      	mov	r3, r0
 800af66:	2bff      	cmp	r3, #255	; 0xff
 800af68:	d001      	beq.n	800af6e <SD_TxDataBlock+0x1e>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e02f      	b.n	800afce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff feed 	bl	800ad50 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	2bfd      	cmp	r3, #253	; 0xfd
 800af7a:	d020      	beq.n	800afbe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800af7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff feff 	bl	800ad84 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800af86:	f7ff ff17 	bl	800adb8 <SPI_RxByte>
		SPI_RxByte();
 800af8a:	f7ff ff15 	bl	800adb8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800af8e:	e00b      	b.n	800afa8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800af90:	f7ff ff12 	bl	800adb8 <SPI_RxByte>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	f003 031f 	and.w	r3, r3, #31
 800af9e:	2b05      	cmp	r3, #5
 800afa0:	d006      	beq.n	800afb0 <SD_TxDataBlock+0x60>
			i++;
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	3301      	adds	r3, #1
 800afa6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	2b40      	cmp	r3, #64	; 0x40
 800afac:	d9f0      	bls.n	800af90 <SD_TxDataBlock+0x40>
 800afae:	e000      	b.n	800afb2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800afb0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800afb2:	bf00      	nop
 800afb4:	f7ff ff00 	bl	800adb8 <SPI_RxByte>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0fa      	beq.n	800afb4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	2b05      	cmp	r3, #5
 800afc6:	d101      	bne.n	800afcc <SD_TxDataBlock+0x7c>
 800afc8:	2301      	movs	r3, #1
 800afca:	e000      	b.n	800afce <SD_TxDataBlock+0x7e>

	return FALSE;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	4603      	mov	r3, r0
 800afde:	6039      	str	r1, [r7, #0]
 800afe0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800afe2:	f7ff ff13 	bl	800ae0c <SD_ReadyWait>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2bff      	cmp	r3, #255	; 0xff
 800afea:	d001      	beq.n	800aff0 <SD_SendCmd+0x1a>
 800afec:	23ff      	movs	r3, #255	; 0xff
 800afee:	e042      	b.n	800b076 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff feac 	bl	800ad50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	0e1b      	lsrs	r3, r3, #24
 800affc:	b2db      	uxtb	r3, r3
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fea6 	bl	800ad50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	0c1b      	lsrs	r3, r3, #16
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fea0 	bl	800ad50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	b2db      	uxtb	r3, r3
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fe9a 	bl	800ad50 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fe95 	bl	800ad50 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b40      	cmp	r3, #64	; 0x40
 800b02a:	d102      	bne.n	800b032 <SD_SendCmd+0x5c>
 800b02c:	2395      	movs	r3, #149	; 0x95
 800b02e:	73fb      	strb	r3, [r7, #15]
 800b030:	e007      	b.n	800b042 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	2b48      	cmp	r3, #72	; 0x48
 800b036:	d102      	bne.n	800b03e <SD_SendCmd+0x68>
 800b038:	2387      	movs	r3, #135	; 0x87
 800b03a:	73fb      	strb	r3, [r7, #15]
 800b03c:	e001      	b.n	800b042 <SD_SendCmd+0x6c>
	else crc = 1;
 800b03e:	2301      	movs	r3, #1
 800b040:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fe83 	bl	800ad50 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	2b4c      	cmp	r3, #76	; 0x4c
 800b04e:	d101      	bne.n	800b054 <SD_SendCmd+0x7e>
 800b050:	f7ff feb2 	bl	800adb8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800b054:	230a      	movs	r3, #10
 800b056:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800b058:	f7ff feae 	bl	800adb8 <SPI_RxByte>
 800b05c:	4603      	mov	r3, r0
 800b05e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800b060:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b064:	2b00      	cmp	r3, #0
 800b066:	da05      	bge.n	800b074 <SD_SendCmd+0x9e>
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	73bb      	strb	r3, [r7, #14]
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1f1      	bne.n	800b058 <SD_SendCmd+0x82>

	return res;
 800b074:	7b7b      	ldrb	r3, [r7, #13]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800b080:	b590      	push	{r4, r7, lr}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <SD_disk_initialize+0x14>
 800b090:	2301      	movs	r3, #1
 800b092:	e0d1      	b.n	800b238 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800b094:	4b6a      	ldr	r3, [pc, #424]	; (800b240 <SD_disk_initialize+0x1c0>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <SD_disk_initialize+0x2a>
 800b0a2:	4b67      	ldr	r3, [pc, #412]	; (800b240 <SD_disk_initialize+0x1c0>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	e0c6      	b.n	800b238 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800b0aa:	f7ff fec9 	bl	800ae40 <SD_PowerOn>

	/* slave select */
	SELECT();
 800b0ae:	f7ff fe33 	bl	800ad18 <SELECT>

	/* check disk type */
	type = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	2040      	movs	r0, #64	; 0x40
 800b0ba:	f7ff ff8c 	bl	800afd6 <SD_SendCmd>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	f040 80a1 	bne.w	800b208 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800b0c6:	4b5f      	ldr	r3, [pc, #380]	; (800b244 <SD_disk_initialize+0x1c4>)
 800b0c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0cc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b0ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0d2:	2048      	movs	r0, #72	; 0x48
 800b0d4:	f7ff ff7f 	bl	800afd6 <SD_SendCmd>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d155      	bne.n	800b18a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
 800b0e2:	e00c      	b.n	800b0fe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800b0e4:	7bfc      	ldrb	r4, [r7, #15]
 800b0e6:	f7ff fe67 	bl	800adb8 <SPI_RxByte>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f104 0310 	add.w	r3, r4, #16
 800b0f2:	443b      	add	r3, r7
 800b0f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	73fb      	strb	r3, [r7, #15]
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d9ef      	bls.n	800b0e4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b104:	7abb      	ldrb	r3, [r7, #10]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d17e      	bne.n	800b208 <SD_disk_initialize+0x188>
 800b10a:	7afb      	ldrb	r3, [r7, #11]
 800b10c:	2baa      	cmp	r3, #170	; 0xaa
 800b10e:	d17b      	bne.n	800b208 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b110:	2100      	movs	r1, #0
 800b112:	2077      	movs	r0, #119	; 0x77
 800b114:	f7ff ff5f 	bl	800afd6 <SD_SendCmd>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d807      	bhi.n	800b12e <SD_disk_initialize+0xae>
 800b11e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b122:	2069      	movs	r0, #105	; 0x69
 800b124:	f7ff ff57 	bl	800afd6 <SD_SendCmd>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800b12e:	4b45      	ldr	r3, [pc, #276]	; (800b244 <SD_disk_initialize+0x1c4>)
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1ec      	bne.n	800b110 <SD_disk_initialize+0x90>
 800b136:	e000      	b.n	800b13a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b138:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b13a:	4b42      	ldr	r3, [pc, #264]	; (800b244 <SD_disk_initialize+0x1c4>)
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d062      	beq.n	800b208 <SD_disk_initialize+0x188>
 800b142:	2100      	movs	r1, #0
 800b144:	207a      	movs	r0, #122	; 0x7a
 800b146:	f7ff ff46 	bl	800afd6 <SD_SendCmd>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d15b      	bne.n	800b208 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
 800b154:	e00c      	b.n	800b170 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800b156:	7bfc      	ldrb	r4, [r7, #15]
 800b158:	f7ff fe2e 	bl	800adb8 <SPI_RxByte>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	f104 0310 	add.w	r3, r4, #16
 800b164:	443b      	add	r3, r7
 800b166:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	3301      	adds	r3, #1
 800b16e:	73fb      	strb	r3, [r7, #15]
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d9ef      	bls.n	800b156 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b176:	7a3b      	ldrb	r3, [r7, #8]
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <SD_disk_initialize+0x104>
 800b180:	230c      	movs	r3, #12
 800b182:	e000      	b.n	800b186 <SD_disk_initialize+0x106>
 800b184:	2304      	movs	r3, #4
 800b186:	73bb      	strb	r3, [r7, #14]
 800b188:	e03e      	b.n	800b208 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b18a:	2100      	movs	r1, #0
 800b18c:	2077      	movs	r0, #119	; 0x77
 800b18e:	f7ff ff22 	bl	800afd6 <SD_SendCmd>
 800b192:	4603      	mov	r3, r0
 800b194:	2b01      	cmp	r3, #1
 800b196:	d808      	bhi.n	800b1aa <SD_disk_initialize+0x12a>
 800b198:	2100      	movs	r1, #0
 800b19a:	2069      	movs	r0, #105	; 0x69
 800b19c:	f7ff ff1b 	bl	800afd6 <SD_SendCmd>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d801      	bhi.n	800b1aa <SD_disk_initialize+0x12a>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e000      	b.n	800b1ac <SD_disk_initialize+0x12c>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d10e      	bne.n	800b1d2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	2077      	movs	r0, #119	; 0x77
 800b1b8:	f7ff ff0d 	bl	800afd6 <SD_SendCmd>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d80e      	bhi.n	800b1e0 <SD_disk_initialize+0x160>
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	2069      	movs	r0, #105	; 0x69
 800b1c6:	f7ff ff06 	bl	800afd6 <SD_SendCmd>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d107      	bne.n	800b1e0 <SD_disk_initialize+0x160>
 800b1d0:	e00c      	b.n	800b1ec <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	2041      	movs	r0, #65	; 0x41
 800b1d6:	f7ff fefe 	bl	800afd6 <SD_SendCmd>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d004      	beq.n	800b1ea <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800b1e0:	4b18      	ldr	r3, [pc, #96]	; (800b244 <SD_disk_initialize+0x1c4>)
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e2      	bne.n	800b1ae <SD_disk_initialize+0x12e>
 800b1e8:	e000      	b.n	800b1ec <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b1ea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800b1ec:	4b15      	ldr	r3, [pc, #84]	; (800b244 <SD_disk_initialize+0x1c4>)
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d007      	beq.n	800b204 <SD_disk_initialize+0x184>
 800b1f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1f8:	2050      	movs	r0, #80	; 0x50
 800b1fa:	f7ff feec 	bl	800afd6 <SD_SendCmd>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <SD_disk_initialize+0x188>
 800b204:	2300      	movs	r3, #0
 800b206:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800b208:	4a0f      	ldr	r2, [pc, #60]	; (800b248 <SD_disk_initialize+0x1c8>)
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800b20e:	f7ff fd91 	bl	800ad34 <DESELECT>
	SPI_RxByte();
 800b212:	f7ff fdd1 	bl	800adb8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d008      	beq.n	800b22e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800b21c:	4b08      	ldr	r3, [pc, #32]	; (800b240 <SD_disk_initialize+0x1c0>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f023 0301 	bic.w	r3, r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	4b05      	ldr	r3, [pc, #20]	; (800b240 <SD_disk_initialize+0x1c0>)
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	e001      	b.n	800b232 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800b22e:	f7ff fe49 	bl	800aec4 <SD_PowerOff>
	}

	return Stat;
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <SD_disk_initialize+0x1c0>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	b2db      	uxtb	r3, r3
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd90      	pop	{r4, r7, pc}
 800b240:	20000028 	.word	0x20000028
 800b244:	200026ac 	.word	0x200026ac
 800b248:	200026b0 	.word	0x200026b0

0800b24c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <SD_disk_status+0x14>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e002      	b.n	800b266 <SD_disk_status+0x1a>
	return Stat;
 800b260:	4b04      	ldr	r3, [pc, #16]	; (800b274 <SD_disk_status+0x28>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	b2db      	uxtb	r3, r3
}
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000028 	.word	0x20000028

0800b278 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <SD_disk_read+0x1c>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <SD_disk_read+0x20>
 800b294:	2304      	movs	r3, #4
 800b296:	e051      	b.n	800b33c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b298:	4b2a      	ldr	r3, [pc, #168]	; (800b344 <SD_disk_read+0xcc>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <SD_disk_read+0x32>
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e048      	b.n	800b33c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800b2aa:	4b27      	ldr	r3, [pc, #156]	; (800b348 <SD_disk_read+0xd0>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f003 0304 	and.w	r3, r3, #4
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <SD_disk_read+0x44>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	025b      	lsls	r3, r3, #9
 800b2ba:	607b      	str	r3, [r7, #4]

	SELECT();
 800b2bc:	f7ff fd2c 	bl	800ad18 <SELECT>

	if (count == 1)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d111      	bne.n	800b2ea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	2051      	movs	r0, #81	; 0x51
 800b2ca:	f7ff fe84 	bl	800afd6 <SD_SendCmd>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d129      	bne.n	800b328 <SD_disk_read+0xb0>
 800b2d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2d8:	68b8      	ldr	r0, [r7, #8]
 800b2da:	f7ff fe0b 	bl	800aef4 <SD_RxDataBlock>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d021      	beq.n	800b328 <SD_disk_read+0xb0>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	603b      	str	r3, [r7, #0]
 800b2e8:	e01e      	b.n	800b328 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800b2ea:	6879      	ldr	r1, [r7, #4]
 800b2ec:	2052      	movs	r0, #82	; 0x52
 800b2ee:	f7ff fe72 	bl	800afd6 <SD_SendCmd>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d117      	bne.n	800b328 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800b2f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2fc:	68b8      	ldr	r0, [r7, #8]
 800b2fe:	f7ff fdf9 	bl	800aef4 <SD_RxDataBlock>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <SD_disk_read+0xa6>
				buff += 512;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b30e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	3b01      	subs	r3, #1
 800b314:	603b      	str	r3, [r7, #0]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1ed      	bne.n	800b2f8 <SD_disk_read+0x80>
 800b31c:	e000      	b.n	800b320 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800b31e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800b320:	2100      	movs	r1, #0
 800b322:	204c      	movs	r0, #76	; 0x4c
 800b324:	f7ff fe57 	bl	800afd6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800b328:	f7ff fd04 	bl	800ad34 <DESELECT>
	SPI_RxByte();
 800b32c:	f7ff fd44 	bl	800adb8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bf14      	ite	ne
 800b336:	2301      	movne	r3, #1
 800b338:	2300      	moveq	r3, #0
 800b33a:	b2db      	uxtb	r3, r3
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20000028 	.word	0x20000028
 800b348:	200026b0 	.word	0x200026b0

0800b34c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <SD_disk_write+0x1c>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <SD_disk_write+0x20>
 800b368:	2304      	movs	r3, #4
 800b36a:	e06b      	b.n	800b444 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b36c:	4b37      	ldr	r3, [pc, #220]	; (800b44c <SD_disk_write+0x100>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <SD_disk_write+0x32>
 800b37a:	2303      	movs	r3, #3
 800b37c:	e062      	b.n	800b444 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800b37e:	4b33      	ldr	r3, [pc, #204]	; (800b44c <SD_disk_write+0x100>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <SD_disk_write+0x44>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e059      	b.n	800b444 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800b390:	4b2f      	ldr	r3, [pc, #188]	; (800b450 <SD_disk_write+0x104>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d102      	bne.n	800b3a2 <SD_disk_write+0x56>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	025b      	lsls	r3, r3, #9
 800b3a0:	607b      	str	r3, [r7, #4]

	SELECT();
 800b3a2:	f7ff fcb9 	bl	800ad18 <SELECT>

	if (count == 1)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d110      	bne.n	800b3ce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b3ac:	6879      	ldr	r1, [r7, #4]
 800b3ae:	2058      	movs	r0, #88	; 0x58
 800b3b0:	f7ff fe11 	bl	800afd6 <SD_SendCmd>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d13a      	bne.n	800b430 <SD_disk_write+0xe4>
 800b3ba:	21fe      	movs	r1, #254	; 0xfe
 800b3bc:	68b8      	ldr	r0, [r7, #8]
 800b3be:	f7ff fdc7 	bl	800af50 <SD_TxDataBlock>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d033      	beq.n	800b430 <SD_disk_write+0xe4>
			count = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	e030      	b.n	800b430 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800b3ce:	4b20      	ldr	r3, [pc, #128]	; (800b450 <SD_disk_write+0x104>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	f003 0302 	and.w	r3, r3, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d007      	beq.n	800b3ea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800b3da:	2100      	movs	r1, #0
 800b3dc:	2077      	movs	r0, #119	; 0x77
 800b3de:	f7ff fdfa 	bl	800afd6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	2057      	movs	r0, #87	; 0x57
 800b3e6:	f7ff fdf6 	bl	800afd6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	2059      	movs	r0, #89	; 0x59
 800b3ee:	f7ff fdf2 	bl	800afd6 <SD_SendCmd>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d11b      	bne.n	800b430 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b3f8:	21fc      	movs	r1, #252	; 0xfc
 800b3fa:	68b8      	ldr	r0, [r7, #8]
 800b3fc:	f7ff fda8 	bl	800af50 <SD_TxDataBlock>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00a      	beq.n	800b41c <SD_disk_write+0xd0>
				buff += 512;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b40c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	3b01      	subs	r3, #1
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1ee      	bne.n	800b3f8 <SD_disk_write+0xac>
 800b41a:	e000      	b.n	800b41e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b41c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800b41e:	21fd      	movs	r1, #253	; 0xfd
 800b420:	2000      	movs	r0, #0
 800b422:	f7ff fd95 	bl	800af50 <SD_TxDataBlock>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <SD_disk_write+0xe4>
			{
				count = 1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800b430:	f7ff fc80 	bl	800ad34 <DESELECT>
	SPI_RxByte();
 800b434:	f7ff fcc0 	bl	800adb8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bf14      	ite	ne
 800b43e:	2301      	movne	r3, #1
 800b440:	2300      	moveq	r3, #0
 800b442:	b2db      	uxtb	r3, r3
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20000028 	.word	0x20000028
 800b450:	200026b0 	.word	0x200026b0

0800b454 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b08b      	sub	sp, #44	; 0x2c
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	603a      	str	r2, [r7, #0]
 800b45e:	71fb      	strb	r3, [r7, #7]
 800b460:	460b      	mov	r3, r1
 800b462:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <SD_disk_ioctl+0x1e>
 800b46e:	2304      	movs	r3, #4
 800b470:	e115      	b.n	800b69e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800b478:	79bb      	ldrb	r3, [r7, #6]
 800b47a:	2b05      	cmp	r3, #5
 800b47c:	d124      	bne.n	800b4c8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	2b02      	cmp	r3, #2
 800b484:	d012      	beq.n	800b4ac <SD_disk_ioctl+0x58>
 800b486:	2b02      	cmp	r3, #2
 800b488:	dc1a      	bgt.n	800b4c0 <SD_disk_ioctl+0x6c>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <SD_disk_ioctl+0x40>
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d006      	beq.n	800b4a0 <SD_disk_ioctl+0x4c>
 800b492:	e015      	b.n	800b4c0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800b494:	f7ff fd16 	bl	800aec4 <SD_PowerOff>
			res = RES_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b49e:	e0fc      	b.n	800b69a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800b4a0:	f7ff fcce 	bl	800ae40 <SD_PowerOn>
			res = RES_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b4aa:	e0f6      	b.n	800b69a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	1c5c      	adds	r4, r3, #1
 800b4b0:	f7ff fd14 	bl	800aedc <SD_CheckPower>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b4be:	e0ec      	b.n	800b69a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4c6:	e0e8      	b.n	800b69a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b4c8:	4b77      	ldr	r3, [pc, #476]	; (800b6a8 <SD_disk_ioctl+0x254>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <SD_disk_ioctl+0x86>
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e0e1      	b.n	800b69e <SD_disk_ioctl+0x24a>

		SELECT();
 800b4da:	f7ff fc1d 	bl	800ad18 <SELECT>

		switch (ctrl)
 800b4de:	79bb      	ldrb	r3, [r7, #6]
 800b4e0:	2b0d      	cmp	r3, #13
 800b4e2:	f200 80cb 	bhi.w	800b67c <SD_disk_ioctl+0x228>
 800b4e6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ec <SD_disk_ioctl+0x98>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b5e7 	.word	0x0800b5e7
 800b4f0:	0800b525 	.word	0x0800b525
 800b4f4:	0800b5d7 	.word	0x0800b5d7
 800b4f8:	0800b67d 	.word	0x0800b67d
 800b4fc:	0800b67d 	.word	0x0800b67d
 800b500:	0800b67d 	.word	0x0800b67d
 800b504:	0800b67d 	.word	0x0800b67d
 800b508:	0800b67d 	.word	0x0800b67d
 800b50c:	0800b67d 	.word	0x0800b67d
 800b510:	0800b67d 	.word	0x0800b67d
 800b514:	0800b67d 	.word	0x0800b67d
 800b518:	0800b5f9 	.word	0x0800b5f9
 800b51c:	0800b61d 	.word	0x0800b61d
 800b520:	0800b641 	.word	0x0800b641
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b524:	2100      	movs	r1, #0
 800b526:	2049      	movs	r0, #73	; 0x49
 800b528:	f7ff fd55 	bl	800afd6 <SD_SendCmd>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f040 80a8 	bne.w	800b684 <SD_disk_ioctl+0x230>
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	2110      	movs	r1, #16
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fcda 	bl	800aef4 <SD_RxDataBlock>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 809e 	beq.w	800b684 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800b548:	7b3b      	ldrb	r3, [r7, #12]
 800b54a:	099b      	lsrs	r3, r3, #6
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d10e      	bne.n	800b570 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800b552:	7d7b      	ldrb	r3, [r7, #21]
 800b554:	b29a      	uxth	r2, r3
 800b556:	7d3b      	ldrb	r3, [r7, #20]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	4413      	add	r3, r2
 800b560:	b29b      	uxth	r3, r3
 800b562:	3301      	adds	r3, #1
 800b564:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800b566:	8bfb      	ldrh	r3, [r7, #30]
 800b568:	029a      	lsls	r2, r3, #10
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e02e      	b.n	800b5ce <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b570:	7c7b      	ldrb	r3, [r7, #17]
 800b572:	f003 030f 	and.w	r3, r3, #15
 800b576:	b2da      	uxtb	r2, r3
 800b578:	7dbb      	ldrb	r3, [r7, #22]
 800b57a:	09db      	lsrs	r3, r3, #7
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	4413      	add	r3, r2
 800b580:	b2da      	uxtb	r2, r3
 800b582:	7d7b      	ldrb	r3, [r7, #21]
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	b2db      	uxtb	r3, r3
 800b588:	f003 0306 	and.w	r3, r3, #6
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	4413      	add	r3, r2
 800b590:	b2db      	uxtb	r3, r3
 800b592:	3302      	adds	r3, #2
 800b594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800b598:	7d3b      	ldrb	r3, [r7, #20]
 800b59a:	099b      	lsrs	r3, r3, #6
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	7cfb      	ldrb	r3, [r7, #19]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	7cbb      	ldrb	r3, [r7, #18]
 800b5ae:	029b      	lsls	r3, r3, #10
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	4413      	add	r3, r2
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	3301      	adds	r3, #1
 800b5be:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800b5c0:	8bfa      	ldrh	r2, [r7, #30]
 800b5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5c6:	3b09      	subs	r3, #9
 800b5c8:	409a      	lsls	r2, r3
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800b5d4:	e056      	b.n	800b684 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5dc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b5e4:	e055      	b.n	800b692 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800b5e6:	f7ff fc11 	bl	800ae0c <SD_ReadyWait>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2bff      	cmp	r3, #255	; 0xff
 800b5ee:	d14b      	bne.n	800b688 <SD_disk_ioctl+0x234>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b5f6:	e047      	b.n	800b688 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2049      	movs	r0, #73	; 0x49
 800b5fc:	f7ff fceb 	bl	800afd6 <SD_SendCmd>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d142      	bne.n	800b68c <SD_disk_ioctl+0x238>
 800b606:	2110      	movs	r1, #16
 800b608:	6a38      	ldr	r0, [r7, #32]
 800b60a:	f7ff fc73 	bl	800aef4 <SD_RxDataBlock>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d03b      	beq.n	800b68c <SD_disk_ioctl+0x238>
 800b614:	2300      	movs	r3, #0
 800b616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b61a:	e037      	b.n	800b68c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b61c:	2100      	movs	r1, #0
 800b61e:	204a      	movs	r0, #74	; 0x4a
 800b620:	f7ff fcd9 	bl	800afd6 <SD_SendCmd>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d132      	bne.n	800b690 <SD_disk_ioctl+0x23c>
 800b62a:	2110      	movs	r1, #16
 800b62c:	6a38      	ldr	r0, [r7, #32]
 800b62e:	f7ff fc61 	bl	800aef4 <SD_RxDataBlock>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d02b      	beq.n	800b690 <SD_disk_ioctl+0x23c>
 800b638:	2300      	movs	r3, #0
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b63e:	e027      	b.n	800b690 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800b640:	2100      	movs	r1, #0
 800b642:	207a      	movs	r0, #122	; 0x7a
 800b644:	f7ff fcc7 	bl	800afd6 <SD_SendCmd>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d116      	bne.n	800b67c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800b64e:	2300      	movs	r3, #0
 800b650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b654:	e00b      	b.n	800b66e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800b656:	6a3c      	ldr	r4, [r7, #32]
 800b658:	1c63      	adds	r3, r4, #1
 800b65a:	623b      	str	r3, [r7, #32]
 800b65c:	f7ff fbac 	bl	800adb8 <SPI_RxByte>
 800b660:	4603      	mov	r3, r0
 800b662:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800b664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b668:	3301      	adds	r3, #1
 800b66a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b66e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b672:	2b03      	cmp	r3, #3
 800b674:	d9ef      	bls.n	800b656 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800b67c:	2304      	movs	r3, #4
 800b67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b682:	e006      	b.n	800b692 <SD_disk_ioctl+0x23e>
			break;
 800b684:	bf00      	nop
 800b686:	e004      	b.n	800b692 <SD_disk_ioctl+0x23e>
			break;
 800b688:	bf00      	nop
 800b68a:	e002      	b.n	800b692 <SD_disk_ioctl+0x23e>
			break;
 800b68c:	bf00      	nop
 800b68e:	e000      	b.n	800b692 <SD_disk_ioctl+0x23e>
			break;
 800b690:	bf00      	nop
		}

		DESELECT();
 800b692:	f7ff fb4f 	bl	800ad34 <DESELECT>
		SPI_RxByte();
 800b696:	f7ff fb8f 	bl	800adb8 <SPI_RxByte>
	}

	return res;
 800b69a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	372c      	adds	r7, #44	; 0x2c
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd90      	pop	{r4, r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000028 	.word	0x20000028

0800b6ac <gcvt>:
 800b6ac:	b530      	push	{r4, r5, lr}
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	b085      	sub	sp, #20
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	ec51 0b10 	vmov	r0, r1, d0
 800b6bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6c0:	f7f5 fa14 	bl	8000aec <__aeabi_dcmplt>
 800b6c4:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	b118      	cbz	r0, 800b6d4 <gcvt+0x28>
 800b6cc:	232d      	movs	r3, #45	; 0x2d
 800b6ce:	f802 3b01 	strb.w	r3, [r2], #1
 800b6d2:	3d01      	subs	r5, #1
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4806      	ldr	r0, [pc, #24]	; (800b6f0 <gcvt+0x44>)
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	4629      	mov	r1, r5
 800b6dc:	2367      	movs	r3, #103	; 0x67
 800b6de:	6800      	ldr	r0, [r0, #0]
 800b6e0:	f000 fb1a 	bl	800bd18 <_gcvt>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	bf14      	ite	ne
 800b6e8:	4620      	movne	r0, r4
 800b6ea:	2000      	moveq	r0, #0
 800b6ec:	b005      	add	sp, #20
 800b6ee:	bd30      	pop	{r4, r5, pc}
 800b6f0:	20000084 	.word	0x20000084

0800b6f4 <std>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b510      	push	{r4, lr}
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b702:	6083      	str	r3, [r0, #8]
 800b704:	8181      	strh	r1, [r0, #12]
 800b706:	6643      	str	r3, [r0, #100]	; 0x64
 800b708:	81c2      	strh	r2, [r0, #14]
 800b70a:	6183      	str	r3, [r0, #24]
 800b70c:	4619      	mov	r1, r3
 800b70e:	2208      	movs	r2, #8
 800b710:	305c      	adds	r0, #92	; 0x5c
 800b712:	f000 f916 	bl	800b942 <memset>
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <std+0x38>)
 800b718:	6263      	str	r3, [r4, #36]	; 0x24
 800b71a:	4b05      	ldr	r3, [pc, #20]	; (800b730 <std+0x3c>)
 800b71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <std+0x40>)
 800b720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b722:	4b05      	ldr	r3, [pc, #20]	; (800b738 <std+0x44>)
 800b724:	6224      	str	r4, [r4, #32]
 800b726:	6323      	str	r3, [r4, #48]	; 0x30
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	bf00      	nop
 800b72c:	0800b8bd 	.word	0x0800b8bd
 800b730:	0800b8df 	.word	0x0800b8df
 800b734:	0800b917 	.word	0x0800b917
 800b738:	0800b93b 	.word	0x0800b93b

0800b73c <stdio_exit_handler>:
 800b73c:	4a02      	ldr	r2, [pc, #8]	; (800b748 <stdio_exit_handler+0xc>)
 800b73e:	4903      	ldr	r1, [pc, #12]	; (800b74c <stdio_exit_handler+0x10>)
 800b740:	4803      	ldr	r0, [pc, #12]	; (800b750 <stdio_exit_handler+0x14>)
 800b742:	f000 b869 	b.w	800b818 <_fwalk_sglue>
 800b746:	bf00      	nop
 800b748:	2000002c 	.word	0x2000002c
 800b74c:	0800c575 	.word	0x0800c575
 800b750:	20000038 	.word	0x20000038

0800b754 <cleanup_stdio>:
 800b754:	6841      	ldr	r1, [r0, #4]
 800b756:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <cleanup_stdio+0x34>)
 800b758:	4299      	cmp	r1, r3
 800b75a:	b510      	push	{r4, lr}
 800b75c:	4604      	mov	r4, r0
 800b75e:	d001      	beq.n	800b764 <cleanup_stdio+0x10>
 800b760:	f000 ff08 	bl	800c574 <_fflush_r>
 800b764:	68a1      	ldr	r1, [r4, #8]
 800b766:	4b09      	ldr	r3, [pc, #36]	; (800b78c <cleanup_stdio+0x38>)
 800b768:	4299      	cmp	r1, r3
 800b76a:	d002      	beq.n	800b772 <cleanup_stdio+0x1e>
 800b76c:	4620      	mov	r0, r4
 800b76e:	f000 ff01 	bl	800c574 <_fflush_r>
 800b772:	68e1      	ldr	r1, [r4, #12]
 800b774:	4b06      	ldr	r3, [pc, #24]	; (800b790 <cleanup_stdio+0x3c>)
 800b776:	4299      	cmp	r1, r3
 800b778:	d004      	beq.n	800b784 <cleanup_stdio+0x30>
 800b77a:	4620      	mov	r0, r4
 800b77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b780:	f000 bef8 	b.w	800c574 <_fflush_r>
 800b784:	bd10      	pop	{r4, pc}
 800b786:	bf00      	nop
 800b788:	200026b4 	.word	0x200026b4
 800b78c:	2000271c 	.word	0x2000271c
 800b790:	20002784 	.word	0x20002784

0800b794 <global_stdio_init.part.0>:
 800b794:	b510      	push	{r4, lr}
 800b796:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <global_stdio_init.part.0+0x30>)
 800b798:	4c0b      	ldr	r4, [pc, #44]	; (800b7c8 <global_stdio_init.part.0+0x34>)
 800b79a:	4a0c      	ldr	r2, [pc, #48]	; (800b7cc <global_stdio_init.part.0+0x38>)
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	4620      	mov	r0, r4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	f7ff ffa6 	bl	800b6f4 <std>
 800b7a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	2109      	movs	r1, #9
 800b7b0:	f7ff ffa0 	bl	800b6f4 <std>
 800b7b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7be:	2112      	movs	r1, #18
 800b7c0:	f7ff bf98 	b.w	800b6f4 <std>
 800b7c4:	200027ec 	.word	0x200027ec
 800b7c8:	200026b4 	.word	0x200026b4
 800b7cc:	0800b73d 	.word	0x0800b73d

0800b7d0 <__sfp_lock_acquire>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__sfp_lock_acquire+0x8>)
 800b7d2:	f000 b92f 	b.w	800ba34 <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	200027f5 	.word	0x200027f5

0800b7dc <__sfp_lock_release>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__sfp_lock_release+0x8>)
 800b7de:	f000 b92a 	b.w	800ba36 <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	200027f5 	.word	0x200027f5

0800b7e8 <__sinit>:
 800b7e8:	b510      	push	{r4, lr}
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	f7ff fff0 	bl	800b7d0 <__sfp_lock_acquire>
 800b7f0:	6a23      	ldr	r3, [r4, #32]
 800b7f2:	b11b      	cbz	r3, 800b7fc <__sinit+0x14>
 800b7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f8:	f7ff bff0 	b.w	800b7dc <__sfp_lock_release>
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <__sinit+0x28>)
 800b7fe:	6223      	str	r3, [r4, #32]
 800b800:	4b04      	ldr	r3, [pc, #16]	; (800b814 <__sinit+0x2c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1f5      	bne.n	800b7f4 <__sinit+0xc>
 800b808:	f7ff ffc4 	bl	800b794 <global_stdio_init.part.0>
 800b80c:	e7f2      	b.n	800b7f4 <__sinit+0xc>
 800b80e:	bf00      	nop
 800b810:	0800b755 	.word	0x0800b755
 800b814:	200027ec 	.word	0x200027ec

0800b818 <_fwalk_sglue>:
 800b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b81c:	4607      	mov	r7, r0
 800b81e:	4688      	mov	r8, r1
 800b820:	4614      	mov	r4, r2
 800b822:	2600      	movs	r6, #0
 800b824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b828:	f1b9 0901 	subs.w	r9, r9, #1
 800b82c:	d505      	bpl.n	800b83a <_fwalk_sglue+0x22>
 800b82e:	6824      	ldr	r4, [r4, #0]
 800b830:	2c00      	cmp	r4, #0
 800b832:	d1f7      	bne.n	800b824 <_fwalk_sglue+0xc>
 800b834:	4630      	mov	r0, r6
 800b836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83a:	89ab      	ldrh	r3, [r5, #12]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d907      	bls.n	800b850 <_fwalk_sglue+0x38>
 800b840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b844:	3301      	adds	r3, #1
 800b846:	d003      	beq.n	800b850 <_fwalk_sglue+0x38>
 800b848:	4629      	mov	r1, r5
 800b84a:	4638      	mov	r0, r7
 800b84c:	47c0      	blx	r8
 800b84e:	4306      	orrs	r6, r0
 800b850:	3568      	adds	r5, #104	; 0x68
 800b852:	e7e9      	b.n	800b828 <_fwalk_sglue+0x10>

0800b854 <sniprintf>:
 800b854:	b40c      	push	{r2, r3}
 800b856:	b530      	push	{r4, r5, lr}
 800b858:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <sniprintf+0x64>)
 800b85a:	1e0c      	subs	r4, r1, #0
 800b85c:	681d      	ldr	r5, [r3, #0]
 800b85e:	b09d      	sub	sp, #116	; 0x74
 800b860:	da08      	bge.n	800b874 <sniprintf+0x20>
 800b862:	238b      	movs	r3, #139	; 0x8b
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	f04f 30ff 	mov.w	r0, #4294967295
 800b86a:	b01d      	add	sp, #116	; 0x74
 800b86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b870:	b002      	add	sp, #8
 800b872:	4770      	bx	lr
 800b874:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b87c:	bf14      	ite	ne
 800b87e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b882:	4623      	moveq	r3, r4
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	9307      	str	r3, [sp, #28]
 800b888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b88c:	9002      	str	r0, [sp, #8]
 800b88e:	9006      	str	r0, [sp, #24]
 800b890:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b894:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b896:	ab21      	add	r3, sp, #132	; 0x84
 800b898:	a902      	add	r1, sp, #8
 800b89a:	4628      	mov	r0, r5
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	f000 fb55 	bl	800bf4c <_svfiprintf_r>
 800b8a2:	1c43      	adds	r3, r0, #1
 800b8a4:	bfbc      	itt	lt
 800b8a6:	238b      	movlt	r3, #139	; 0x8b
 800b8a8:	602b      	strlt	r3, [r5, #0]
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	d0dd      	beq.n	800b86a <sniprintf+0x16>
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e7d9      	b.n	800b86a <sniprintf+0x16>
 800b8b6:	bf00      	nop
 800b8b8:	20000084 	.word	0x20000084

0800b8bc <__sread>:
 800b8bc:	b510      	push	{r4, lr}
 800b8be:	460c      	mov	r4, r1
 800b8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c4:	f000 f868 	bl	800b998 <_read_r>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	bfab      	itete	ge
 800b8cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b8d0:	181b      	addge	r3, r3, r0
 800b8d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8d6:	bfac      	ite	ge
 800b8d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8da:	81a3      	strhlt	r3, [r4, #12]
 800b8dc:	bd10      	pop	{r4, pc}

0800b8de <__swrite>:
 800b8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e2:	461f      	mov	r7, r3
 800b8e4:	898b      	ldrh	r3, [r1, #12]
 800b8e6:	05db      	lsls	r3, r3, #23
 800b8e8:	4605      	mov	r5, r0
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	d505      	bpl.n	800b8fc <__swrite+0x1e>
 800b8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f000 f83c 	bl	800b974 <_lseek_r>
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b906:	81a3      	strh	r3, [r4, #12]
 800b908:	4632      	mov	r2, r6
 800b90a:	463b      	mov	r3, r7
 800b90c:	4628      	mov	r0, r5
 800b90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b912:	f000 b853 	b.w	800b9bc <_write_r>

0800b916 <__sseek>:
 800b916:	b510      	push	{r4, lr}
 800b918:	460c      	mov	r4, r1
 800b91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91e:	f000 f829 	bl	800b974 <_lseek_r>
 800b922:	1c43      	adds	r3, r0, #1
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	bf15      	itete	ne
 800b928:	6560      	strne	r0, [r4, #84]	; 0x54
 800b92a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b92e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b932:	81a3      	strheq	r3, [r4, #12]
 800b934:	bf18      	it	ne
 800b936:	81a3      	strhne	r3, [r4, #12]
 800b938:	bd10      	pop	{r4, pc}

0800b93a <__sclose>:
 800b93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93e:	f000 b809 	b.w	800b954 <_close_r>

0800b942 <memset>:
 800b942:	4402      	add	r2, r0
 800b944:	4603      	mov	r3, r0
 800b946:	4293      	cmp	r3, r2
 800b948:	d100      	bne.n	800b94c <memset+0xa>
 800b94a:	4770      	bx	lr
 800b94c:	f803 1b01 	strb.w	r1, [r3], #1
 800b950:	e7f9      	b.n	800b946 <memset+0x4>
	...

0800b954 <_close_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d06      	ldr	r5, [pc, #24]	; (800b970 <_close_r+0x1c>)
 800b958:	2300      	movs	r3, #0
 800b95a:	4604      	mov	r4, r0
 800b95c:	4608      	mov	r0, r1
 800b95e:	602b      	str	r3, [r5, #0]
 800b960:	f7f6 f82d 	bl	80019be <_close>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_close_r+0x1a>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_close_r+0x1a>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	200027f0 	.word	0x200027f0

0800b974 <_lseek_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d07      	ldr	r5, [pc, #28]	; (800b994 <_lseek_r+0x20>)
 800b978:	4604      	mov	r4, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	4611      	mov	r1, r2
 800b97e:	2200      	movs	r2, #0
 800b980:	602a      	str	r2, [r5, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	f7f6 f842 	bl	8001a0c <_lseek>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_lseek_r+0x1e>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_lseek_r+0x1e>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	200027f0 	.word	0x200027f0

0800b998 <_read_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4d07      	ldr	r5, [pc, #28]	; (800b9b8 <_read_r+0x20>)
 800b99c:	4604      	mov	r4, r0
 800b99e:	4608      	mov	r0, r1
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	602a      	str	r2, [r5, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f7f5 ffd0 	bl	800194c <_read>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_read_r+0x1e>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_read_r+0x1e>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	200027f0 	.word	0x200027f0

0800b9bc <_write_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4d07      	ldr	r5, [pc, #28]	; (800b9dc <_write_r+0x20>)
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	4608      	mov	r0, r1
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	602a      	str	r2, [r5, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f7f5 ffdb 	bl	8001986 <_write>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_write_r+0x1e>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_write_r+0x1e>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	200027f0 	.word	0x200027f0

0800b9e0 <__errno>:
 800b9e0:	4b01      	ldr	r3, [pc, #4]	; (800b9e8 <__errno+0x8>)
 800b9e2:	6818      	ldr	r0, [r3, #0]
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20000084 	.word	0x20000084

0800b9ec <__libc_init_array>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	4d0d      	ldr	r5, [pc, #52]	; (800ba24 <__libc_init_array+0x38>)
 800b9f0:	4c0d      	ldr	r4, [pc, #52]	; (800ba28 <__libc_init_array+0x3c>)
 800b9f2:	1b64      	subs	r4, r4, r5
 800b9f4:	10a4      	asrs	r4, r4, #2
 800b9f6:	2600      	movs	r6, #0
 800b9f8:	42a6      	cmp	r6, r4
 800b9fa:	d109      	bne.n	800ba10 <__libc_init_array+0x24>
 800b9fc:	4d0b      	ldr	r5, [pc, #44]	; (800ba2c <__libc_init_array+0x40>)
 800b9fe:	4c0c      	ldr	r4, [pc, #48]	; (800ba30 <__libc_init_array+0x44>)
 800ba00:	f002 fb64 	bl	800e0cc <_init>
 800ba04:	1b64      	subs	r4, r4, r5
 800ba06:	10a4      	asrs	r4, r4, #2
 800ba08:	2600      	movs	r6, #0
 800ba0a:	42a6      	cmp	r6, r4
 800ba0c:	d105      	bne.n	800ba1a <__libc_init_array+0x2e>
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba14:	4798      	blx	r3
 800ba16:	3601      	adds	r6, #1
 800ba18:	e7ee      	b.n	800b9f8 <__libc_init_array+0xc>
 800ba1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba1e:	4798      	blx	r3
 800ba20:	3601      	adds	r6, #1
 800ba22:	e7f2      	b.n	800ba0a <__libc_init_array+0x1e>
 800ba24:	0800e9f8 	.word	0x0800e9f8
 800ba28:	0800e9f8 	.word	0x0800e9f8
 800ba2c:	0800e9f8 	.word	0x0800e9f8
 800ba30:	0800e9fc 	.word	0x0800e9fc

0800ba34 <__retarget_lock_acquire_recursive>:
 800ba34:	4770      	bx	lr

0800ba36 <__retarget_lock_release_recursive>:
 800ba36:	4770      	bx	lr

0800ba38 <_free_r>:
 800ba38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba3a:	2900      	cmp	r1, #0
 800ba3c:	d044      	beq.n	800bac8 <_free_r+0x90>
 800ba3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba42:	9001      	str	r0, [sp, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f1a1 0404 	sub.w	r4, r1, #4
 800ba4a:	bfb8      	it	lt
 800ba4c:	18e4      	addlt	r4, r4, r3
 800ba4e:	f000 f8df 	bl	800bc10 <__malloc_lock>
 800ba52:	4a1e      	ldr	r2, [pc, #120]	; (800bacc <_free_r+0x94>)
 800ba54:	9801      	ldr	r0, [sp, #4]
 800ba56:	6813      	ldr	r3, [r2, #0]
 800ba58:	b933      	cbnz	r3, 800ba68 <_free_r+0x30>
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	6014      	str	r4, [r2, #0]
 800ba5e:	b003      	add	sp, #12
 800ba60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba64:	f000 b8da 	b.w	800bc1c <__malloc_unlock>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d908      	bls.n	800ba7e <_free_r+0x46>
 800ba6c:	6825      	ldr	r5, [r4, #0]
 800ba6e:	1961      	adds	r1, r4, r5
 800ba70:	428b      	cmp	r3, r1
 800ba72:	bf01      	itttt	eq
 800ba74:	6819      	ldreq	r1, [r3, #0]
 800ba76:	685b      	ldreq	r3, [r3, #4]
 800ba78:	1949      	addeq	r1, r1, r5
 800ba7a:	6021      	streq	r1, [r4, #0]
 800ba7c:	e7ed      	b.n	800ba5a <_free_r+0x22>
 800ba7e:	461a      	mov	r2, r3
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	b10b      	cbz	r3, 800ba88 <_free_r+0x50>
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d9fa      	bls.n	800ba7e <_free_r+0x46>
 800ba88:	6811      	ldr	r1, [r2, #0]
 800ba8a:	1855      	adds	r5, r2, r1
 800ba8c:	42a5      	cmp	r5, r4
 800ba8e:	d10b      	bne.n	800baa8 <_free_r+0x70>
 800ba90:	6824      	ldr	r4, [r4, #0]
 800ba92:	4421      	add	r1, r4
 800ba94:	1854      	adds	r4, r2, r1
 800ba96:	42a3      	cmp	r3, r4
 800ba98:	6011      	str	r1, [r2, #0]
 800ba9a:	d1e0      	bne.n	800ba5e <_free_r+0x26>
 800ba9c:	681c      	ldr	r4, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	6053      	str	r3, [r2, #4]
 800baa2:	440c      	add	r4, r1
 800baa4:	6014      	str	r4, [r2, #0]
 800baa6:	e7da      	b.n	800ba5e <_free_r+0x26>
 800baa8:	d902      	bls.n	800bab0 <_free_r+0x78>
 800baaa:	230c      	movs	r3, #12
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	e7d6      	b.n	800ba5e <_free_r+0x26>
 800bab0:	6825      	ldr	r5, [r4, #0]
 800bab2:	1961      	adds	r1, r4, r5
 800bab4:	428b      	cmp	r3, r1
 800bab6:	bf04      	itt	eq
 800bab8:	6819      	ldreq	r1, [r3, #0]
 800baba:	685b      	ldreq	r3, [r3, #4]
 800babc:	6063      	str	r3, [r4, #4]
 800babe:	bf04      	itt	eq
 800bac0:	1949      	addeq	r1, r1, r5
 800bac2:	6021      	streq	r1, [r4, #0]
 800bac4:	6054      	str	r4, [r2, #4]
 800bac6:	e7ca      	b.n	800ba5e <_free_r+0x26>
 800bac8:	b003      	add	sp, #12
 800baca:	bd30      	pop	{r4, r5, pc}
 800bacc:	200027f8 	.word	0x200027f8

0800bad0 <sbrk_aligned>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4e0e      	ldr	r6, [pc, #56]	; (800bb0c <sbrk_aligned+0x3c>)
 800bad4:	460c      	mov	r4, r1
 800bad6:	6831      	ldr	r1, [r6, #0]
 800bad8:	4605      	mov	r5, r0
 800bada:	b911      	cbnz	r1, 800bae2 <sbrk_aligned+0x12>
 800badc:	f000 fd8c 	bl	800c5f8 <_sbrk_r>
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4621      	mov	r1, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 fd87 	bl	800c5f8 <_sbrk_r>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d00a      	beq.n	800bb04 <sbrk_aligned+0x34>
 800baee:	1cc4      	adds	r4, r0, #3
 800baf0:	f024 0403 	bic.w	r4, r4, #3
 800baf4:	42a0      	cmp	r0, r4
 800baf6:	d007      	beq.n	800bb08 <sbrk_aligned+0x38>
 800baf8:	1a21      	subs	r1, r4, r0
 800bafa:	4628      	mov	r0, r5
 800bafc:	f000 fd7c 	bl	800c5f8 <_sbrk_r>
 800bb00:	3001      	adds	r0, #1
 800bb02:	d101      	bne.n	800bb08 <sbrk_aligned+0x38>
 800bb04:	f04f 34ff 	mov.w	r4, #4294967295
 800bb08:	4620      	mov	r0, r4
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	200027fc 	.word	0x200027fc

0800bb10 <_malloc_r>:
 800bb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb14:	1ccd      	adds	r5, r1, #3
 800bb16:	f025 0503 	bic.w	r5, r5, #3
 800bb1a:	3508      	adds	r5, #8
 800bb1c:	2d0c      	cmp	r5, #12
 800bb1e:	bf38      	it	cc
 800bb20:	250c      	movcc	r5, #12
 800bb22:	2d00      	cmp	r5, #0
 800bb24:	4607      	mov	r7, r0
 800bb26:	db01      	blt.n	800bb2c <_malloc_r+0x1c>
 800bb28:	42a9      	cmp	r1, r5
 800bb2a:	d905      	bls.n	800bb38 <_malloc_r+0x28>
 800bb2c:	230c      	movs	r3, #12
 800bb2e:	603b      	str	r3, [r7, #0]
 800bb30:	2600      	movs	r6, #0
 800bb32:	4630      	mov	r0, r6
 800bb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc0c <_malloc_r+0xfc>
 800bb3c:	f000 f868 	bl	800bc10 <__malloc_lock>
 800bb40:	f8d8 3000 	ldr.w	r3, [r8]
 800bb44:	461c      	mov	r4, r3
 800bb46:	bb5c      	cbnz	r4, 800bba0 <_malloc_r+0x90>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	f7ff ffc0 	bl	800bad0 <sbrk_aligned>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	4604      	mov	r4, r0
 800bb54:	d155      	bne.n	800bc02 <_malloc_r+0xf2>
 800bb56:	f8d8 4000 	ldr.w	r4, [r8]
 800bb5a:	4626      	mov	r6, r4
 800bb5c:	2e00      	cmp	r6, #0
 800bb5e:	d145      	bne.n	800bbec <_malloc_r+0xdc>
 800bb60:	2c00      	cmp	r4, #0
 800bb62:	d048      	beq.n	800bbf6 <_malloc_r+0xe6>
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	4631      	mov	r1, r6
 800bb68:	4638      	mov	r0, r7
 800bb6a:	eb04 0903 	add.w	r9, r4, r3
 800bb6e:	f000 fd43 	bl	800c5f8 <_sbrk_r>
 800bb72:	4581      	cmp	r9, r0
 800bb74:	d13f      	bne.n	800bbf6 <_malloc_r+0xe6>
 800bb76:	6821      	ldr	r1, [r4, #0]
 800bb78:	1a6d      	subs	r5, r5, r1
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7ff ffa7 	bl	800bad0 <sbrk_aligned>
 800bb82:	3001      	adds	r0, #1
 800bb84:	d037      	beq.n	800bbf6 <_malloc_r+0xe6>
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	442b      	add	r3, r5
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d038      	beq.n	800bc06 <_malloc_r+0xf6>
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	42a2      	cmp	r2, r4
 800bb98:	d12b      	bne.n	800bbf2 <_malloc_r+0xe2>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	e00f      	b.n	800bbc0 <_malloc_r+0xb0>
 800bba0:	6822      	ldr	r2, [r4, #0]
 800bba2:	1b52      	subs	r2, r2, r5
 800bba4:	d41f      	bmi.n	800bbe6 <_malloc_r+0xd6>
 800bba6:	2a0b      	cmp	r2, #11
 800bba8:	d917      	bls.n	800bbda <_malloc_r+0xca>
 800bbaa:	1961      	adds	r1, r4, r5
 800bbac:	42a3      	cmp	r3, r4
 800bbae:	6025      	str	r5, [r4, #0]
 800bbb0:	bf18      	it	ne
 800bbb2:	6059      	strne	r1, [r3, #4]
 800bbb4:	6863      	ldr	r3, [r4, #4]
 800bbb6:	bf08      	it	eq
 800bbb8:	f8c8 1000 	streq.w	r1, [r8]
 800bbbc:	5162      	str	r2, [r4, r5]
 800bbbe:	604b      	str	r3, [r1, #4]
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f104 060b 	add.w	r6, r4, #11
 800bbc6:	f000 f829 	bl	800bc1c <__malloc_unlock>
 800bbca:	f026 0607 	bic.w	r6, r6, #7
 800bbce:	1d23      	adds	r3, r4, #4
 800bbd0:	1af2      	subs	r2, r6, r3
 800bbd2:	d0ae      	beq.n	800bb32 <_malloc_r+0x22>
 800bbd4:	1b9b      	subs	r3, r3, r6
 800bbd6:	50a3      	str	r3, [r4, r2]
 800bbd8:	e7ab      	b.n	800bb32 <_malloc_r+0x22>
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	6862      	ldr	r2, [r4, #4]
 800bbde:	d1dd      	bne.n	800bb9c <_malloc_r+0x8c>
 800bbe0:	f8c8 2000 	str.w	r2, [r8]
 800bbe4:	e7ec      	b.n	800bbc0 <_malloc_r+0xb0>
 800bbe6:	4623      	mov	r3, r4
 800bbe8:	6864      	ldr	r4, [r4, #4]
 800bbea:	e7ac      	b.n	800bb46 <_malloc_r+0x36>
 800bbec:	4634      	mov	r4, r6
 800bbee:	6876      	ldr	r6, [r6, #4]
 800bbf0:	e7b4      	b.n	800bb5c <_malloc_r+0x4c>
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	e7cc      	b.n	800bb90 <_malloc_r+0x80>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	603b      	str	r3, [r7, #0]
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	f000 f80e 	bl	800bc1c <__malloc_unlock>
 800bc00:	e797      	b.n	800bb32 <_malloc_r+0x22>
 800bc02:	6025      	str	r5, [r4, #0]
 800bc04:	e7dc      	b.n	800bbc0 <_malloc_r+0xb0>
 800bc06:	605b      	str	r3, [r3, #4]
 800bc08:	deff      	udf	#255	; 0xff
 800bc0a:	bf00      	nop
 800bc0c:	200027f8 	.word	0x200027f8

0800bc10 <__malloc_lock>:
 800bc10:	4801      	ldr	r0, [pc, #4]	; (800bc18 <__malloc_lock+0x8>)
 800bc12:	f7ff bf0f 	b.w	800ba34 <__retarget_lock_acquire_recursive>
 800bc16:	bf00      	nop
 800bc18:	200027f4 	.word	0x200027f4

0800bc1c <__malloc_unlock>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__malloc_unlock+0x8>)
 800bc1e:	f7ff bf0a 	b.w	800ba36 <__retarget_lock_release_recursive>
 800bc22:	bf00      	nop
 800bc24:	200027f4 	.word	0x200027f4

0800bc28 <print_e>:
 800bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	ec43 2b10 	vmov	d0, r2, r3
 800bc30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc32:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800bc36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bc38:	ab04      	add	r3, sp, #16
 800bc3a:	9301      	str	r3, [sp, #4]
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	1c62      	adds	r2, r4, #1
 800bc42:	ab05      	add	r3, sp, #20
 800bc44:	460f      	mov	r7, r1
 800bc46:	2102      	movs	r1, #2
 800bc48:	f000 fd86 	bl	800c758 <_dtoa_r>
 800bc4c:	9a05      	ldr	r2, [sp, #20]
 800bc4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d105      	bne.n	800bc62 <print_e+0x3a>
 800bc56:	4601      	mov	r1, r0
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f000 fcdd 	bl	800c618 <strcpy>
 800bc5e:	b007      	add	sp, #28
 800bc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc62:	463b      	mov	r3, r7
 800bc64:	7801      	ldrb	r1, [r0, #0]
 800bc66:	f803 1b01 	strb.w	r1, [r3], #1
 800bc6a:	2c00      	cmp	r4, #0
 800bc6c:	bfc8      	it	gt
 800bc6e:	2501      	movgt	r5, #1
 800bc70:	212e      	movs	r1, #46	; 0x2e
 800bc72:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800bc76:	b10f      	cbz	r7, 800bc7c <print_e+0x54>
 800bc78:	2c00      	cmp	r4, #0
 800bc7a:	dc37      	bgt.n	800bcec <print_e+0xc4>
 800bc7c:	2e67      	cmp	r6, #103	; 0x67
 800bc7e:	d046      	beq.n	800bd0e <print_e+0xe6>
 800bc80:	2e47      	cmp	r6, #71	; 0x47
 800bc82:	d046      	beq.n	800bd12 <print_e+0xea>
 800bc84:	212e      	movs	r1, #46	; 0x2e
 800bc86:	2030      	movs	r0, #48	; 0x30
 800bc88:	2c00      	cmp	r4, #0
 800bc8a:	dc38      	bgt.n	800bcfe <print_e+0xd6>
 800bc8c:	1e51      	subs	r1, r2, #1
 800bc8e:	2900      	cmp	r1, #0
 800bc90:	bfb8      	it	lt
 800bc92:	f1c2 0201 	rsblt	r2, r2, #1
 800bc96:	4618      	mov	r0, r3
 800bc98:	9105      	str	r1, [sp, #20]
 800bc9a:	bfac      	ite	ge
 800bc9c:	222b      	movge	r2, #43	; 0x2b
 800bc9e:	9205      	strlt	r2, [sp, #20]
 800bca0:	f800 6b02 	strb.w	r6, [r0], #2
 800bca4:	bfa8      	it	ge
 800bca6:	705a      	strbge	r2, [r3, #1]
 800bca8:	9a05      	ldr	r2, [sp, #20]
 800bcaa:	bfbc      	itt	lt
 800bcac:	212d      	movlt	r1, #45	; 0x2d
 800bcae:	7059      	strblt	r1, [r3, #1]
 800bcb0:	2a63      	cmp	r2, #99	; 0x63
 800bcb2:	dd0b      	ble.n	800bccc <print_e+0xa4>
 800bcb4:	2164      	movs	r1, #100	; 0x64
 800bcb6:	fb92 f1f1 	sdiv	r1, r2, r1
 800bcba:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800bcbe:	1cd8      	adds	r0, r3, #3
 800bcc0:	709c      	strb	r4, [r3, #2]
 800bcc2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800bcc6:	fb03 2201 	mla	r2, r3, r1, r2
 800bcca:	9205      	str	r2, [sp, #20]
 800bccc:	9b05      	ldr	r3, [sp, #20]
 800bcce:	220a      	movs	r2, #10
 800bcd0:	fb93 f2f2 	sdiv	r2, r3, r2
 800bcd4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800bcd8:	7001      	strb	r1, [r0, #0]
 800bcda:	f06f 0109 	mvn.w	r1, #9
 800bcde:	fb01 3302 	mla	r3, r1, r2, r3
 800bce2:	3330      	adds	r3, #48	; 0x30
 800bce4:	7043      	strb	r3, [r0, #1]
 800bce6:	2300      	movs	r3, #0
 800bce8:	7083      	strb	r3, [r0, #2]
 800bcea:	e7b8      	b.n	800bc5e <print_e+0x36>
 800bcec:	b10d      	cbz	r5, 800bcf2 <print_e+0xca>
 800bcee:	f803 1b01 	strb.w	r1, [r3], #1
 800bcf2:	7805      	ldrb	r5, [r0, #0]
 800bcf4:	f803 5b01 	strb.w	r5, [r3], #1
 800bcf8:	3c01      	subs	r4, #1
 800bcfa:	2500      	movs	r5, #0
 800bcfc:	e7b9      	b.n	800bc72 <print_e+0x4a>
 800bcfe:	b10d      	cbz	r5, 800bd04 <print_e+0xdc>
 800bd00:	f803 1b01 	strb.w	r1, [r3], #1
 800bd04:	f803 0b01 	strb.w	r0, [r3], #1
 800bd08:	3c01      	subs	r4, #1
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	e7bc      	b.n	800bc88 <print_e+0x60>
 800bd0e:	2665      	movs	r6, #101	; 0x65
 800bd10:	e7bc      	b.n	800bc8c <print_e+0x64>
 800bd12:	2645      	movs	r6, #69	; 0x45
 800bd14:	e7ba      	b.n	800bc8c <print_e+0x64>
	...

0800bd18 <_gcvt>:
 800bd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1c:	ec55 4b10 	vmov	r4, r5, d0
 800bd20:	b088      	sub	sp, #32
 800bd22:	4681      	mov	r9, r0
 800bd24:	4688      	mov	r8, r1
 800bd26:	4616      	mov	r6, r2
 800bd28:	469a      	mov	sl, r3
 800bd2a:	ee10 0a10 	vmov	r0, s0
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2300      	movs	r3, #0
 800bd32:	4629      	mov	r1, r5
 800bd34:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bd36:	f7f4 fed9 	bl	8000aec <__aeabi_dcmplt>
 800bd3a:	b110      	cbz	r0, 800bd42 <_gcvt+0x2a>
 800bd3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bd40:	461d      	mov	r5, r3
 800bd42:	2200      	movs	r2, #0
 800bd44:	2300      	movs	r3, #0
 800bd46:	4620      	mov	r0, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 fec5 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd4e:	b138      	cbz	r0, 800bd60 <_gcvt+0x48>
 800bd50:	2330      	movs	r3, #48	; 0x30
 800bd52:	7033      	strb	r3, [r6, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	7073      	strb	r3, [r6, #1]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	b008      	add	sp, #32
 800bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd60:	a34b      	add	r3, pc, #300	; (adr r3, 800be90 <_gcvt+0x178>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	4620      	mov	r0, r4
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7f4 fec9 	bl	8000b00 <__aeabi_dcmple>
 800bd6e:	b158      	cbz	r0, 800bd88 <_gcvt+0x70>
 800bd70:	f108 33ff 	add.w	r3, r8, #4294967295
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	e9cd a701 	strd	sl, r7, [sp, #4]
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	4631      	mov	r1, r6
 800bd80:	4648      	mov	r0, r9
 800bd82:	f7ff ff51 	bl	800bc28 <print_e>
 800bd86:	e7e7      	b.n	800bd58 <_gcvt+0x40>
 800bd88:	4640      	mov	r0, r8
 800bd8a:	f001 fe5b 	bl	800da44 <_mprec_log10>
 800bd8e:	4622      	mov	r2, r4
 800bd90:	ec51 0b10 	vmov	r0, r1, d0
 800bd94:	462b      	mov	r3, r5
 800bd96:	f7f4 feb3 	bl	8000b00 <__aeabi_dcmple>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d1e8      	bne.n	800bd70 <_gcvt+0x58>
 800bd9e:	ab07      	add	r3, sp, #28
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	ab06      	add	r3, sp, #24
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4642      	mov	r2, r8
 800bda8:	ab05      	add	r3, sp, #20
 800bdaa:	ec45 4b10 	vmov	d0, r4, r5
 800bdae:	2102      	movs	r1, #2
 800bdb0:	4648      	mov	r0, r9
 800bdb2:	f000 fcd1 	bl	800c758 <_dtoa_r>
 800bdb6:	9a05      	ldr	r2, [sp, #20]
 800bdb8:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d00e      	beq.n	800bdde <_gcvt+0xc6>
 800bdc0:	4633      	mov	r3, r6
 800bdc2:	44b0      	add	r8, r6
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bdca:	9c05      	ldr	r4, [sp, #20]
 800bdcc:	eba8 0203 	sub.w	r2, r8, r3
 800bdd0:	b109      	cbz	r1, 800bdd6 <_gcvt+0xbe>
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	dc08      	bgt.n	800bde8 <_gcvt+0xd0>
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800bddc:	e00d      	b.n	800bdfa <_gcvt+0xe2>
 800bdde:	4601      	mov	r1, r0
 800bde0:	4630      	mov	r0, r6
 800bde2:	f000 fc19 	bl	800c618 <strcpy>
 800bde6:	e7b7      	b.n	800bd58 <_gcvt+0x40>
 800bde8:	3c01      	subs	r4, #1
 800bdea:	f803 1b01 	strb.w	r1, [r3], #1
 800bdee:	9405      	str	r4, [sp, #20]
 800bdf0:	e7e8      	b.n	800bdc4 <_gcvt+0xac>
 800bdf2:	f803 cb01 	strb.w	ip, [r3], #1
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	2c00      	cmp	r4, #0
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	dc2a      	bgt.n	800be56 <_gcvt+0x13e>
 800be00:	b101      	cbz	r1, 800be04 <_gcvt+0xec>
 800be02:	9405      	str	r4, [sp, #20]
 800be04:	b90f      	cbnz	r7, 800be0a <_gcvt+0xf2>
 800be06:	7829      	ldrb	r1, [r5, #0]
 800be08:	b311      	cbz	r1, 800be50 <_gcvt+0x138>
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	bf04      	itt	eq
 800be0e:	2130      	moveq	r1, #48	; 0x30
 800be10:	f803 1b01 	strbeq.w	r1, [r3], #1
 800be14:	212e      	movs	r1, #46	; 0x2e
 800be16:	7019      	strb	r1, [r3, #0]
 800be18:	9905      	ldr	r1, [sp, #20]
 800be1a:	4618      	mov	r0, r3
 800be1c:	2400      	movs	r4, #0
 800be1e:	eba1 0c03 	sub.w	ip, r1, r3
 800be22:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800be26:	eb1c 0f00 	cmn.w	ip, r0
 800be2a:	d41c      	bmi.n	800be66 <_gcvt+0x14e>
 800be2c:	2900      	cmp	r1, #0
 800be2e:	f1c1 0000 	rsb	r0, r1, #0
 800be32:	bfc8      	it	gt
 800be34:	2000      	movgt	r0, #0
 800be36:	f100 0c01 	add.w	ip, r0, #1
 800be3a:	4463      	add	r3, ip
 800be3c:	4401      	add	r1, r0
 800be3e:	b104      	cbz	r4, 800be42 <_gcvt+0x12a>
 800be40:	9105      	str	r1, [sp, #20]
 800be42:	1e69      	subs	r1, r5, #1
 800be44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be48:	b108      	cbz	r0, 800be4e <_gcvt+0x136>
 800be4a:	2a00      	cmp	r2, #0
 800be4c:	dc0f      	bgt.n	800be6e <_gcvt+0x156>
 800be4e:	b9df      	cbnz	r7, 800be88 <_gcvt+0x170>
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e780      	b.n	800bd58 <_gcvt+0x40>
 800be56:	2a00      	cmp	r2, #0
 800be58:	f104 34ff 	add.w	r4, r4, #4294967295
 800be5c:	dcc9      	bgt.n	800bdf2 <_gcvt+0xda>
 800be5e:	2900      	cmp	r1, #0
 800be60:	d0d0      	beq.n	800be04 <_gcvt+0xec>
 800be62:	9005      	str	r0, [sp, #20]
 800be64:	e7ce      	b.n	800be04 <_gcvt+0xec>
 800be66:	f800 ef01 	strb.w	lr, [r0, #1]!
 800be6a:	2401      	movs	r4, #1
 800be6c:	e7db      	b.n	800be26 <_gcvt+0x10e>
 800be6e:	f803 0b01 	strb.w	r0, [r3], #1
 800be72:	3a01      	subs	r2, #1
 800be74:	e7e6      	b.n	800be44 <_gcvt+0x12c>
 800be76:	f801 5b01 	strb.w	r5, [r1], #1
 800be7a:	1a60      	subs	r0, r4, r1
 800be7c:	2800      	cmp	r0, #0
 800be7e:	dcfa      	bgt.n	800be76 <_gcvt+0x15e>
 800be80:	2a00      	cmp	r2, #0
 800be82:	bfa8      	it	ge
 800be84:	189b      	addge	r3, r3, r2
 800be86:	e7e3      	b.n	800be50 <_gcvt+0x138>
 800be88:	4619      	mov	r1, r3
 800be8a:	189c      	adds	r4, r3, r2
 800be8c:	2530      	movs	r5, #48	; 0x30
 800be8e:	e7f4      	b.n	800be7a <_gcvt+0x162>
 800be90:	eb1c432d 	.word	0xeb1c432d
 800be94:	3f1a36e2 	.word	0x3f1a36e2

0800be98 <__ssputs_r>:
 800be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9c:	688e      	ldr	r6, [r1, #8]
 800be9e:	461f      	mov	r7, r3
 800bea0:	42be      	cmp	r6, r7
 800bea2:	680b      	ldr	r3, [r1, #0]
 800bea4:	4682      	mov	sl, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	4690      	mov	r8, r2
 800beaa:	d82c      	bhi.n	800bf06 <__ssputs_r+0x6e>
 800beac:	898a      	ldrh	r2, [r1, #12]
 800beae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800beb2:	d026      	beq.n	800bf02 <__ssputs_r+0x6a>
 800beb4:	6965      	ldr	r5, [r4, #20]
 800beb6:	6909      	ldr	r1, [r1, #16]
 800beb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bebc:	eba3 0901 	sub.w	r9, r3, r1
 800bec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bec4:	1c7b      	adds	r3, r7, #1
 800bec6:	444b      	add	r3, r9
 800bec8:	106d      	asrs	r5, r5, #1
 800beca:	429d      	cmp	r5, r3
 800becc:	bf38      	it	cc
 800bece:	461d      	movcc	r5, r3
 800bed0:	0553      	lsls	r3, r2, #21
 800bed2:	d527      	bpl.n	800bf24 <__ssputs_r+0x8c>
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7ff fe1b 	bl	800bb10 <_malloc_r>
 800beda:	4606      	mov	r6, r0
 800bedc:	b360      	cbz	r0, 800bf38 <__ssputs_r+0xa0>
 800bede:	6921      	ldr	r1, [r4, #16]
 800bee0:	464a      	mov	r2, r9
 800bee2:	f000 fba1 	bl	800c628 <memcpy>
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800beec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bef0:	81a3      	strh	r3, [r4, #12]
 800bef2:	6126      	str	r6, [r4, #16]
 800bef4:	6165      	str	r5, [r4, #20]
 800bef6:	444e      	add	r6, r9
 800bef8:	eba5 0509 	sub.w	r5, r5, r9
 800befc:	6026      	str	r6, [r4, #0]
 800befe:	60a5      	str	r5, [r4, #8]
 800bf00:	463e      	mov	r6, r7
 800bf02:	42be      	cmp	r6, r7
 800bf04:	d900      	bls.n	800bf08 <__ssputs_r+0x70>
 800bf06:	463e      	mov	r6, r7
 800bf08:	6820      	ldr	r0, [r4, #0]
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	4641      	mov	r1, r8
 800bf0e:	f000 fb59 	bl	800c5c4 <memmove>
 800bf12:	68a3      	ldr	r3, [r4, #8]
 800bf14:	1b9b      	subs	r3, r3, r6
 800bf16:	60a3      	str	r3, [r4, #8]
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	4433      	add	r3, r6
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	2000      	movs	r0, #0
 800bf20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf24:	462a      	mov	r2, r5
 800bf26:	f001 fdab 	bl	800da80 <_realloc_r>
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d1e0      	bne.n	800bef2 <__ssputs_r+0x5a>
 800bf30:	6921      	ldr	r1, [r4, #16]
 800bf32:	4650      	mov	r0, sl
 800bf34:	f7ff fd80 	bl	800ba38 <_free_r>
 800bf38:	230c      	movs	r3, #12
 800bf3a:	f8ca 3000 	str.w	r3, [sl]
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4a:	e7e9      	b.n	800bf20 <__ssputs_r+0x88>

0800bf4c <_svfiprintf_r>:
 800bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf50:	4698      	mov	r8, r3
 800bf52:	898b      	ldrh	r3, [r1, #12]
 800bf54:	061b      	lsls	r3, r3, #24
 800bf56:	b09d      	sub	sp, #116	; 0x74
 800bf58:	4607      	mov	r7, r0
 800bf5a:	460d      	mov	r5, r1
 800bf5c:	4614      	mov	r4, r2
 800bf5e:	d50e      	bpl.n	800bf7e <_svfiprintf_r+0x32>
 800bf60:	690b      	ldr	r3, [r1, #16]
 800bf62:	b963      	cbnz	r3, 800bf7e <_svfiprintf_r+0x32>
 800bf64:	2140      	movs	r1, #64	; 0x40
 800bf66:	f7ff fdd3 	bl	800bb10 <_malloc_r>
 800bf6a:	6028      	str	r0, [r5, #0]
 800bf6c:	6128      	str	r0, [r5, #16]
 800bf6e:	b920      	cbnz	r0, 800bf7a <_svfiprintf_r+0x2e>
 800bf70:	230c      	movs	r3, #12
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
 800bf78:	e0d0      	b.n	800c11c <_svfiprintf_r+0x1d0>
 800bf7a:	2340      	movs	r3, #64	; 0x40
 800bf7c:	616b      	str	r3, [r5, #20]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	9309      	str	r3, [sp, #36]	; 0x24
 800bf82:	2320      	movs	r3, #32
 800bf84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf88:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf8c:	2330      	movs	r3, #48	; 0x30
 800bf8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c134 <_svfiprintf_r+0x1e8>
 800bf92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf96:	f04f 0901 	mov.w	r9, #1
 800bf9a:	4623      	mov	r3, r4
 800bf9c:	469a      	mov	sl, r3
 800bf9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa2:	b10a      	cbz	r2, 800bfa8 <_svfiprintf_r+0x5c>
 800bfa4:	2a25      	cmp	r2, #37	; 0x25
 800bfa6:	d1f9      	bne.n	800bf9c <_svfiprintf_r+0x50>
 800bfa8:	ebba 0b04 	subs.w	fp, sl, r4
 800bfac:	d00b      	beq.n	800bfc6 <_svfiprintf_r+0x7a>
 800bfae:	465b      	mov	r3, fp
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	f7ff ff6f 	bl	800be98 <__ssputs_r>
 800bfba:	3001      	adds	r0, #1
 800bfbc:	f000 80a9 	beq.w	800c112 <_svfiprintf_r+0x1c6>
 800bfc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc2:	445a      	add	r2, fp
 800bfc4:	9209      	str	r2, [sp, #36]	; 0x24
 800bfc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 80a1 	beq.w	800c112 <_svfiprintf_r+0x1c6>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfda:	f10a 0a01 	add.w	sl, sl, #1
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	9307      	str	r3, [sp, #28]
 800bfe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfe6:	931a      	str	r3, [sp, #104]	; 0x68
 800bfe8:	4654      	mov	r4, sl
 800bfea:	2205      	movs	r2, #5
 800bfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff0:	4850      	ldr	r0, [pc, #320]	; (800c134 <_svfiprintf_r+0x1e8>)
 800bff2:	f7f4 f8fd 	bl	80001f0 <memchr>
 800bff6:	9a04      	ldr	r2, [sp, #16]
 800bff8:	b9d8      	cbnz	r0, 800c032 <_svfiprintf_r+0xe6>
 800bffa:	06d0      	lsls	r0, r2, #27
 800bffc:	bf44      	itt	mi
 800bffe:	2320      	movmi	r3, #32
 800c000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c004:	0711      	lsls	r1, r2, #28
 800c006:	bf44      	itt	mi
 800c008:	232b      	movmi	r3, #43	; 0x2b
 800c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c00e:	f89a 3000 	ldrb.w	r3, [sl]
 800c012:	2b2a      	cmp	r3, #42	; 0x2a
 800c014:	d015      	beq.n	800c042 <_svfiprintf_r+0xf6>
 800c016:	9a07      	ldr	r2, [sp, #28]
 800c018:	4654      	mov	r4, sl
 800c01a:	2000      	movs	r0, #0
 800c01c:	f04f 0c0a 	mov.w	ip, #10
 800c020:	4621      	mov	r1, r4
 800c022:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c026:	3b30      	subs	r3, #48	; 0x30
 800c028:	2b09      	cmp	r3, #9
 800c02a:	d94d      	bls.n	800c0c8 <_svfiprintf_r+0x17c>
 800c02c:	b1b0      	cbz	r0, 800c05c <_svfiprintf_r+0x110>
 800c02e:	9207      	str	r2, [sp, #28]
 800c030:	e014      	b.n	800c05c <_svfiprintf_r+0x110>
 800c032:	eba0 0308 	sub.w	r3, r0, r8
 800c036:	fa09 f303 	lsl.w	r3, r9, r3
 800c03a:	4313      	orrs	r3, r2
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	46a2      	mov	sl, r4
 800c040:	e7d2      	b.n	800bfe8 <_svfiprintf_r+0x9c>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	1d19      	adds	r1, r3, #4
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	9103      	str	r1, [sp, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bfbb      	ittet	lt
 800c04e:	425b      	neglt	r3, r3
 800c050:	f042 0202 	orrlt.w	r2, r2, #2
 800c054:	9307      	strge	r3, [sp, #28]
 800c056:	9307      	strlt	r3, [sp, #28]
 800c058:	bfb8      	it	lt
 800c05a:	9204      	strlt	r2, [sp, #16]
 800c05c:	7823      	ldrb	r3, [r4, #0]
 800c05e:	2b2e      	cmp	r3, #46	; 0x2e
 800c060:	d10c      	bne.n	800c07c <_svfiprintf_r+0x130>
 800c062:	7863      	ldrb	r3, [r4, #1]
 800c064:	2b2a      	cmp	r3, #42	; 0x2a
 800c066:	d134      	bne.n	800c0d2 <_svfiprintf_r+0x186>
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	1d1a      	adds	r2, r3, #4
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	9203      	str	r2, [sp, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	bfb8      	it	lt
 800c074:	f04f 33ff 	movlt.w	r3, #4294967295
 800c078:	3402      	adds	r4, #2
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c144 <_svfiprintf_r+0x1f8>
 800c080:	7821      	ldrb	r1, [r4, #0]
 800c082:	2203      	movs	r2, #3
 800c084:	4650      	mov	r0, sl
 800c086:	f7f4 f8b3 	bl	80001f0 <memchr>
 800c08a:	b138      	cbz	r0, 800c09c <_svfiprintf_r+0x150>
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	eba0 000a 	sub.w	r0, r0, sl
 800c092:	2240      	movs	r2, #64	; 0x40
 800c094:	4082      	lsls	r2, r0
 800c096:	4313      	orrs	r3, r2
 800c098:	3401      	adds	r4, #1
 800c09a:	9304      	str	r3, [sp, #16]
 800c09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a0:	4825      	ldr	r0, [pc, #148]	; (800c138 <_svfiprintf_r+0x1ec>)
 800c0a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0a6:	2206      	movs	r2, #6
 800c0a8:	f7f4 f8a2 	bl	80001f0 <memchr>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d038      	beq.n	800c122 <_svfiprintf_r+0x1d6>
 800c0b0:	4b22      	ldr	r3, [pc, #136]	; (800c13c <_svfiprintf_r+0x1f0>)
 800c0b2:	bb1b      	cbnz	r3, 800c0fc <_svfiprintf_r+0x1b0>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	3307      	adds	r3, #7
 800c0b8:	f023 0307 	bic.w	r3, r3, #7
 800c0bc:	3308      	adds	r3, #8
 800c0be:	9303      	str	r3, [sp, #12]
 800c0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c2:	4433      	add	r3, r6
 800c0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c6:	e768      	b.n	800bf9a <_svfiprintf_r+0x4e>
 800c0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	e7a6      	b.n	800c020 <_svfiprintf_r+0xd4>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	3401      	adds	r4, #1
 800c0d6:	9305      	str	r3, [sp, #20]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	f04f 0c0a 	mov.w	ip, #10
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0e4:	3a30      	subs	r2, #48	; 0x30
 800c0e6:	2a09      	cmp	r2, #9
 800c0e8:	d903      	bls.n	800c0f2 <_svfiprintf_r+0x1a6>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d0c6      	beq.n	800c07c <_svfiprintf_r+0x130>
 800c0ee:	9105      	str	r1, [sp, #20]
 800c0f0:	e7c4      	b.n	800c07c <_svfiprintf_r+0x130>
 800c0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e7f0      	b.n	800c0de <_svfiprintf_r+0x192>
 800c0fc:	ab03      	add	r3, sp, #12
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	462a      	mov	r2, r5
 800c102:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <_svfiprintf_r+0x1f4>)
 800c104:	a904      	add	r1, sp, #16
 800c106:	4638      	mov	r0, r7
 800c108:	f3af 8000 	nop.w
 800c10c:	1c42      	adds	r2, r0, #1
 800c10e:	4606      	mov	r6, r0
 800c110:	d1d6      	bne.n	800c0c0 <_svfiprintf_r+0x174>
 800c112:	89ab      	ldrh	r3, [r5, #12]
 800c114:	065b      	lsls	r3, r3, #25
 800c116:	f53f af2d 	bmi.w	800bf74 <_svfiprintf_r+0x28>
 800c11a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c11c:	b01d      	add	sp, #116	; 0x74
 800c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c122:	ab03      	add	r3, sp, #12
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	462a      	mov	r2, r5
 800c128:	4b05      	ldr	r3, [pc, #20]	; (800c140 <_svfiprintf_r+0x1f4>)
 800c12a:	a904      	add	r1, sp, #16
 800c12c:	4638      	mov	r0, r7
 800c12e:	f000 f879 	bl	800c224 <_printf_i>
 800c132:	e7eb      	b.n	800c10c <_svfiprintf_r+0x1c0>
 800c134:	0800e7a4 	.word	0x0800e7a4
 800c138:	0800e7ae 	.word	0x0800e7ae
 800c13c:	00000000 	.word	0x00000000
 800c140:	0800be99 	.word	0x0800be99
 800c144:	0800e7aa 	.word	0x0800e7aa

0800c148 <_printf_common>:
 800c148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c14c:	4616      	mov	r6, r2
 800c14e:	4699      	mov	r9, r3
 800c150:	688a      	ldr	r2, [r1, #8]
 800c152:	690b      	ldr	r3, [r1, #16]
 800c154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c158:	4293      	cmp	r3, r2
 800c15a:	bfb8      	it	lt
 800c15c:	4613      	movlt	r3, r2
 800c15e:	6033      	str	r3, [r6, #0]
 800c160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c164:	4607      	mov	r7, r0
 800c166:	460c      	mov	r4, r1
 800c168:	b10a      	cbz	r2, 800c16e <_printf_common+0x26>
 800c16a:	3301      	adds	r3, #1
 800c16c:	6033      	str	r3, [r6, #0]
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	0699      	lsls	r1, r3, #26
 800c172:	bf42      	ittt	mi
 800c174:	6833      	ldrmi	r3, [r6, #0]
 800c176:	3302      	addmi	r3, #2
 800c178:	6033      	strmi	r3, [r6, #0]
 800c17a:	6825      	ldr	r5, [r4, #0]
 800c17c:	f015 0506 	ands.w	r5, r5, #6
 800c180:	d106      	bne.n	800c190 <_printf_common+0x48>
 800c182:	f104 0a19 	add.w	sl, r4, #25
 800c186:	68e3      	ldr	r3, [r4, #12]
 800c188:	6832      	ldr	r2, [r6, #0]
 800c18a:	1a9b      	subs	r3, r3, r2
 800c18c:	42ab      	cmp	r3, r5
 800c18e:	dc26      	bgt.n	800c1de <_printf_common+0x96>
 800c190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c194:	1e13      	subs	r3, r2, #0
 800c196:	6822      	ldr	r2, [r4, #0]
 800c198:	bf18      	it	ne
 800c19a:	2301      	movne	r3, #1
 800c19c:	0692      	lsls	r2, r2, #26
 800c19e:	d42b      	bmi.n	800c1f8 <_printf_common+0xb0>
 800c1a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	47c0      	blx	r8
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	d01e      	beq.n	800c1ec <_printf_common+0xa4>
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	6922      	ldr	r2, [r4, #16]
 800c1b2:	f003 0306 	and.w	r3, r3, #6
 800c1b6:	2b04      	cmp	r3, #4
 800c1b8:	bf02      	ittt	eq
 800c1ba:	68e5      	ldreq	r5, [r4, #12]
 800c1bc:	6833      	ldreq	r3, [r6, #0]
 800c1be:	1aed      	subeq	r5, r5, r3
 800c1c0:	68a3      	ldr	r3, [r4, #8]
 800c1c2:	bf0c      	ite	eq
 800c1c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1c8:	2500      	movne	r5, #0
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	bfc4      	itt	gt
 800c1ce:	1a9b      	subgt	r3, r3, r2
 800c1d0:	18ed      	addgt	r5, r5, r3
 800c1d2:	2600      	movs	r6, #0
 800c1d4:	341a      	adds	r4, #26
 800c1d6:	42b5      	cmp	r5, r6
 800c1d8:	d11a      	bne.n	800c210 <_printf_common+0xc8>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e008      	b.n	800c1f0 <_printf_common+0xa8>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	4652      	mov	r2, sl
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	47c0      	blx	r8
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d103      	bne.n	800c1f4 <_printf_common+0xac>
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f4:	3501      	adds	r5, #1
 800c1f6:	e7c6      	b.n	800c186 <_printf_common+0x3e>
 800c1f8:	18e1      	adds	r1, r4, r3
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	2030      	movs	r0, #48	; 0x30
 800c1fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c202:	4422      	add	r2, r4
 800c204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c20c:	3302      	adds	r3, #2
 800c20e:	e7c7      	b.n	800c1a0 <_printf_common+0x58>
 800c210:	2301      	movs	r3, #1
 800c212:	4622      	mov	r2, r4
 800c214:	4649      	mov	r1, r9
 800c216:	4638      	mov	r0, r7
 800c218:	47c0      	blx	r8
 800c21a:	3001      	adds	r0, #1
 800c21c:	d0e6      	beq.n	800c1ec <_printf_common+0xa4>
 800c21e:	3601      	adds	r6, #1
 800c220:	e7d9      	b.n	800c1d6 <_printf_common+0x8e>
	...

0800c224 <_printf_i>:
 800c224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c228:	7e0f      	ldrb	r7, [r1, #24]
 800c22a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c22c:	2f78      	cmp	r7, #120	; 0x78
 800c22e:	4691      	mov	r9, r2
 800c230:	4680      	mov	r8, r0
 800c232:	460c      	mov	r4, r1
 800c234:	469a      	mov	sl, r3
 800c236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c23a:	d807      	bhi.n	800c24c <_printf_i+0x28>
 800c23c:	2f62      	cmp	r7, #98	; 0x62
 800c23e:	d80a      	bhi.n	800c256 <_printf_i+0x32>
 800c240:	2f00      	cmp	r7, #0
 800c242:	f000 80d4 	beq.w	800c3ee <_printf_i+0x1ca>
 800c246:	2f58      	cmp	r7, #88	; 0x58
 800c248:	f000 80c0 	beq.w	800c3cc <_printf_i+0x1a8>
 800c24c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c254:	e03a      	b.n	800c2cc <_printf_i+0xa8>
 800c256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c25a:	2b15      	cmp	r3, #21
 800c25c:	d8f6      	bhi.n	800c24c <_printf_i+0x28>
 800c25e:	a101      	add	r1, pc, #4	; (adr r1, 800c264 <_printf_i+0x40>)
 800c260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c264:	0800c2bd 	.word	0x0800c2bd
 800c268:	0800c2d1 	.word	0x0800c2d1
 800c26c:	0800c24d 	.word	0x0800c24d
 800c270:	0800c24d 	.word	0x0800c24d
 800c274:	0800c24d 	.word	0x0800c24d
 800c278:	0800c24d 	.word	0x0800c24d
 800c27c:	0800c2d1 	.word	0x0800c2d1
 800c280:	0800c24d 	.word	0x0800c24d
 800c284:	0800c24d 	.word	0x0800c24d
 800c288:	0800c24d 	.word	0x0800c24d
 800c28c:	0800c24d 	.word	0x0800c24d
 800c290:	0800c3d5 	.word	0x0800c3d5
 800c294:	0800c2fd 	.word	0x0800c2fd
 800c298:	0800c38f 	.word	0x0800c38f
 800c29c:	0800c24d 	.word	0x0800c24d
 800c2a0:	0800c24d 	.word	0x0800c24d
 800c2a4:	0800c3f7 	.word	0x0800c3f7
 800c2a8:	0800c24d 	.word	0x0800c24d
 800c2ac:	0800c2fd 	.word	0x0800c2fd
 800c2b0:	0800c24d 	.word	0x0800c24d
 800c2b4:	0800c24d 	.word	0x0800c24d
 800c2b8:	0800c397 	.word	0x0800c397
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	1d1a      	adds	r2, r3, #4
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	602a      	str	r2, [r5, #0]
 800c2c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e09f      	b.n	800c410 <_printf_i+0x1ec>
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	682b      	ldr	r3, [r5, #0]
 800c2d4:	0607      	lsls	r7, r0, #24
 800c2d6:	f103 0104 	add.w	r1, r3, #4
 800c2da:	6029      	str	r1, [r5, #0]
 800c2dc:	d501      	bpl.n	800c2e2 <_printf_i+0xbe>
 800c2de:	681e      	ldr	r6, [r3, #0]
 800c2e0:	e003      	b.n	800c2ea <_printf_i+0xc6>
 800c2e2:	0646      	lsls	r6, r0, #25
 800c2e4:	d5fb      	bpl.n	800c2de <_printf_i+0xba>
 800c2e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2ea:	2e00      	cmp	r6, #0
 800c2ec:	da03      	bge.n	800c2f6 <_printf_i+0xd2>
 800c2ee:	232d      	movs	r3, #45	; 0x2d
 800c2f0:	4276      	negs	r6, r6
 800c2f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2f6:	485a      	ldr	r0, [pc, #360]	; (800c460 <_printf_i+0x23c>)
 800c2f8:	230a      	movs	r3, #10
 800c2fa:	e012      	b.n	800c322 <_printf_i+0xfe>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	6820      	ldr	r0, [r4, #0]
 800c300:	1d19      	adds	r1, r3, #4
 800c302:	6029      	str	r1, [r5, #0]
 800c304:	0605      	lsls	r5, r0, #24
 800c306:	d501      	bpl.n	800c30c <_printf_i+0xe8>
 800c308:	681e      	ldr	r6, [r3, #0]
 800c30a:	e002      	b.n	800c312 <_printf_i+0xee>
 800c30c:	0641      	lsls	r1, r0, #25
 800c30e:	d5fb      	bpl.n	800c308 <_printf_i+0xe4>
 800c310:	881e      	ldrh	r6, [r3, #0]
 800c312:	4853      	ldr	r0, [pc, #332]	; (800c460 <_printf_i+0x23c>)
 800c314:	2f6f      	cmp	r7, #111	; 0x6f
 800c316:	bf0c      	ite	eq
 800c318:	2308      	moveq	r3, #8
 800c31a:	230a      	movne	r3, #10
 800c31c:	2100      	movs	r1, #0
 800c31e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c322:	6865      	ldr	r5, [r4, #4]
 800c324:	60a5      	str	r5, [r4, #8]
 800c326:	2d00      	cmp	r5, #0
 800c328:	bfa2      	ittt	ge
 800c32a:	6821      	ldrge	r1, [r4, #0]
 800c32c:	f021 0104 	bicge.w	r1, r1, #4
 800c330:	6021      	strge	r1, [r4, #0]
 800c332:	b90e      	cbnz	r6, 800c338 <_printf_i+0x114>
 800c334:	2d00      	cmp	r5, #0
 800c336:	d04b      	beq.n	800c3d0 <_printf_i+0x1ac>
 800c338:	4615      	mov	r5, r2
 800c33a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c33e:	fb03 6711 	mls	r7, r3, r1, r6
 800c342:	5dc7      	ldrb	r7, [r0, r7]
 800c344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c348:	4637      	mov	r7, r6
 800c34a:	42bb      	cmp	r3, r7
 800c34c:	460e      	mov	r6, r1
 800c34e:	d9f4      	bls.n	800c33a <_printf_i+0x116>
 800c350:	2b08      	cmp	r3, #8
 800c352:	d10b      	bne.n	800c36c <_printf_i+0x148>
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	07de      	lsls	r6, r3, #31
 800c358:	d508      	bpl.n	800c36c <_printf_i+0x148>
 800c35a:	6923      	ldr	r3, [r4, #16]
 800c35c:	6861      	ldr	r1, [r4, #4]
 800c35e:	4299      	cmp	r1, r3
 800c360:	bfde      	ittt	le
 800c362:	2330      	movle	r3, #48	; 0x30
 800c364:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c36c:	1b52      	subs	r2, r2, r5
 800c36e:	6122      	str	r2, [r4, #16]
 800c370:	f8cd a000 	str.w	sl, [sp]
 800c374:	464b      	mov	r3, r9
 800c376:	aa03      	add	r2, sp, #12
 800c378:	4621      	mov	r1, r4
 800c37a:	4640      	mov	r0, r8
 800c37c:	f7ff fee4 	bl	800c148 <_printf_common>
 800c380:	3001      	adds	r0, #1
 800c382:	d14a      	bne.n	800c41a <_printf_i+0x1f6>
 800c384:	f04f 30ff 	mov.w	r0, #4294967295
 800c388:	b004      	add	sp, #16
 800c38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	f043 0320 	orr.w	r3, r3, #32
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	4833      	ldr	r0, [pc, #204]	; (800c464 <_printf_i+0x240>)
 800c398:	2778      	movs	r7, #120	; 0x78
 800c39a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	6829      	ldr	r1, [r5, #0]
 800c3a2:	061f      	lsls	r7, r3, #24
 800c3a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3a8:	d402      	bmi.n	800c3b0 <_printf_i+0x18c>
 800c3aa:	065f      	lsls	r7, r3, #25
 800c3ac:	bf48      	it	mi
 800c3ae:	b2b6      	uxthmi	r6, r6
 800c3b0:	07df      	lsls	r7, r3, #31
 800c3b2:	bf48      	it	mi
 800c3b4:	f043 0320 	orrmi.w	r3, r3, #32
 800c3b8:	6029      	str	r1, [r5, #0]
 800c3ba:	bf48      	it	mi
 800c3bc:	6023      	strmi	r3, [r4, #0]
 800c3be:	b91e      	cbnz	r6, 800c3c8 <_printf_i+0x1a4>
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	f023 0320 	bic.w	r3, r3, #32
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	2310      	movs	r3, #16
 800c3ca:	e7a7      	b.n	800c31c <_printf_i+0xf8>
 800c3cc:	4824      	ldr	r0, [pc, #144]	; (800c460 <_printf_i+0x23c>)
 800c3ce:	e7e4      	b.n	800c39a <_printf_i+0x176>
 800c3d0:	4615      	mov	r5, r2
 800c3d2:	e7bd      	b.n	800c350 <_printf_i+0x12c>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	6826      	ldr	r6, [r4, #0]
 800c3d8:	6961      	ldr	r1, [r4, #20]
 800c3da:	1d18      	adds	r0, r3, #4
 800c3dc:	6028      	str	r0, [r5, #0]
 800c3de:	0635      	lsls	r5, r6, #24
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	d501      	bpl.n	800c3e8 <_printf_i+0x1c4>
 800c3e4:	6019      	str	r1, [r3, #0]
 800c3e6:	e002      	b.n	800c3ee <_printf_i+0x1ca>
 800c3e8:	0670      	lsls	r0, r6, #25
 800c3ea:	d5fb      	bpl.n	800c3e4 <_printf_i+0x1c0>
 800c3ec:	8019      	strh	r1, [r3, #0]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	6123      	str	r3, [r4, #16]
 800c3f2:	4615      	mov	r5, r2
 800c3f4:	e7bc      	b.n	800c370 <_printf_i+0x14c>
 800c3f6:	682b      	ldr	r3, [r5, #0]
 800c3f8:	1d1a      	adds	r2, r3, #4
 800c3fa:	602a      	str	r2, [r5, #0]
 800c3fc:	681d      	ldr	r5, [r3, #0]
 800c3fe:	6862      	ldr	r2, [r4, #4]
 800c400:	2100      	movs	r1, #0
 800c402:	4628      	mov	r0, r5
 800c404:	f7f3 fef4 	bl	80001f0 <memchr>
 800c408:	b108      	cbz	r0, 800c40e <_printf_i+0x1ea>
 800c40a:	1b40      	subs	r0, r0, r5
 800c40c:	6060      	str	r0, [r4, #4]
 800c40e:	6863      	ldr	r3, [r4, #4]
 800c410:	6123      	str	r3, [r4, #16]
 800c412:	2300      	movs	r3, #0
 800c414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c418:	e7aa      	b.n	800c370 <_printf_i+0x14c>
 800c41a:	6923      	ldr	r3, [r4, #16]
 800c41c:	462a      	mov	r2, r5
 800c41e:	4649      	mov	r1, r9
 800c420:	4640      	mov	r0, r8
 800c422:	47d0      	blx	sl
 800c424:	3001      	adds	r0, #1
 800c426:	d0ad      	beq.n	800c384 <_printf_i+0x160>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	079b      	lsls	r3, r3, #30
 800c42c:	d413      	bmi.n	800c456 <_printf_i+0x232>
 800c42e:	68e0      	ldr	r0, [r4, #12]
 800c430:	9b03      	ldr	r3, [sp, #12]
 800c432:	4298      	cmp	r0, r3
 800c434:	bfb8      	it	lt
 800c436:	4618      	movlt	r0, r3
 800c438:	e7a6      	b.n	800c388 <_printf_i+0x164>
 800c43a:	2301      	movs	r3, #1
 800c43c:	4632      	mov	r2, r6
 800c43e:	4649      	mov	r1, r9
 800c440:	4640      	mov	r0, r8
 800c442:	47d0      	blx	sl
 800c444:	3001      	adds	r0, #1
 800c446:	d09d      	beq.n	800c384 <_printf_i+0x160>
 800c448:	3501      	adds	r5, #1
 800c44a:	68e3      	ldr	r3, [r4, #12]
 800c44c:	9903      	ldr	r1, [sp, #12]
 800c44e:	1a5b      	subs	r3, r3, r1
 800c450:	42ab      	cmp	r3, r5
 800c452:	dcf2      	bgt.n	800c43a <_printf_i+0x216>
 800c454:	e7eb      	b.n	800c42e <_printf_i+0x20a>
 800c456:	2500      	movs	r5, #0
 800c458:	f104 0619 	add.w	r6, r4, #25
 800c45c:	e7f5      	b.n	800c44a <_printf_i+0x226>
 800c45e:	bf00      	nop
 800c460:	0800e7b5 	.word	0x0800e7b5
 800c464:	0800e7c6 	.word	0x0800e7c6

0800c468 <__sflush_r>:
 800c468:	898a      	ldrh	r2, [r1, #12]
 800c46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46e:	4605      	mov	r5, r0
 800c470:	0710      	lsls	r0, r2, #28
 800c472:	460c      	mov	r4, r1
 800c474:	d458      	bmi.n	800c528 <__sflush_r+0xc0>
 800c476:	684b      	ldr	r3, [r1, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dc05      	bgt.n	800c488 <__sflush_r+0x20>
 800c47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dc02      	bgt.n	800c488 <__sflush_r+0x20>
 800c482:	2000      	movs	r0, #0
 800c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c48a:	2e00      	cmp	r6, #0
 800c48c:	d0f9      	beq.n	800c482 <__sflush_r+0x1a>
 800c48e:	2300      	movs	r3, #0
 800c490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c494:	682f      	ldr	r7, [r5, #0]
 800c496:	6a21      	ldr	r1, [r4, #32]
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	d032      	beq.n	800c502 <__sflush_r+0x9a>
 800c49c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	075a      	lsls	r2, r3, #29
 800c4a2:	d505      	bpl.n	800c4b0 <__sflush_r+0x48>
 800c4a4:	6863      	ldr	r3, [r4, #4]
 800c4a6:	1ac0      	subs	r0, r0, r3
 800c4a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4aa:	b10b      	cbz	r3, 800c4b0 <__sflush_r+0x48>
 800c4ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4ae:	1ac0      	subs	r0, r0, r3
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4b6:	6a21      	ldr	r1, [r4, #32]
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	47b0      	blx	r6
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	d106      	bne.n	800c4d0 <__sflush_r+0x68>
 800c4c2:	6829      	ldr	r1, [r5, #0]
 800c4c4:	291d      	cmp	r1, #29
 800c4c6:	d82b      	bhi.n	800c520 <__sflush_r+0xb8>
 800c4c8:	4a29      	ldr	r2, [pc, #164]	; (800c570 <__sflush_r+0x108>)
 800c4ca:	410a      	asrs	r2, r1
 800c4cc:	07d6      	lsls	r6, r2, #31
 800c4ce:	d427      	bmi.n	800c520 <__sflush_r+0xb8>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	6062      	str	r2, [r4, #4]
 800c4d4:	04d9      	lsls	r1, r3, #19
 800c4d6:	6922      	ldr	r2, [r4, #16]
 800c4d8:	6022      	str	r2, [r4, #0]
 800c4da:	d504      	bpl.n	800c4e6 <__sflush_r+0x7e>
 800c4dc:	1c42      	adds	r2, r0, #1
 800c4de:	d101      	bne.n	800c4e4 <__sflush_r+0x7c>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b903      	cbnz	r3, 800c4e6 <__sflush_r+0x7e>
 800c4e4:	6560      	str	r0, [r4, #84]	; 0x54
 800c4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e8:	602f      	str	r7, [r5, #0]
 800c4ea:	2900      	cmp	r1, #0
 800c4ec:	d0c9      	beq.n	800c482 <__sflush_r+0x1a>
 800c4ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d002      	beq.n	800c4fc <__sflush_r+0x94>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7ff fa9e 	bl	800ba38 <_free_r>
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	6360      	str	r0, [r4, #52]	; 0x34
 800c500:	e7c0      	b.n	800c484 <__sflush_r+0x1c>
 800c502:	2301      	movs	r3, #1
 800c504:	4628      	mov	r0, r5
 800c506:	47b0      	blx	r6
 800c508:	1c41      	adds	r1, r0, #1
 800c50a:	d1c8      	bne.n	800c49e <__sflush_r+0x36>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0c5      	beq.n	800c49e <__sflush_r+0x36>
 800c512:	2b1d      	cmp	r3, #29
 800c514:	d001      	beq.n	800c51a <__sflush_r+0xb2>
 800c516:	2b16      	cmp	r3, #22
 800c518:	d101      	bne.n	800c51e <__sflush_r+0xb6>
 800c51a:	602f      	str	r7, [r5, #0]
 800c51c:	e7b1      	b.n	800c482 <__sflush_r+0x1a>
 800c51e:	89a3      	ldrh	r3, [r4, #12]
 800c520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c524:	81a3      	strh	r3, [r4, #12]
 800c526:	e7ad      	b.n	800c484 <__sflush_r+0x1c>
 800c528:	690f      	ldr	r7, [r1, #16]
 800c52a:	2f00      	cmp	r7, #0
 800c52c:	d0a9      	beq.n	800c482 <__sflush_r+0x1a>
 800c52e:	0793      	lsls	r3, r2, #30
 800c530:	680e      	ldr	r6, [r1, #0]
 800c532:	bf08      	it	eq
 800c534:	694b      	ldreq	r3, [r1, #20]
 800c536:	600f      	str	r7, [r1, #0]
 800c538:	bf18      	it	ne
 800c53a:	2300      	movne	r3, #0
 800c53c:	eba6 0807 	sub.w	r8, r6, r7
 800c540:	608b      	str	r3, [r1, #8]
 800c542:	f1b8 0f00 	cmp.w	r8, #0
 800c546:	dd9c      	ble.n	800c482 <__sflush_r+0x1a>
 800c548:	6a21      	ldr	r1, [r4, #32]
 800c54a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c54c:	4643      	mov	r3, r8
 800c54e:	463a      	mov	r2, r7
 800c550:	4628      	mov	r0, r5
 800c552:	47b0      	blx	r6
 800c554:	2800      	cmp	r0, #0
 800c556:	dc06      	bgt.n	800c566 <__sflush_r+0xfe>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	e78e      	b.n	800c484 <__sflush_r+0x1c>
 800c566:	4407      	add	r7, r0
 800c568:	eba8 0800 	sub.w	r8, r8, r0
 800c56c:	e7e9      	b.n	800c542 <__sflush_r+0xda>
 800c56e:	bf00      	nop
 800c570:	dfbffffe 	.word	0xdfbffffe

0800c574 <_fflush_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	690b      	ldr	r3, [r1, #16]
 800c578:	4605      	mov	r5, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	b913      	cbnz	r3, 800c584 <_fflush_r+0x10>
 800c57e:	2500      	movs	r5, #0
 800c580:	4628      	mov	r0, r5
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	b118      	cbz	r0, 800c58e <_fflush_r+0x1a>
 800c586:	6a03      	ldr	r3, [r0, #32]
 800c588:	b90b      	cbnz	r3, 800c58e <_fflush_r+0x1a>
 800c58a:	f7ff f92d 	bl	800b7e8 <__sinit>
 800c58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d0f3      	beq.n	800c57e <_fflush_r+0xa>
 800c596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c598:	07d0      	lsls	r0, r2, #31
 800c59a:	d404      	bmi.n	800c5a6 <_fflush_r+0x32>
 800c59c:	0599      	lsls	r1, r3, #22
 800c59e:	d402      	bmi.n	800c5a6 <_fflush_r+0x32>
 800c5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a2:	f7ff fa47 	bl	800ba34 <__retarget_lock_acquire_recursive>
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	f7ff ff5d 	bl	800c468 <__sflush_r>
 800c5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5b0:	07da      	lsls	r2, r3, #31
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	d4e4      	bmi.n	800c580 <_fflush_r+0xc>
 800c5b6:	89a3      	ldrh	r3, [r4, #12]
 800c5b8:	059b      	lsls	r3, r3, #22
 800c5ba:	d4e1      	bmi.n	800c580 <_fflush_r+0xc>
 800c5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5be:	f7ff fa3a 	bl	800ba36 <__retarget_lock_release_recursive>
 800c5c2:	e7dd      	b.n	800c580 <_fflush_r+0xc>

0800c5c4 <memmove>:
 800c5c4:	4288      	cmp	r0, r1
 800c5c6:	b510      	push	{r4, lr}
 800c5c8:	eb01 0402 	add.w	r4, r1, r2
 800c5cc:	d902      	bls.n	800c5d4 <memmove+0x10>
 800c5ce:	4284      	cmp	r4, r0
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	d807      	bhi.n	800c5e4 <memmove+0x20>
 800c5d4:	1e43      	subs	r3, r0, #1
 800c5d6:	42a1      	cmp	r1, r4
 800c5d8:	d008      	beq.n	800c5ec <memmove+0x28>
 800c5da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5e2:	e7f8      	b.n	800c5d6 <memmove+0x12>
 800c5e4:	4402      	add	r2, r0
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	428a      	cmp	r2, r1
 800c5ea:	d100      	bne.n	800c5ee <memmove+0x2a>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5f6:	e7f7      	b.n	800c5e8 <memmove+0x24>

0800c5f8 <_sbrk_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4d06      	ldr	r5, [pc, #24]	; (800c614 <_sbrk_r+0x1c>)
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	4604      	mov	r4, r0
 800c600:	4608      	mov	r0, r1
 800c602:	602b      	str	r3, [r5, #0]
 800c604:	f7f5 fa10 	bl	8001a28 <_sbrk>
 800c608:	1c43      	adds	r3, r0, #1
 800c60a:	d102      	bne.n	800c612 <_sbrk_r+0x1a>
 800c60c:	682b      	ldr	r3, [r5, #0]
 800c60e:	b103      	cbz	r3, 800c612 <_sbrk_r+0x1a>
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	bd38      	pop	{r3, r4, r5, pc}
 800c614:	200027f0 	.word	0x200027f0

0800c618 <strcpy>:
 800c618:	4603      	mov	r3, r0
 800c61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c61e:	f803 2b01 	strb.w	r2, [r3], #1
 800c622:	2a00      	cmp	r2, #0
 800c624:	d1f9      	bne.n	800c61a <strcpy+0x2>
 800c626:	4770      	bx	lr

0800c628 <memcpy>:
 800c628:	440a      	add	r2, r1
 800c62a:	4291      	cmp	r1, r2
 800c62c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c630:	d100      	bne.n	800c634 <memcpy+0xc>
 800c632:	4770      	bx	lr
 800c634:	b510      	push	{r4, lr}
 800c636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c63e:	4291      	cmp	r1, r2
 800c640:	d1f9      	bne.n	800c636 <memcpy+0xe>
 800c642:	bd10      	pop	{r4, pc}

0800c644 <quorem>:
 800c644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	6903      	ldr	r3, [r0, #16]
 800c64a:	690c      	ldr	r4, [r1, #16]
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	4607      	mov	r7, r0
 800c650:	db7e      	blt.n	800c750 <quorem+0x10c>
 800c652:	3c01      	subs	r4, #1
 800c654:	f101 0814 	add.w	r8, r1, #20
 800c658:	f100 0514 	add.w	r5, r0, #20
 800c65c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c66a:	3301      	adds	r3, #1
 800c66c:	429a      	cmp	r2, r3
 800c66e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c672:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c676:	fbb2 f6f3 	udiv	r6, r2, r3
 800c67a:	d331      	bcc.n	800c6e0 <quorem+0x9c>
 800c67c:	f04f 0e00 	mov.w	lr, #0
 800c680:	4640      	mov	r0, r8
 800c682:	46ac      	mov	ip, r5
 800c684:	46f2      	mov	sl, lr
 800c686:	f850 2b04 	ldr.w	r2, [r0], #4
 800c68a:	b293      	uxth	r3, r2
 800c68c:	fb06 e303 	mla	r3, r6, r3, lr
 800c690:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c694:	0c1a      	lsrs	r2, r3, #16
 800c696:	b29b      	uxth	r3, r3
 800c698:	ebaa 0303 	sub.w	r3, sl, r3
 800c69c:	f8dc a000 	ldr.w	sl, [ip]
 800c6a0:	fa13 f38a 	uxtah	r3, r3, sl
 800c6a4:	fb06 220e 	mla	r2, r6, lr, r2
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	9b00      	ldr	r3, [sp, #0]
 800c6ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6b0:	b292      	uxth	r2, r2
 800c6b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6be:	4581      	cmp	r9, r0
 800c6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6c4:	f84c 3b04 	str.w	r3, [ip], #4
 800c6c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6cc:	d2db      	bcs.n	800c686 <quorem+0x42>
 800c6ce:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6d2:	b92b      	cbnz	r3, 800c6e0 <quorem+0x9c>
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	3b04      	subs	r3, #4
 800c6d8:	429d      	cmp	r5, r3
 800c6da:	461a      	mov	r2, r3
 800c6dc:	d32c      	bcc.n	800c738 <quorem+0xf4>
 800c6de:	613c      	str	r4, [r7, #16]
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f001 f8af 	bl	800d844 <__mcmp>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	db22      	blt.n	800c730 <quorem+0xec>
 800c6ea:	3601      	adds	r6, #1
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6f4:	f8d1 c000 	ldr.w	ip, [r1]
 800c6f8:	b293      	uxth	r3, r2
 800c6fa:	1ac3      	subs	r3, r0, r3
 800c6fc:	0c12      	lsrs	r2, r2, #16
 800c6fe:	fa13 f38c 	uxtah	r3, r3, ip
 800c702:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c710:	45c1      	cmp	r9, r8
 800c712:	f841 3b04 	str.w	r3, [r1], #4
 800c716:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c71a:	d2e9      	bcs.n	800c6f0 <quorem+0xac>
 800c71c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c724:	b922      	cbnz	r2, 800c730 <quorem+0xec>
 800c726:	3b04      	subs	r3, #4
 800c728:	429d      	cmp	r5, r3
 800c72a:	461a      	mov	r2, r3
 800c72c:	d30a      	bcc.n	800c744 <quorem+0x100>
 800c72e:	613c      	str	r4, [r7, #16]
 800c730:	4630      	mov	r0, r6
 800c732:	b003      	add	sp, #12
 800c734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c738:	6812      	ldr	r2, [r2, #0]
 800c73a:	3b04      	subs	r3, #4
 800c73c:	2a00      	cmp	r2, #0
 800c73e:	d1ce      	bne.n	800c6de <quorem+0x9a>
 800c740:	3c01      	subs	r4, #1
 800c742:	e7c9      	b.n	800c6d8 <quorem+0x94>
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	3b04      	subs	r3, #4
 800c748:	2a00      	cmp	r2, #0
 800c74a:	d1f0      	bne.n	800c72e <quorem+0xea>
 800c74c:	3c01      	subs	r4, #1
 800c74e:	e7eb      	b.n	800c728 <quorem+0xe4>
 800c750:	2000      	movs	r0, #0
 800c752:	e7ee      	b.n	800c732 <quorem+0xee>
 800c754:	0000      	movs	r0, r0
	...

0800c758 <_dtoa_r>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	ed2d 8b04 	vpush	{d8-d9}
 800c760:	69c5      	ldr	r5, [r0, #28]
 800c762:	b093      	sub	sp, #76	; 0x4c
 800c764:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c768:	ec57 6b10 	vmov	r6, r7, d0
 800c76c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c770:	9107      	str	r1, [sp, #28]
 800c772:	4604      	mov	r4, r0
 800c774:	920a      	str	r2, [sp, #40]	; 0x28
 800c776:	930d      	str	r3, [sp, #52]	; 0x34
 800c778:	b975      	cbnz	r5, 800c798 <_dtoa_r+0x40>
 800c77a:	2010      	movs	r0, #16
 800c77c:	f000 fdde 	bl	800d33c <malloc>
 800c780:	4602      	mov	r2, r0
 800c782:	61e0      	str	r0, [r4, #28]
 800c784:	b920      	cbnz	r0, 800c790 <_dtoa_r+0x38>
 800c786:	4bae      	ldr	r3, [pc, #696]	; (800ca40 <_dtoa_r+0x2e8>)
 800c788:	21ef      	movs	r1, #239	; 0xef
 800c78a:	48ae      	ldr	r0, [pc, #696]	; (800ca44 <_dtoa_r+0x2ec>)
 800c78c:	f001 f9a8 	bl	800dae0 <__assert_func>
 800c790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c794:	6005      	str	r5, [r0, #0]
 800c796:	60c5      	str	r5, [r0, #12]
 800c798:	69e3      	ldr	r3, [r4, #28]
 800c79a:	6819      	ldr	r1, [r3, #0]
 800c79c:	b151      	cbz	r1, 800c7b4 <_dtoa_r+0x5c>
 800c79e:	685a      	ldr	r2, [r3, #4]
 800c7a0:	604a      	str	r2, [r1, #4]
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4093      	lsls	r3, r2
 800c7a6:	608b      	str	r3, [r1, #8]
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fe0f 	bl	800d3cc <_Bfree>
 800c7ae:	69e3      	ldr	r3, [r4, #28]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	1e3b      	subs	r3, r7, #0
 800c7b6:	bfbb      	ittet	lt
 800c7b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7bc:	9303      	strlt	r3, [sp, #12]
 800c7be:	2300      	movge	r3, #0
 800c7c0:	2201      	movlt	r2, #1
 800c7c2:	bfac      	ite	ge
 800c7c4:	f8c8 3000 	strge.w	r3, [r8]
 800c7c8:	f8c8 2000 	strlt.w	r2, [r8]
 800c7cc:	4b9e      	ldr	r3, [pc, #632]	; (800ca48 <_dtoa_r+0x2f0>)
 800c7ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c7d2:	ea33 0308 	bics.w	r3, r3, r8
 800c7d6:	d11b      	bne.n	800c810 <_dtoa_r+0xb8>
 800c7d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7da:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c7e4:	4333      	orrs	r3, r6
 800c7e6:	f000 8593 	beq.w	800d310 <_dtoa_r+0xbb8>
 800c7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7ec:	b963      	cbnz	r3, 800c808 <_dtoa_r+0xb0>
 800c7ee:	4b97      	ldr	r3, [pc, #604]	; (800ca4c <_dtoa_r+0x2f4>)
 800c7f0:	e027      	b.n	800c842 <_dtoa_r+0xea>
 800c7f2:	4b97      	ldr	r3, [pc, #604]	; (800ca50 <_dtoa_r+0x2f8>)
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	9800      	ldr	r0, [sp, #0]
 800c7fe:	b013      	add	sp, #76	; 0x4c
 800c800:	ecbd 8b04 	vpop	{d8-d9}
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	4b90      	ldr	r3, [pc, #576]	; (800ca4c <_dtoa_r+0x2f4>)
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	3303      	adds	r3, #3
 800c80e:	e7f3      	b.n	800c7f8 <_dtoa_r+0xa0>
 800c810:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c814:	2200      	movs	r2, #0
 800c816:	ec51 0b17 	vmov	r0, r1, d7
 800c81a:	eeb0 8a47 	vmov.f32	s16, s14
 800c81e:	eef0 8a67 	vmov.f32	s17, s15
 800c822:	2300      	movs	r3, #0
 800c824:	f7f4 f958 	bl	8000ad8 <__aeabi_dcmpeq>
 800c828:	4681      	mov	r9, r0
 800c82a:	b160      	cbz	r0, 800c846 <_dtoa_r+0xee>
 800c82c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c82e:	2301      	movs	r3, #1
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 8568 	beq.w	800d30a <_dtoa_r+0xbb2>
 800c83a:	4b86      	ldr	r3, [pc, #536]	; (800ca54 <_dtoa_r+0x2fc>)
 800c83c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	3b01      	subs	r3, #1
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	e7da      	b.n	800c7fc <_dtoa_r+0xa4>
 800c846:	aa10      	add	r2, sp, #64	; 0x40
 800c848:	a911      	add	r1, sp, #68	; 0x44
 800c84a:	4620      	mov	r0, r4
 800c84c:	eeb0 0a48 	vmov.f32	s0, s16
 800c850:	eef0 0a68 	vmov.f32	s1, s17
 800c854:	f001 f89c 	bl	800d990 <__d2b>
 800c858:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c85c:	4682      	mov	sl, r0
 800c85e:	2d00      	cmp	r5, #0
 800c860:	d07f      	beq.n	800c962 <_dtoa_r+0x20a>
 800c862:	ee18 3a90 	vmov	r3, s17
 800c866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c86a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c86e:	ec51 0b18 	vmov	r0, r1, d8
 800c872:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c87a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c87e:	4619      	mov	r1, r3
 800c880:	2200      	movs	r2, #0
 800c882:	4b75      	ldr	r3, [pc, #468]	; (800ca58 <_dtoa_r+0x300>)
 800c884:	f7f3 fd08 	bl	8000298 <__aeabi_dsub>
 800c888:	a367      	add	r3, pc, #412	; (adr r3, 800ca28 <_dtoa_r+0x2d0>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f7f3 febb 	bl	8000608 <__aeabi_dmul>
 800c892:	a367      	add	r3, pc, #412	; (adr r3, 800ca30 <_dtoa_r+0x2d8>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fd00 	bl	800029c <__adddf3>
 800c89c:	4606      	mov	r6, r0
 800c89e:	4628      	mov	r0, r5
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	f7f3 fe47 	bl	8000534 <__aeabi_i2d>
 800c8a6:	a364      	add	r3, pc, #400	; (adr r3, 800ca38 <_dtoa_r+0x2e0>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 feac 	bl	8000608 <__aeabi_dmul>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f3 fcf0 	bl	800029c <__adddf3>
 800c8bc:	4606      	mov	r6, r0
 800c8be:	460f      	mov	r7, r1
 800c8c0:	f7f4 f93c 	bl	8000b3c <__aeabi_d2iz>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4683      	mov	fp, r0
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f4 f90d 	bl	8000aec <__aeabi_dcmplt>
 800c8d2:	b148      	cbz	r0, 800c8e8 <_dtoa_r+0x190>
 800c8d4:	4658      	mov	r0, fp
 800c8d6:	f7f3 fe2d 	bl	8000534 <__aeabi_i2d>
 800c8da:	4632      	mov	r2, r6
 800c8dc:	463b      	mov	r3, r7
 800c8de:	f7f4 f8fb 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8e2:	b908      	cbnz	r0, 800c8e8 <_dtoa_r+0x190>
 800c8e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8e8:	f1bb 0f16 	cmp.w	fp, #22
 800c8ec:	d857      	bhi.n	800c99e <_dtoa_r+0x246>
 800c8ee:	4b5b      	ldr	r3, [pc, #364]	; (800ca5c <_dtoa_r+0x304>)
 800c8f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	ec51 0b18 	vmov	r0, r1, d8
 800c8fc:	f7f4 f8f6 	bl	8000aec <__aeabi_dcmplt>
 800c900:	2800      	cmp	r0, #0
 800c902:	d04e      	beq.n	800c9a2 <_dtoa_r+0x24a>
 800c904:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c908:	2300      	movs	r3, #0
 800c90a:	930c      	str	r3, [sp, #48]	; 0x30
 800c90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c90e:	1b5b      	subs	r3, r3, r5
 800c910:	1e5a      	subs	r2, r3, #1
 800c912:	bf45      	ittet	mi
 800c914:	f1c3 0301 	rsbmi	r3, r3, #1
 800c918:	9305      	strmi	r3, [sp, #20]
 800c91a:	2300      	movpl	r3, #0
 800c91c:	2300      	movmi	r3, #0
 800c91e:	9206      	str	r2, [sp, #24]
 800c920:	bf54      	ite	pl
 800c922:	9305      	strpl	r3, [sp, #20]
 800c924:	9306      	strmi	r3, [sp, #24]
 800c926:	f1bb 0f00 	cmp.w	fp, #0
 800c92a:	db3c      	blt.n	800c9a6 <_dtoa_r+0x24e>
 800c92c:	9b06      	ldr	r3, [sp, #24]
 800c92e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c932:	445b      	add	r3, fp
 800c934:	9306      	str	r3, [sp, #24]
 800c936:	2300      	movs	r3, #0
 800c938:	9308      	str	r3, [sp, #32]
 800c93a:	9b07      	ldr	r3, [sp, #28]
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	d868      	bhi.n	800ca12 <_dtoa_r+0x2ba>
 800c940:	2b05      	cmp	r3, #5
 800c942:	bfc4      	itt	gt
 800c944:	3b04      	subgt	r3, #4
 800c946:	9307      	strgt	r3, [sp, #28]
 800c948:	9b07      	ldr	r3, [sp, #28]
 800c94a:	f1a3 0302 	sub.w	r3, r3, #2
 800c94e:	bfcc      	ite	gt
 800c950:	2500      	movgt	r5, #0
 800c952:	2501      	movle	r5, #1
 800c954:	2b03      	cmp	r3, #3
 800c956:	f200 8085 	bhi.w	800ca64 <_dtoa_r+0x30c>
 800c95a:	e8df f003 	tbb	[pc, r3]
 800c95e:	3b2e      	.short	0x3b2e
 800c960:	5839      	.short	0x5839
 800c962:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c966:	441d      	add	r5, r3
 800c968:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c96c:	2b20      	cmp	r3, #32
 800c96e:	bfc1      	itttt	gt
 800c970:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c974:	fa08 f803 	lslgt.w	r8, r8, r3
 800c978:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c97c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c980:	bfd6      	itet	le
 800c982:	f1c3 0320 	rsble	r3, r3, #32
 800c986:	ea48 0003 	orrgt.w	r0, r8, r3
 800c98a:	fa06 f003 	lslle.w	r0, r6, r3
 800c98e:	f7f3 fdc1 	bl	8000514 <__aeabi_ui2d>
 800c992:	2201      	movs	r2, #1
 800c994:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c998:	3d01      	subs	r5, #1
 800c99a:	920e      	str	r2, [sp, #56]	; 0x38
 800c99c:	e76f      	b.n	800c87e <_dtoa_r+0x126>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e7b3      	b.n	800c90a <_dtoa_r+0x1b2>
 800c9a2:	900c      	str	r0, [sp, #48]	; 0x30
 800c9a4:	e7b2      	b.n	800c90c <_dtoa_r+0x1b4>
 800c9a6:	9b05      	ldr	r3, [sp, #20]
 800c9a8:	eba3 030b 	sub.w	r3, r3, fp
 800c9ac:	9305      	str	r3, [sp, #20]
 800c9ae:	f1cb 0300 	rsb	r3, fp, #0
 800c9b2:	9308      	str	r3, [sp, #32]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9b8:	e7bf      	b.n	800c93a <_dtoa_r+0x1e2>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	dc52      	bgt.n	800ca6a <_dtoa_r+0x312>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	9304      	str	r3, [sp, #16]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	920a      	str	r2, [sp, #40]	; 0x28
 800c9ce:	e00b      	b.n	800c9e8 <_dtoa_r+0x290>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e7f3      	b.n	800c9bc <_dtoa_r+0x264>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9da:	445b      	add	r3, fp
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	bfb8      	it	lt
 800c9e6:	2301      	movlt	r3, #1
 800c9e8:	69e0      	ldr	r0, [r4, #28]
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	2204      	movs	r2, #4
 800c9ee:	f102 0614 	add.w	r6, r2, #20
 800c9f2:	429e      	cmp	r6, r3
 800c9f4:	d93d      	bls.n	800ca72 <_dtoa_r+0x31a>
 800c9f6:	6041      	str	r1, [r0, #4]
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 fca7 	bl	800d34c <_Balloc>
 800c9fe:	9000      	str	r0, [sp, #0]
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d139      	bne.n	800ca78 <_dtoa_r+0x320>
 800ca04:	4b16      	ldr	r3, [pc, #88]	; (800ca60 <_dtoa_r+0x308>)
 800ca06:	4602      	mov	r2, r0
 800ca08:	f240 11af 	movw	r1, #431	; 0x1af
 800ca0c:	e6bd      	b.n	800c78a <_dtoa_r+0x32>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e7e1      	b.n	800c9d6 <_dtoa_r+0x27e>
 800ca12:	2501      	movs	r5, #1
 800ca14:	2300      	movs	r3, #0
 800ca16:	9307      	str	r3, [sp, #28]
 800ca18:	9509      	str	r5, [sp, #36]	; 0x24
 800ca1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	2200      	movs	r2, #0
 800ca24:	2312      	movs	r3, #18
 800ca26:	e7d1      	b.n	800c9cc <_dtoa_r+0x274>
 800ca28:	636f4361 	.word	0x636f4361
 800ca2c:	3fd287a7 	.word	0x3fd287a7
 800ca30:	8b60c8b3 	.word	0x8b60c8b3
 800ca34:	3fc68a28 	.word	0x3fc68a28
 800ca38:	509f79fb 	.word	0x509f79fb
 800ca3c:	3fd34413 	.word	0x3fd34413
 800ca40:	0800e7e6 	.word	0x0800e7e6
 800ca44:	0800e7fd 	.word	0x0800e7fd
 800ca48:	7ff00000 	.word	0x7ff00000
 800ca4c:	0800e7e0 	.word	0x0800e7e0
 800ca50:	0800e7d7 	.word	0x0800e7d7
 800ca54:	0800e7e5 	.word	0x0800e7e5
 800ca58:	3ff80000 	.word	0x3ff80000
 800ca5c:	0800e8e8 	.word	0x0800e8e8
 800ca60:	0800e855 	.word	0x0800e855
 800ca64:	2301      	movs	r3, #1
 800ca66:	9309      	str	r3, [sp, #36]	; 0x24
 800ca68:	e7d7      	b.n	800ca1a <_dtoa_r+0x2c2>
 800ca6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	9304      	str	r3, [sp, #16]
 800ca70:	e7ba      	b.n	800c9e8 <_dtoa_r+0x290>
 800ca72:	3101      	adds	r1, #1
 800ca74:	0052      	lsls	r2, r2, #1
 800ca76:	e7ba      	b.n	800c9ee <_dtoa_r+0x296>
 800ca78:	69e3      	ldr	r3, [r4, #28]
 800ca7a:	9a00      	ldr	r2, [sp, #0]
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	9b04      	ldr	r3, [sp, #16]
 800ca80:	2b0e      	cmp	r3, #14
 800ca82:	f200 80a8 	bhi.w	800cbd6 <_dtoa_r+0x47e>
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	f000 80a5 	beq.w	800cbd6 <_dtoa_r+0x47e>
 800ca8c:	f1bb 0f00 	cmp.w	fp, #0
 800ca90:	dd38      	ble.n	800cb04 <_dtoa_r+0x3ac>
 800ca92:	4bc0      	ldr	r3, [pc, #768]	; (800cd94 <_dtoa_r+0x63c>)
 800ca94:	f00b 020f 	and.w	r2, fp, #15
 800ca98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800caa0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800caa4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800caa8:	d019      	beq.n	800cade <_dtoa_r+0x386>
 800caaa:	4bbb      	ldr	r3, [pc, #748]	; (800cd98 <_dtoa_r+0x640>)
 800caac:	ec51 0b18 	vmov	r0, r1, d8
 800cab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cab4:	f7f3 fed2 	bl	800085c <__aeabi_ddiv>
 800cab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cabc:	f008 080f 	and.w	r8, r8, #15
 800cac0:	2503      	movs	r5, #3
 800cac2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cd98 <_dtoa_r+0x640>
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	d10a      	bne.n	800cae2 <_dtoa_r+0x38a>
 800cacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cad0:	4632      	mov	r2, r6
 800cad2:	463b      	mov	r3, r7
 800cad4:	f7f3 fec2 	bl	800085c <__aeabi_ddiv>
 800cad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cadc:	e02b      	b.n	800cb36 <_dtoa_r+0x3de>
 800cade:	2502      	movs	r5, #2
 800cae0:	e7ef      	b.n	800cac2 <_dtoa_r+0x36a>
 800cae2:	f018 0f01 	tst.w	r8, #1
 800cae6:	d008      	beq.n	800cafa <_dtoa_r+0x3a2>
 800cae8:	4630      	mov	r0, r6
 800caea:	4639      	mov	r1, r7
 800caec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800caf0:	f7f3 fd8a 	bl	8000608 <__aeabi_dmul>
 800caf4:	3501      	adds	r5, #1
 800caf6:	4606      	mov	r6, r0
 800caf8:	460f      	mov	r7, r1
 800cafa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cafe:	f109 0908 	add.w	r9, r9, #8
 800cb02:	e7e0      	b.n	800cac6 <_dtoa_r+0x36e>
 800cb04:	f000 809f 	beq.w	800cc46 <_dtoa_r+0x4ee>
 800cb08:	f1cb 0600 	rsb	r6, fp, #0
 800cb0c:	4ba1      	ldr	r3, [pc, #644]	; (800cd94 <_dtoa_r+0x63c>)
 800cb0e:	4fa2      	ldr	r7, [pc, #648]	; (800cd98 <_dtoa_r+0x640>)
 800cb10:	f006 020f 	and.w	r2, r6, #15
 800cb14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	ec51 0b18 	vmov	r0, r1, d8
 800cb20:	f7f3 fd72 	bl	8000608 <__aeabi_dmul>
 800cb24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb28:	1136      	asrs	r6, r6, #4
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2502      	movs	r5, #2
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	d17e      	bne.n	800cc30 <_dtoa_r+0x4d8>
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1d0      	bne.n	800cad8 <_dtoa_r+0x380>
 800cb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 8084 	beq.w	800cc4a <_dtoa_r+0x4f2>
 800cb42:	4b96      	ldr	r3, [pc, #600]	; (800cd9c <_dtoa_r+0x644>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	4640      	mov	r0, r8
 800cb48:	4649      	mov	r1, r9
 800cb4a:	f7f3 ffcf 	bl	8000aec <__aeabi_dcmplt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d07b      	beq.n	800cc4a <_dtoa_r+0x4f2>
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d078      	beq.n	800cc4a <_dtoa_r+0x4f2>
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	dd39      	ble.n	800cbd2 <_dtoa_r+0x47a>
 800cb5e:	4b90      	ldr	r3, [pc, #576]	; (800cda0 <_dtoa_r+0x648>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	4640      	mov	r0, r8
 800cb64:	4649      	mov	r1, r9
 800cb66:	f7f3 fd4f 	bl	8000608 <__aeabi_dmul>
 800cb6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb6e:	9e01      	ldr	r6, [sp, #4]
 800cb70:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cb74:	3501      	adds	r5, #1
 800cb76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f7f3 fcda 	bl	8000534 <__aeabi_i2d>
 800cb80:	4642      	mov	r2, r8
 800cb82:	464b      	mov	r3, r9
 800cb84:	f7f3 fd40 	bl	8000608 <__aeabi_dmul>
 800cb88:	4b86      	ldr	r3, [pc, #536]	; (800cda4 <_dtoa_r+0x64c>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f7f3 fb86 	bl	800029c <__adddf3>
 800cb90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb98:	9303      	str	r3, [sp, #12]
 800cb9a:	2e00      	cmp	r6, #0
 800cb9c:	d158      	bne.n	800cc50 <_dtoa_r+0x4f8>
 800cb9e:	4b82      	ldr	r3, [pc, #520]	; (800cda8 <_dtoa_r+0x650>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	4640      	mov	r0, r8
 800cba4:	4649      	mov	r1, r9
 800cba6:	f7f3 fb77 	bl	8000298 <__aeabi_dsub>
 800cbaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbae:	4680      	mov	r8, r0
 800cbb0:	4689      	mov	r9, r1
 800cbb2:	f7f3 ffb9 	bl	8000b28 <__aeabi_dcmpgt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f040 8296 	bne.w	800d0e8 <_dtoa_r+0x990>
 800cbbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	f7f3 ff90 	bl	8000aec <__aeabi_dcmplt>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f040 8289 	bne.w	800d0e4 <_dtoa_r+0x98c>
 800cbd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cbd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f2c0 814e 	blt.w	800ce7a <_dtoa_r+0x722>
 800cbde:	f1bb 0f0e 	cmp.w	fp, #14
 800cbe2:	f300 814a 	bgt.w	800ce7a <_dtoa_r+0x722>
 800cbe6:	4b6b      	ldr	r3, [pc, #428]	; (800cd94 <_dtoa_r+0x63c>)
 800cbe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cbec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f280 80dc 	bge.w	800cdb0 <_dtoa_r+0x658>
 800cbf8:	9b04      	ldr	r3, [sp, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f300 80d8 	bgt.w	800cdb0 <_dtoa_r+0x658>
 800cc00:	f040 826f 	bne.w	800d0e2 <_dtoa_r+0x98a>
 800cc04:	4b68      	ldr	r3, [pc, #416]	; (800cda8 <_dtoa_r+0x650>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	4640      	mov	r0, r8
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	f7f3 fcfc 	bl	8000608 <__aeabi_dmul>
 800cc10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc14:	f7f3 ff7e 	bl	8000b14 <__aeabi_dcmpge>
 800cc18:	9e04      	ldr	r6, [sp, #16]
 800cc1a:	4637      	mov	r7, r6
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	f040 8245 	bne.w	800d0ac <_dtoa_r+0x954>
 800cc22:	9d00      	ldr	r5, [sp, #0]
 800cc24:	2331      	movs	r3, #49	; 0x31
 800cc26:	f805 3b01 	strb.w	r3, [r5], #1
 800cc2a:	f10b 0b01 	add.w	fp, fp, #1
 800cc2e:	e241      	b.n	800d0b4 <_dtoa_r+0x95c>
 800cc30:	07f2      	lsls	r2, r6, #31
 800cc32:	d505      	bpl.n	800cc40 <_dtoa_r+0x4e8>
 800cc34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc38:	f7f3 fce6 	bl	8000608 <__aeabi_dmul>
 800cc3c:	3501      	adds	r5, #1
 800cc3e:	2301      	movs	r3, #1
 800cc40:	1076      	asrs	r6, r6, #1
 800cc42:	3708      	adds	r7, #8
 800cc44:	e773      	b.n	800cb2e <_dtoa_r+0x3d6>
 800cc46:	2502      	movs	r5, #2
 800cc48:	e775      	b.n	800cb36 <_dtoa_r+0x3de>
 800cc4a:	9e04      	ldr	r6, [sp, #16]
 800cc4c:	465f      	mov	r7, fp
 800cc4e:	e792      	b.n	800cb76 <_dtoa_r+0x41e>
 800cc50:	9900      	ldr	r1, [sp, #0]
 800cc52:	4b50      	ldr	r3, [pc, #320]	; (800cd94 <_dtoa_r+0x63c>)
 800cc54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc58:	4431      	add	r1, r6
 800cc5a:	9102      	str	r1, [sp, #8]
 800cc5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc5e:	eeb0 9a47 	vmov.f32	s18, s14
 800cc62:	eef0 9a67 	vmov.f32	s19, s15
 800cc66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc6e:	2900      	cmp	r1, #0
 800cc70:	d044      	beq.n	800ccfc <_dtoa_r+0x5a4>
 800cc72:	494e      	ldr	r1, [pc, #312]	; (800cdac <_dtoa_r+0x654>)
 800cc74:	2000      	movs	r0, #0
 800cc76:	f7f3 fdf1 	bl	800085c <__aeabi_ddiv>
 800cc7a:	ec53 2b19 	vmov	r2, r3, d9
 800cc7e:	f7f3 fb0b 	bl	8000298 <__aeabi_dsub>
 800cc82:	9d00      	ldr	r5, [sp, #0]
 800cc84:	ec41 0b19 	vmov	d9, r0, r1
 800cc88:	4649      	mov	r1, r9
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	f7f3 ff56 	bl	8000b3c <__aeabi_d2iz>
 800cc90:	4606      	mov	r6, r0
 800cc92:	f7f3 fc4f 	bl	8000534 <__aeabi_i2d>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4640      	mov	r0, r8
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	f7f3 fafb 	bl	8000298 <__aeabi_dsub>
 800cca2:	3630      	adds	r6, #48	; 0x30
 800cca4:	f805 6b01 	strb.w	r6, [r5], #1
 800cca8:	ec53 2b19 	vmov	r2, r3, d9
 800ccac:	4680      	mov	r8, r0
 800ccae:	4689      	mov	r9, r1
 800ccb0:	f7f3 ff1c 	bl	8000aec <__aeabi_dcmplt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d164      	bne.n	800cd82 <_dtoa_r+0x62a>
 800ccb8:	4642      	mov	r2, r8
 800ccba:	464b      	mov	r3, r9
 800ccbc:	4937      	ldr	r1, [pc, #220]	; (800cd9c <_dtoa_r+0x644>)
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	f7f3 faea 	bl	8000298 <__aeabi_dsub>
 800ccc4:	ec53 2b19 	vmov	r2, r3, d9
 800ccc8:	f7f3 ff10 	bl	8000aec <__aeabi_dcmplt>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f040 80b6 	bne.w	800ce3e <_dtoa_r+0x6e6>
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	429d      	cmp	r5, r3
 800ccd6:	f43f af7c 	beq.w	800cbd2 <_dtoa_r+0x47a>
 800ccda:	4b31      	ldr	r3, [pc, #196]	; (800cda0 <_dtoa_r+0x648>)
 800ccdc:	ec51 0b19 	vmov	r0, r1, d9
 800cce0:	2200      	movs	r2, #0
 800cce2:	f7f3 fc91 	bl	8000608 <__aeabi_dmul>
 800cce6:	4b2e      	ldr	r3, [pc, #184]	; (800cda0 <_dtoa_r+0x648>)
 800cce8:	ec41 0b19 	vmov	d9, r0, r1
 800ccec:	2200      	movs	r2, #0
 800ccee:	4640      	mov	r0, r8
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	f7f3 fc89 	bl	8000608 <__aeabi_dmul>
 800ccf6:	4680      	mov	r8, r0
 800ccf8:	4689      	mov	r9, r1
 800ccfa:	e7c5      	b.n	800cc88 <_dtoa_r+0x530>
 800ccfc:	ec51 0b17 	vmov	r0, r1, d7
 800cd00:	f7f3 fc82 	bl	8000608 <__aeabi_dmul>
 800cd04:	9b02      	ldr	r3, [sp, #8]
 800cd06:	9d00      	ldr	r5, [sp, #0]
 800cd08:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd0a:	ec41 0b19 	vmov	d9, r0, r1
 800cd0e:	4649      	mov	r1, r9
 800cd10:	4640      	mov	r0, r8
 800cd12:	f7f3 ff13 	bl	8000b3c <__aeabi_d2iz>
 800cd16:	4606      	mov	r6, r0
 800cd18:	f7f3 fc0c 	bl	8000534 <__aeabi_i2d>
 800cd1c:	3630      	adds	r6, #48	; 0x30
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4640      	mov	r0, r8
 800cd24:	4649      	mov	r1, r9
 800cd26:	f7f3 fab7 	bl	8000298 <__aeabi_dsub>
 800cd2a:	f805 6b01 	strb.w	r6, [r5], #1
 800cd2e:	9b02      	ldr	r3, [sp, #8]
 800cd30:	429d      	cmp	r5, r3
 800cd32:	4680      	mov	r8, r0
 800cd34:	4689      	mov	r9, r1
 800cd36:	f04f 0200 	mov.w	r2, #0
 800cd3a:	d124      	bne.n	800cd86 <_dtoa_r+0x62e>
 800cd3c:	4b1b      	ldr	r3, [pc, #108]	; (800cdac <_dtoa_r+0x654>)
 800cd3e:	ec51 0b19 	vmov	r0, r1, d9
 800cd42:	f7f3 faab 	bl	800029c <__adddf3>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	4649      	mov	r1, r9
 800cd4e:	f7f3 feeb 	bl	8000b28 <__aeabi_dcmpgt>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d173      	bne.n	800ce3e <_dtoa_r+0x6e6>
 800cd56:	ec53 2b19 	vmov	r2, r3, d9
 800cd5a:	4914      	ldr	r1, [pc, #80]	; (800cdac <_dtoa_r+0x654>)
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	f7f3 fa9b 	bl	8000298 <__aeabi_dsub>
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	4640      	mov	r0, r8
 800cd68:	4649      	mov	r1, r9
 800cd6a:	f7f3 febf 	bl	8000aec <__aeabi_dcmplt>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	f43f af2f 	beq.w	800cbd2 <_dtoa_r+0x47a>
 800cd74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd76:	1e6b      	subs	r3, r5, #1
 800cd78:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd7e:	2b30      	cmp	r3, #48	; 0x30
 800cd80:	d0f8      	beq.n	800cd74 <_dtoa_r+0x61c>
 800cd82:	46bb      	mov	fp, r7
 800cd84:	e04a      	b.n	800ce1c <_dtoa_r+0x6c4>
 800cd86:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <_dtoa_r+0x648>)
 800cd88:	f7f3 fc3e 	bl	8000608 <__aeabi_dmul>
 800cd8c:	4680      	mov	r8, r0
 800cd8e:	4689      	mov	r9, r1
 800cd90:	e7bd      	b.n	800cd0e <_dtoa_r+0x5b6>
 800cd92:	bf00      	nop
 800cd94:	0800e8e8 	.word	0x0800e8e8
 800cd98:	0800e8c0 	.word	0x0800e8c0
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	40240000 	.word	0x40240000
 800cda4:	401c0000 	.word	0x401c0000
 800cda8:	40140000 	.word	0x40140000
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cdb4:	9d00      	ldr	r5, [sp, #0]
 800cdb6:	4642      	mov	r2, r8
 800cdb8:	464b      	mov	r3, r9
 800cdba:	4630      	mov	r0, r6
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	f7f3 fd4d 	bl	800085c <__aeabi_ddiv>
 800cdc2:	f7f3 febb 	bl	8000b3c <__aeabi_d2iz>
 800cdc6:	9001      	str	r0, [sp, #4]
 800cdc8:	f7f3 fbb4 	bl	8000534 <__aeabi_i2d>
 800cdcc:	4642      	mov	r2, r8
 800cdce:	464b      	mov	r3, r9
 800cdd0:	f7f3 fc1a 	bl	8000608 <__aeabi_dmul>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4630      	mov	r0, r6
 800cdda:	4639      	mov	r1, r7
 800cddc:	f7f3 fa5c 	bl	8000298 <__aeabi_dsub>
 800cde0:	9e01      	ldr	r6, [sp, #4]
 800cde2:	9f04      	ldr	r7, [sp, #16]
 800cde4:	3630      	adds	r6, #48	; 0x30
 800cde6:	f805 6b01 	strb.w	r6, [r5], #1
 800cdea:	9e00      	ldr	r6, [sp, #0]
 800cdec:	1bae      	subs	r6, r5, r6
 800cdee:	42b7      	cmp	r7, r6
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	d134      	bne.n	800ce60 <_dtoa_r+0x708>
 800cdf6:	f7f3 fa51 	bl	800029c <__adddf3>
 800cdfa:	4642      	mov	r2, r8
 800cdfc:	464b      	mov	r3, r9
 800cdfe:	4606      	mov	r6, r0
 800ce00:	460f      	mov	r7, r1
 800ce02:	f7f3 fe91 	bl	8000b28 <__aeabi_dcmpgt>
 800ce06:	b9c8      	cbnz	r0, 800ce3c <_dtoa_r+0x6e4>
 800ce08:	4642      	mov	r2, r8
 800ce0a:	464b      	mov	r3, r9
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	4639      	mov	r1, r7
 800ce10:	f7f3 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce14:	b110      	cbz	r0, 800ce1c <_dtoa_r+0x6c4>
 800ce16:	9b01      	ldr	r3, [sp, #4]
 800ce18:	07db      	lsls	r3, r3, #31
 800ce1a:	d40f      	bmi.n	800ce3c <_dtoa_r+0x6e4>
 800ce1c:	4651      	mov	r1, sl
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 fad4 	bl	800d3cc <_Bfree>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce28:	702b      	strb	r3, [r5, #0]
 800ce2a:	f10b 0301 	add.w	r3, fp, #1
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f43f ace2 	beq.w	800c7fc <_dtoa_r+0xa4>
 800ce38:	601d      	str	r5, [r3, #0]
 800ce3a:	e4df      	b.n	800c7fc <_dtoa_r+0xa4>
 800ce3c:	465f      	mov	r7, fp
 800ce3e:	462b      	mov	r3, r5
 800ce40:	461d      	mov	r5, r3
 800ce42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce46:	2a39      	cmp	r2, #57	; 0x39
 800ce48:	d106      	bne.n	800ce58 <_dtoa_r+0x700>
 800ce4a:	9a00      	ldr	r2, [sp, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d1f7      	bne.n	800ce40 <_dtoa_r+0x6e8>
 800ce50:	9900      	ldr	r1, [sp, #0]
 800ce52:	2230      	movs	r2, #48	; 0x30
 800ce54:	3701      	adds	r7, #1
 800ce56:	700a      	strb	r2, [r1, #0]
 800ce58:	781a      	ldrb	r2, [r3, #0]
 800ce5a:	3201      	adds	r2, #1
 800ce5c:	701a      	strb	r2, [r3, #0]
 800ce5e:	e790      	b.n	800cd82 <_dtoa_r+0x62a>
 800ce60:	4ba3      	ldr	r3, [pc, #652]	; (800d0f0 <_dtoa_r+0x998>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	f7f3 fbd0 	bl	8000608 <__aeabi_dmul>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	460f      	mov	r7, r1
 800ce70:	f7f3 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d09e      	beq.n	800cdb6 <_dtoa_r+0x65e>
 800ce78:	e7d0      	b.n	800ce1c <_dtoa_r+0x6c4>
 800ce7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	f000 80ca 	beq.w	800d016 <_dtoa_r+0x8be>
 800ce82:	9a07      	ldr	r2, [sp, #28]
 800ce84:	2a01      	cmp	r2, #1
 800ce86:	f300 80ad 	bgt.w	800cfe4 <_dtoa_r+0x88c>
 800ce8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce8c:	2a00      	cmp	r2, #0
 800ce8e:	f000 80a5 	beq.w	800cfdc <_dtoa_r+0x884>
 800ce92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce96:	9e08      	ldr	r6, [sp, #32]
 800ce98:	9d05      	ldr	r5, [sp, #20]
 800ce9a:	9a05      	ldr	r2, [sp, #20]
 800ce9c:	441a      	add	r2, r3
 800ce9e:	9205      	str	r2, [sp, #20]
 800cea0:	9a06      	ldr	r2, [sp, #24]
 800cea2:	2101      	movs	r1, #1
 800cea4:	441a      	add	r2, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	9206      	str	r2, [sp, #24]
 800ceaa:	f000 fb45 	bl	800d538 <__i2b>
 800ceae:	4607      	mov	r7, r0
 800ceb0:	b165      	cbz	r5, 800cecc <_dtoa_r+0x774>
 800ceb2:	9b06      	ldr	r3, [sp, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dd09      	ble.n	800cecc <_dtoa_r+0x774>
 800ceb8:	42ab      	cmp	r3, r5
 800ceba:	9a05      	ldr	r2, [sp, #20]
 800cebc:	bfa8      	it	ge
 800cebe:	462b      	movge	r3, r5
 800cec0:	1ad2      	subs	r2, r2, r3
 800cec2:	9205      	str	r2, [sp, #20]
 800cec4:	9a06      	ldr	r2, [sp, #24]
 800cec6:	1aed      	subs	r5, r5, r3
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	9306      	str	r3, [sp, #24]
 800cecc:	9b08      	ldr	r3, [sp, #32]
 800cece:	b1f3      	cbz	r3, 800cf0e <_dtoa_r+0x7b6>
 800ced0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 80a3 	beq.w	800d01e <_dtoa_r+0x8c6>
 800ced8:	2e00      	cmp	r6, #0
 800ceda:	dd10      	ble.n	800cefe <_dtoa_r+0x7a6>
 800cedc:	4639      	mov	r1, r7
 800cede:	4632      	mov	r2, r6
 800cee0:	4620      	mov	r0, r4
 800cee2:	f000 fbe9 	bl	800d6b8 <__pow5mult>
 800cee6:	4652      	mov	r2, sl
 800cee8:	4601      	mov	r1, r0
 800ceea:	4607      	mov	r7, r0
 800ceec:	4620      	mov	r0, r4
 800ceee:	f000 fb39 	bl	800d564 <__multiply>
 800cef2:	4651      	mov	r1, sl
 800cef4:	4680      	mov	r8, r0
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 fa68 	bl	800d3cc <_Bfree>
 800cefc:	46c2      	mov	sl, r8
 800cefe:	9b08      	ldr	r3, [sp, #32]
 800cf00:	1b9a      	subs	r2, r3, r6
 800cf02:	d004      	beq.n	800cf0e <_dtoa_r+0x7b6>
 800cf04:	4651      	mov	r1, sl
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 fbd6 	bl	800d6b8 <__pow5mult>
 800cf0c:	4682      	mov	sl, r0
 800cf0e:	2101      	movs	r1, #1
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fb11 	bl	800d538 <__i2b>
 800cf16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	4606      	mov	r6, r0
 800cf1c:	f340 8081 	ble.w	800d022 <_dtoa_r+0x8ca>
 800cf20:	461a      	mov	r2, r3
 800cf22:	4601      	mov	r1, r0
 800cf24:	4620      	mov	r0, r4
 800cf26:	f000 fbc7 	bl	800d6b8 <__pow5mult>
 800cf2a:	9b07      	ldr	r3, [sp, #28]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	4606      	mov	r6, r0
 800cf30:	dd7a      	ble.n	800d028 <_dtoa_r+0x8d0>
 800cf32:	f04f 0800 	mov.w	r8, #0
 800cf36:	6933      	ldr	r3, [r6, #16]
 800cf38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf3c:	6918      	ldr	r0, [r3, #16]
 800cf3e:	f000 faad 	bl	800d49c <__hi0bits>
 800cf42:	f1c0 0020 	rsb	r0, r0, #32
 800cf46:	9b06      	ldr	r3, [sp, #24]
 800cf48:	4418      	add	r0, r3
 800cf4a:	f010 001f 	ands.w	r0, r0, #31
 800cf4e:	f000 8094 	beq.w	800d07a <_dtoa_r+0x922>
 800cf52:	f1c0 0320 	rsb	r3, r0, #32
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	f340 8085 	ble.w	800d066 <_dtoa_r+0x90e>
 800cf5c:	9b05      	ldr	r3, [sp, #20]
 800cf5e:	f1c0 001c 	rsb	r0, r0, #28
 800cf62:	4403      	add	r3, r0
 800cf64:	9305      	str	r3, [sp, #20]
 800cf66:	9b06      	ldr	r3, [sp, #24]
 800cf68:	4403      	add	r3, r0
 800cf6a:	4405      	add	r5, r0
 800cf6c:	9306      	str	r3, [sp, #24]
 800cf6e:	9b05      	ldr	r3, [sp, #20]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	dd05      	ble.n	800cf80 <_dtoa_r+0x828>
 800cf74:	4651      	mov	r1, sl
 800cf76:	461a      	mov	r2, r3
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 fbf7 	bl	800d76c <__lshift>
 800cf7e:	4682      	mov	sl, r0
 800cf80:	9b06      	ldr	r3, [sp, #24]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dd05      	ble.n	800cf92 <_dtoa_r+0x83a>
 800cf86:	4631      	mov	r1, r6
 800cf88:	461a      	mov	r2, r3
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 fbee 	bl	800d76c <__lshift>
 800cf90:	4606      	mov	r6, r0
 800cf92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d072      	beq.n	800d07e <_dtoa_r+0x926>
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4650      	mov	r0, sl
 800cf9c:	f000 fc52 	bl	800d844 <__mcmp>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	da6c      	bge.n	800d07e <_dtoa_r+0x926>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4651      	mov	r1, sl
 800cfa8:	220a      	movs	r2, #10
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 fa30 	bl	800d410 <__multadd>
 800cfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cfb6:	4682      	mov	sl, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 81b0 	beq.w	800d31e <_dtoa_r+0xbc6>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	220a      	movs	r2, #10
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fa23 	bl	800d410 <__multadd>
 800cfca:	9b01      	ldr	r3, [sp, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	4607      	mov	r7, r0
 800cfd0:	f300 8096 	bgt.w	800d100 <_dtoa_r+0x9a8>
 800cfd4:	9b07      	ldr	r3, [sp, #28]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	dc59      	bgt.n	800d08e <_dtoa_r+0x936>
 800cfda:	e091      	b.n	800d100 <_dtoa_r+0x9a8>
 800cfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfe2:	e758      	b.n	800ce96 <_dtoa_r+0x73e>
 800cfe4:	9b04      	ldr	r3, [sp, #16]
 800cfe6:	1e5e      	subs	r6, r3, #1
 800cfe8:	9b08      	ldr	r3, [sp, #32]
 800cfea:	42b3      	cmp	r3, r6
 800cfec:	bfbf      	itttt	lt
 800cfee:	9b08      	ldrlt	r3, [sp, #32]
 800cff0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cff2:	9608      	strlt	r6, [sp, #32]
 800cff4:	1af3      	sublt	r3, r6, r3
 800cff6:	bfb4      	ite	lt
 800cff8:	18d2      	addlt	r2, r2, r3
 800cffa:	1b9e      	subge	r6, r3, r6
 800cffc:	9b04      	ldr	r3, [sp, #16]
 800cffe:	bfbc      	itt	lt
 800d000:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d002:	2600      	movlt	r6, #0
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfb7      	itett	lt
 800d008:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d00c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d010:	1a9d      	sublt	r5, r3, r2
 800d012:	2300      	movlt	r3, #0
 800d014:	e741      	b.n	800ce9a <_dtoa_r+0x742>
 800d016:	9e08      	ldr	r6, [sp, #32]
 800d018:	9d05      	ldr	r5, [sp, #20]
 800d01a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d01c:	e748      	b.n	800ceb0 <_dtoa_r+0x758>
 800d01e:	9a08      	ldr	r2, [sp, #32]
 800d020:	e770      	b.n	800cf04 <_dtoa_r+0x7ac>
 800d022:	9b07      	ldr	r3, [sp, #28]
 800d024:	2b01      	cmp	r3, #1
 800d026:	dc19      	bgt.n	800d05c <_dtoa_r+0x904>
 800d028:	9b02      	ldr	r3, [sp, #8]
 800d02a:	b9bb      	cbnz	r3, 800d05c <_dtoa_r+0x904>
 800d02c:	9b03      	ldr	r3, [sp, #12]
 800d02e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d032:	b99b      	cbnz	r3, 800d05c <_dtoa_r+0x904>
 800d034:	9b03      	ldr	r3, [sp, #12]
 800d036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d03a:	0d1b      	lsrs	r3, r3, #20
 800d03c:	051b      	lsls	r3, r3, #20
 800d03e:	b183      	cbz	r3, 800d062 <_dtoa_r+0x90a>
 800d040:	9b05      	ldr	r3, [sp, #20]
 800d042:	3301      	adds	r3, #1
 800d044:	9305      	str	r3, [sp, #20]
 800d046:	9b06      	ldr	r3, [sp, #24]
 800d048:	3301      	adds	r3, #1
 800d04a:	9306      	str	r3, [sp, #24]
 800d04c:	f04f 0801 	mov.w	r8, #1
 800d050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	f47f af6f 	bne.w	800cf36 <_dtoa_r+0x7de>
 800d058:	2001      	movs	r0, #1
 800d05a:	e774      	b.n	800cf46 <_dtoa_r+0x7ee>
 800d05c:	f04f 0800 	mov.w	r8, #0
 800d060:	e7f6      	b.n	800d050 <_dtoa_r+0x8f8>
 800d062:	4698      	mov	r8, r3
 800d064:	e7f4      	b.n	800d050 <_dtoa_r+0x8f8>
 800d066:	d082      	beq.n	800cf6e <_dtoa_r+0x816>
 800d068:	9a05      	ldr	r2, [sp, #20]
 800d06a:	331c      	adds	r3, #28
 800d06c:	441a      	add	r2, r3
 800d06e:	9205      	str	r2, [sp, #20]
 800d070:	9a06      	ldr	r2, [sp, #24]
 800d072:	441a      	add	r2, r3
 800d074:	441d      	add	r5, r3
 800d076:	9206      	str	r2, [sp, #24]
 800d078:	e779      	b.n	800cf6e <_dtoa_r+0x816>
 800d07a:	4603      	mov	r3, r0
 800d07c:	e7f4      	b.n	800d068 <_dtoa_r+0x910>
 800d07e:	9b04      	ldr	r3, [sp, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc37      	bgt.n	800d0f4 <_dtoa_r+0x99c>
 800d084:	9b07      	ldr	r3, [sp, #28]
 800d086:	2b02      	cmp	r3, #2
 800d088:	dd34      	ble.n	800d0f4 <_dtoa_r+0x99c>
 800d08a:	9b04      	ldr	r3, [sp, #16]
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	b963      	cbnz	r3, 800d0ac <_dtoa_r+0x954>
 800d092:	4631      	mov	r1, r6
 800d094:	2205      	movs	r2, #5
 800d096:	4620      	mov	r0, r4
 800d098:	f000 f9ba 	bl	800d410 <__multadd>
 800d09c:	4601      	mov	r1, r0
 800d09e:	4606      	mov	r6, r0
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	f000 fbcf 	bl	800d844 <__mcmp>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	f73f adbb 	bgt.w	800cc22 <_dtoa_r+0x4ca>
 800d0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ae:	9d00      	ldr	r5, [sp, #0]
 800d0b0:	ea6f 0b03 	mvn.w	fp, r3
 800d0b4:	f04f 0800 	mov.w	r8, #0
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f000 f986 	bl	800d3cc <_Bfree>
 800d0c0:	2f00      	cmp	r7, #0
 800d0c2:	f43f aeab 	beq.w	800ce1c <_dtoa_r+0x6c4>
 800d0c6:	f1b8 0f00 	cmp.w	r8, #0
 800d0ca:	d005      	beq.n	800d0d8 <_dtoa_r+0x980>
 800d0cc:	45b8      	cmp	r8, r7
 800d0ce:	d003      	beq.n	800d0d8 <_dtoa_r+0x980>
 800d0d0:	4641      	mov	r1, r8
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f000 f97a 	bl	800d3cc <_Bfree>
 800d0d8:	4639      	mov	r1, r7
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 f976 	bl	800d3cc <_Bfree>
 800d0e0:	e69c      	b.n	800ce1c <_dtoa_r+0x6c4>
 800d0e2:	2600      	movs	r6, #0
 800d0e4:	4637      	mov	r7, r6
 800d0e6:	e7e1      	b.n	800d0ac <_dtoa_r+0x954>
 800d0e8:	46bb      	mov	fp, r7
 800d0ea:	4637      	mov	r7, r6
 800d0ec:	e599      	b.n	800cc22 <_dtoa_r+0x4ca>
 800d0ee:	bf00      	nop
 800d0f0:	40240000 	.word	0x40240000
 800d0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f000 80c8 	beq.w	800d28c <_dtoa_r+0xb34>
 800d0fc:	9b04      	ldr	r3, [sp, #16]
 800d0fe:	9301      	str	r3, [sp, #4]
 800d100:	2d00      	cmp	r5, #0
 800d102:	dd05      	ble.n	800d110 <_dtoa_r+0x9b8>
 800d104:	4639      	mov	r1, r7
 800d106:	462a      	mov	r2, r5
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fb2f 	bl	800d76c <__lshift>
 800d10e:	4607      	mov	r7, r0
 800d110:	f1b8 0f00 	cmp.w	r8, #0
 800d114:	d05b      	beq.n	800d1ce <_dtoa_r+0xa76>
 800d116:	6879      	ldr	r1, [r7, #4]
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 f917 	bl	800d34c <_Balloc>
 800d11e:	4605      	mov	r5, r0
 800d120:	b928      	cbnz	r0, 800d12e <_dtoa_r+0x9d6>
 800d122:	4b83      	ldr	r3, [pc, #524]	; (800d330 <_dtoa_r+0xbd8>)
 800d124:	4602      	mov	r2, r0
 800d126:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d12a:	f7ff bb2e 	b.w	800c78a <_dtoa_r+0x32>
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	3202      	adds	r2, #2
 800d132:	0092      	lsls	r2, r2, #2
 800d134:	f107 010c 	add.w	r1, r7, #12
 800d138:	300c      	adds	r0, #12
 800d13a:	f7ff fa75 	bl	800c628 <memcpy>
 800d13e:	2201      	movs	r2, #1
 800d140:	4629      	mov	r1, r5
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fb12 	bl	800d76c <__lshift>
 800d148:	9b00      	ldr	r3, [sp, #0]
 800d14a:	3301      	adds	r3, #1
 800d14c:	9304      	str	r3, [sp, #16]
 800d14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d152:	4413      	add	r3, r2
 800d154:	9308      	str	r3, [sp, #32]
 800d156:	9b02      	ldr	r3, [sp, #8]
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	46b8      	mov	r8, r7
 800d15e:	9306      	str	r3, [sp, #24]
 800d160:	4607      	mov	r7, r0
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	4631      	mov	r1, r6
 800d166:	3b01      	subs	r3, #1
 800d168:	4650      	mov	r0, sl
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	f7ff fa6a 	bl	800c644 <quorem>
 800d170:	4641      	mov	r1, r8
 800d172:	9002      	str	r0, [sp, #8]
 800d174:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d178:	4650      	mov	r0, sl
 800d17a:	f000 fb63 	bl	800d844 <__mcmp>
 800d17e:	463a      	mov	r2, r7
 800d180:	9005      	str	r0, [sp, #20]
 800d182:	4631      	mov	r1, r6
 800d184:	4620      	mov	r0, r4
 800d186:	f000 fb79 	bl	800d87c <__mdiff>
 800d18a:	68c2      	ldr	r2, [r0, #12]
 800d18c:	4605      	mov	r5, r0
 800d18e:	bb02      	cbnz	r2, 800d1d2 <_dtoa_r+0xa7a>
 800d190:	4601      	mov	r1, r0
 800d192:	4650      	mov	r0, sl
 800d194:	f000 fb56 	bl	800d844 <__mcmp>
 800d198:	4602      	mov	r2, r0
 800d19a:	4629      	mov	r1, r5
 800d19c:	4620      	mov	r0, r4
 800d19e:	9209      	str	r2, [sp, #36]	; 0x24
 800d1a0:	f000 f914 	bl	800d3cc <_Bfree>
 800d1a4:	9b07      	ldr	r3, [sp, #28]
 800d1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1a8:	9d04      	ldr	r5, [sp, #16]
 800d1aa:	ea43 0102 	orr.w	r1, r3, r2
 800d1ae:	9b06      	ldr	r3, [sp, #24]
 800d1b0:	4319      	orrs	r1, r3
 800d1b2:	d110      	bne.n	800d1d6 <_dtoa_r+0xa7e>
 800d1b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d1b8:	d029      	beq.n	800d20e <_dtoa_r+0xab6>
 800d1ba:	9b05      	ldr	r3, [sp, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	dd02      	ble.n	800d1c6 <_dtoa_r+0xa6e>
 800d1c0:	9b02      	ldr	r3, [sp, #8]
 800d1c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d1c6:	9b01      	ldr	r3, [sp, #4]
 800d1c8:	f883 9000 	strb.w	r9, [r3]
 800d1cc:	e774      	b.n	800d0b8 <_dtoa_r+0x960>
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	e7ba      	b.n	800d148 <_dtoa_r+0x9f0>
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	e7e1      	b.n	800d19a <_dtoa_r+0xa42>
 800d1d6:	9b05      	ldr	r3, [sp, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	db04      	blt.n	800d1e6 <_dtoa_r+0xa8e>
 800d1dc:	9907      	ldr	r1, [sp, #28]
 800d1de:	430b      	orrs	r3, r1
 800d1e0:	9906      	ldr	r1, [sp, #24]
 800d1e2:	430b      	orrs	r3, r1
 800d1e4:	d120      	bne.n	800d228 <_dtoa_r+0xad0>
 800d1e6:	2a00      	cmp	r2, #0
 800d1e8:	dded      	ble.n	800d1c6 <_dtoa_r+0xa6e>
 800d1ea:	4651      	mov	r1, sl
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f000 fabc 	bl	800d76c <__lshift>
 800d1f4:	4631      	mov	r1, r6
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	f000 fb24 	bl	800d844 <__mcmp>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	dc03      	bgt.n	800d208 <_dtoa_r+0xab0>
 800d200:	d1e1      	bne.n	800d1c6 <_dtoa_r+0xa6e>
 800d202:	f019 0f01 	tst.w	r9, #1
 800d206:	d0de      	beq.n	800d1c6 <_dtoa_r+0xa6e>
 800d208:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d20c:	d1d8      	bne.n	800d1c0 <_dtoa_r+0xa68>
 800d20e:	9a01      	ldr	r2, [sp, #4]
 800d210:	2339      	movs	r3, #57	; 0x39
 800d212:	7013      	strb	r3, [r2, #0]
 800d214:	462b      	mov	r3, r5
 800d216:	461d      	mov	r5, r3
 800d218:	3b01      	subs	r3, #1
 800d21a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d21e:	2a39      	cmp	r2, #57	; 0x39
 800d220:	d06c      	beq.n	800d2fc <_dtoa_r+0xba4>
 800d222:	3201      	adds	r2, #1
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	e747      	b.n	800d0b8 <_dtoa_r+0x960>
 800d228:	2a00      	cmp	r2, #0
 800d22a:	dd07      	ble.n	800d23c <_dtoa_r+0xae4>
 800d22c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d230:	d0ed      	beq.n	800d20e <_dtoa_r+0xab6>
 800d232:	9a01      	ldr	r2, [sp, #4]
 800d234:	f109 0301 	add.w	r3, r9, #1
 800d238:	7013      	strb	r3, [r2, #0]
 800d23a:	e73d      	b.n	800d0b8 <_dtoa_r+0x960>
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	9a08      	ldr	r2, [sp, #32]
 800d240:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d244:	4293      	cmp	r3, r2
 800d246:	d043      	beq.n	800d2d0 <_dtoa_r+0xb78>
 800d248:	4651      	mov	r1, sl
 800d24a:	2300      	movs	r3, #0
 800d24c:	220a      	movs	r2, #10
 800d24e:	4620      	mov	r0, r4
 800d250:	f000 f8de 	bl	800d410 <__multadd>
 800d254:	45b8      	cmp	r8, r7
 800d256:	4682      	mov	sl, r0
 800d258:	f04f 0300 	mov.w	r3, #0
 800d25c:	f04f 020a 	mov.w	r2, #10
 800d260:	4641      	mov	r1, r8
 800d262:	4620      	mov	r0, r4
 800d264:	d107      	bne.n	800d276 <_dtoa_r+0xb1e>
 800d266:	f000 f8d3 	bl	800d410 <__multadd>
 800d26a:	4680      	mov	r8, r0
 800d26c:	4607      	mov	r7, r0
 800d26e:	9b04      	ldr	r3, [sp, #16]
 800d270:	3301      	adds	r3, #1
 800d272:	9304      	str	r3, [sp, #16]
 800d274:	e775      	b.n	800d162 <_dtoa_r+0xa0a>
 800d276:	f000 f8cb 	bl	800d410 <__multadd>
 800d27a:	4639      	mov	r1, r7
 800d27c:	4680      	mov	r8, r0
 800d27e:	2300      	movs	r3, #0
 800d280:	220a      	movs	r2, #10
 800d282:	4620      	mov	r0, r4
 800d284:	f000 f8c4 	bl	800d410 <__multadd>
 800d288:	4607      	mov	r7, r0
 800d28a:	e7f0      	b.n	800d26e <_dtoa_r+0xb16>
 800d28c:	9b04      	ldr	r3, [sp, #16]
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	9d00      	ldr	r5, [sp, #0]
 800d292:	4631      	mov	r1, r6
 800d294:	4650      	mov	r0, sl
 800d296:	f7ff f9d5 	bl	800c644 <quorem>
 800d29a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d29e:	9b00      	ldr	r3, [sp, #0]
 800d2a0:	f805 9b01 	strb.w	r9, [r5], #1
 800d2a4:	1aea      	subs	r2, r5, r3
 800d2a6:	9b01      	ldr	r3, [sp, #4]
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	dd07      	ble.n	800d2bc <_dtoa_r+0xb64>
 800d2ac:	4651      	mov	r1, sl
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	220a      	movs	r2, #10
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f000 f8ac 	bl	800d410 <__multadd>
 800d2b8:	4682      	mov	sl, r0
 800d2ba:	e7ea      	b.n	800d292 <_dtoa_r+0xb3a>
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	bfc8      	it	gt
 800d2c2:	461d      	movgt	r5, r3
 800d2c4:	9b00      	ldr	r3, [sp, #0]
 800d2c6:	bfd8      	it	le
 800d2c8:	2501      	movle	r5, #1
 800d2ca:	441d      	add	r5, r3
 800d2cc:	f04f 0800 	mov.w	r8, #0
 800d2d0:	4651      	mov	r1, sl
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fa49 	bl	800d76c <__lshift>
 800d2da:	4631      	mov	r1, r6
 800d2dc:	4682      	mov	sl, r0
 800d2de:	f000 fab1 	bl	800d844 <__mcmp>
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	dc96      	bgt.n	800d214 <_dtoa_r+0xabc>
 800d2e6:	d102      	bne.n	800d2ee <_dtoa_r+0xb96>
 800d2e8:	f019 0f01 	tst.w	r9, #1
 800d2ec:	d192      	bne.n	800d214 <_dtoa_r+0xabc>
 800d2ee:	462b      	mov	r3, r5
 800d2f0:	461d      	mov	r5, r3
 800d2f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2f6:	2a30      	cmp	r2, #48	; 0x30
 800d2f8:	d0fa      	beq.n	800d2f0 <_dtoa_r+0xb98>
 800d2fa:	e6dd      	b.n	800d0b8 <_dtoa_r+0x960>
 800d2fc:	9a00      	ldr	r2, [sp, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d189      	bne.n	800d216 <_dtoa_r+0xabe>
 800d302:	f10b 0b01 	add.w	fp, fp, #1
 800d306:	2331      	movs	r3, #49	; 0x31
 800d308:	e796      	b.n	800d238 <_dtoa_r+0xae0>
 800d30a:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <_dtoa_r+0xbdc>)
 800d30c:	f7ff ba99 	b.w	800c842 <_dtoa_r+0xea>
 800d310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d312:	2b00      	cmp	r3, #0
 800d314:	f47f aa6d 	bne.w	800c7f2 <_dtoa_r+0x9a>
 800d318:	4b07      	ldr	r3, [pc, #28]	; (800d338 <_dtoa_r+0xbe0>)
 800d31a:	f7ff ba92 	b.w	800c842 <_dtoa_r+0xea>
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	dcb5      	bgt.n	800d290 <_dtoa_r+0xb38>
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	2b02      	cmp	r3, #2
 800d328:	f73f aeb1 	bgt.w	800d08e <_dtoa_r+0x936>
 800d32c:	e7b0      	b.n	800d290 <_dtoa_r+0xb38>
 800d32e:	bf00      	nop
 800d330:	0800e855 	.word	0x0800e855
 800d334:	0800e7e4 	.word	0x0800e7e4
 800d338:	0800e7d7 	.word	0x0800e7d7

0800d33c <malloc>:
 800d33c:	4b02      	ldr	r3, [pc, #8]	; (800d348 <malloc+0xc>)
 800d33e:	4601      	mov	r1, r0
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	f7fe bbe5 	b.w	800bb10 <_malloc_r>
 800d346:	bf00      	nop
 800d348:	20000084 	.word	0x20000084

0800d34c <_Balloc>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	69c6      	ldr	r6, [r0, #28]
 800d350:	4604      	mov	r4, r0
 800d352:	460d      	mov	r5, r1
 800d354:	b976      	cbnz	r6, 800d374 <_Balloc+0x28>
 800d356:	2010      	movs	r0, #16
 800d358:	f7ff fff0 	bl	800d33c <malloc>
 800d35c:	4602      	mov	r2, r0
 800d35e:	61e0      	str	r0, [r4, #28]
 800d360:	b920      	cbnz	r0, 800d36c <_Balloc+0x20>
 800d362:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <_Balloc+0x78>)
 800d364:	4818      	ldr	r0, [pc, #96]	; (800d3c8 <_Balloc+0x7c>)
 800d366:	216b      	movs	r1, #107	; 0x6b
 800d368:	f000 fbba 	bl	800dae0 <__assert_func>
 800d36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d370:	6006      	str	r6, [r0, #0]
 800d372:	60c6      	str	r6, [r0, #12]
 800d374:	69e6      	ldr	r6, [r4, #28]
 800d376:	68f3      	ldr	r3, [r6, #12]
 800d378:	b183      	cbz	r3, 800d39c <_Balloc+0x50>
 800d37a:	69e3      	ldr	r3, [r4, #28]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d382:	b9b8      	cbnz	r0, 800d3b4 <_Balloc+0x68>
 800d384:	2101      	movs	r1, #1
 800d386:	fa01 f605 	lsl.w	r6, r1, r5
 800d38a:	1d72      	adds	r2, r6, #5
 800d38c:	0092      	lsls	r2, r2, #2
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fbc4 	bl	800db1c <_calloc_r>
 800d394:	b160      	cbz	r0, 800d3b0 <_Balloc+0x64>
 800d396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d39a:	e00e      	b.n	800d3ba <_Balloc+0x6e>
 800d39c:	2221      	movs	r2, #33	; 0x21
 800d39e:	2104      	movs	r1, #4
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f000 fbbb 	bl	800db1c <_calloc_r>
 800d3a6:	69e3      	ldr	r3, [r4, #28]
 800d3a8:	60f0      	str	r0, [r6, #12]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e4      	bne.n	800d37a <_Balloc+0x2e>
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	6802      	ldr	r2, [r0, #0]
 800d3b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3c0:	e7f7      	b.n	800d3b2 <_Balloc+0x66>
 800d3c2:	bf00      	nop
 800d3c4:	0800e7e6 	.word	0x0800e7e6
 800d3c8:	0800e866 	.word	0x0800e866

0800d3cc <_Bfree>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	69c6      	ldr	r6, [r0, #28]
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	b976      	cbnz	r6, 800d3f4 <_Bfree+0x28>
 800d3d6:	2010      	movs	r0, #16
 800d3d8:	f7ff ffb0 	bl	800d33c <malloc>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	61e8      	str	r0, [r5, #28]
 800d3e0:	b920      	cbnz	r0, 800d3ec <_Bfree+0x20>
 800d3e2:	4b09      	ldr	r3, [pc, #36]	; (800d408 <_Bfree+0x3c>)
 800d3e4:	4809      	ldr	r0, [pc, #36]	; (800d40c <_Bfree+0x40>)
 800d3e6:	218f      	movs	r1, #143	; 0x8f
 800d3e8:	f000 fb7a 	bl	800dae0 <__assert_func>
 800d3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3f0:	6006      	str	r6, [r0, #0]
 800d3f2:	60c6      	str	r6, [r0, #12]
 800d3f4:	b13c      	cbz	r4, 800d406 <_Bfree+0x3a>
 800d3f6:	69eb      	ldr	r3, [r5, #28]
 800d3f8:	6862      	ldr	r2, [r4, #4]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d400:	6021      	str	r1, [r4, #0]
 800d402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d406:	bd70      	pop	{r4, r5, r6, pc}
 800d408:	0800e7e6 	.word	0x0800e7e6
 800d40c:	0800e866 	.word	0x0800e866

0800d410 <__multadd>:
 800d410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d414:	690d      	ldr	r5, [r1, #16]
 800d416:	4607      	mov	r7, r0
 800d418:	460c      	mov	r4, r1
 800d41a:	461e      	mov	r6, r3
 800d41c:	f101 0c14 	add.w	ip, r1, #20
 800d420:	2000      	movs	r0, #0
 800d422:	f8dc 3000 	ldr.w	r3, [ip]
 800d426:	b299      	uxth	r1, r3
 800d428:	fb02 6101 	mla	r1, r2, r1, r6
 800d42c:	0c1e      	lsrs	r6, r3, #16
 800d42e:	0c0b      	lsrs	r3, r1, #16
 800d430:	fb02 3306 	mla	r3, r2, r6, r3
 800d434:	b289      	uxth	r1, r1
 800d436:	3001      	adds	r0, #1
 800d438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d43c:	4285      	cmp	r5, r0
 800d43e:	f84c 1b04 	str.w	r1, [ip], #4
 800d442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d446:	dcec      	bgt.n	800d422 <__multadd+0x12>
 800d448:	b30e      	cbz	r6, 800d48e <__multadd+0x7e>
 800d44a:	68a3      	ldr	r3, [r4, #8]
 800d44c:	42ab      	cmp	r3, r5
 800d44e:	dc19      	bgt.n	800d484 <__multadd+0x74>
 800d450:	6861      	ldr	r1, [r4, #4]
 800d452:	4638      	mov	r0, r7
 800d454:	3101      	adds	r1, #1
 800d456:	f7ff ff79 	bl	800d34c <_Balloc>
 800d45a:	4680      	mov	r8, r0
 800d45c:	b928      	cbnz	r0, 800d46a <__multadd+0x5a>
 800d45e:	4602      	mov	r2, r0
 800d460:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <__multadd+0x84>)
 800d462:	480d      	ldr	r0, [pc, #52]	; (800d498 <__multadd+0x88>)
 800d464:	21ba      	movs	r1, #186	; 0xba
 800d466:	f000 fb3b 	bl	800dae0 <__assert_func>
 800d46a:	6922      	ldr	r2, [r4, #16]
 800d46c:	3202      	adds	r2, #2
 800d46e:	f104 010c 	add.w	r1, r4, #12
 800d472:	0092      	lsls	r2, r2, #2
 800d474:	300c      	adds	r0, #12
 800d476:	f7ff f8d7 	bl	800c628 <memcpy>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4638      	mov	r0, r7
 800d47e:	f7ff ffa5 	bl	800d3cc <_Bfree>
 800d482:	4644      	mov	r4, r8
 800d484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d488:	3501      	adds	r5, #1
 800d48a:	615e      	str	r6, [r3, #20]
 800d48c:	6125      	str	r5, [r4, #16]
 800d48e:	4620      	mov	r0, r4
 800d490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d494:	0800e855 	.word	0x0800e855
 800d498:	0800e866 	.word	0x0800e866

0800d49c <__hi0bits>:
 800d49c:	0c03      	lsrs	r3, r0, #16
 800d49e:	041b      	lsls	r3, r3, #16
 800d4a0:	b9d3      	cbnz	r3, 800d4d8 <__hi0bits+0x3c>
 800d4a2:	0400      	lsls	r0, r0, #16
 800d4a4:	2310      	movs	r3, #16
 800d4a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4aa:	bf04      	itt	eq
 800d4ac:	0200      	lsleq	r0, r0, #8
 800d4ae:	3308      	addeq	r3, #8
 800d4b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4b4:	bf04      	itt	eq
 800d4b6:	0100      	lsleq	r0, r0, #4
 800d4b8:	3304      	addeq	r3, #4
 800d4ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4be:	bf04      	itt	eq
 800d4c0:	0080      	lsleq	r0, r0, #2
 800d4c2:	3302      	addeq	r3, #2
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	db05      	blt.n	800d4d4 <__hi0bits+0x38>
 800d4c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d4cc:	f103 0301 	add.w	r3, r3, #1
 800d4d0:	bf08      	it	eq
 800d4d2:	2320      	moveq	r3, #32
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	4770      	bx	lr
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e7e4      	b.n	800d4a6 <__hi0bits+0xa>

0800d4dc <__lo0bits>:
 800d4dc:	6803      	ldr	r3, [r0, #0]
 800d4de:	f013 0207 	ands.w	r2, r3, #7
 800d4e2:	d00c      	beq.n	800d4fe <__lo0bits+0x22>
 800d4e4:	07d9      	lsls	r1, r3, #31
 800d4e6:	d422      	bmi.n	800d52e <__lo0bits+0x52>
 800d4e8:	079a      	lsls	r2, r3, #30
 800d4ea:	bf49      	itett	mi
 800d4ec:	085b      	lsrmi	r3, r3, #1
 800d4ee:	089b      	lsrpl	r3, r3, #2
 800d4f0:	6003      	strmi	r3, [r0, #0]
 800d4f2:	2201      	movmi	r2, #1
 800d4f4:	bf5c      	itt	pl
 800d4f6:	6003      	strpl	r3, [r0, #0]
 800d4f8:	2202      	movpl	r2, #2
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4770      	bx	lr
 800d4fe:	b299      	uxth	r1, r3
 800d500:	b909      	cbnz	r1, 800d506 <__lo0bits+0x2a>
 800d502:	0c1b      	lsrs	r3, r3, #16
 800d504:	2210      	movs	r2, #16
 800d506:	b2d9      	uxtb	r1, r3
 800d508:	b909      	cbnz	r1, 800d50e <__lo0bits+0x32>
 800d50a:	3208      	adds	r2, #8
 800d50c:	0a1b      	lsrs	r3, r3, #8
 800d50e:	0719      	lsls	r1, r3, #28
 800d510:	bf04      	itt	eq
 800d512:	091b      	lsreq	r3, r3, #4
 800d514:	3204      	addeq	r2, #4
 800d516:	0799      	lsls	r1, r3, #30
 800d518:	bf04      	itt	eq
 800d51a:	089b      	lsreq	r3, r3, #2
 800d51c:	3202      	addeq	r2, #2
 800d51e:	07d9      	lsls	r1, r3, #31
 800d520:	d403      	bmi.n	800d52a <__lo0bits+0x4e>
 800d522:	085b      	lsrs	r3, r3, #1
 800d524:	f102 0201 	add.w	r2, r2, #1
 800d528:	d003      	beq.n	800d532 <__lo0bits+0x56>
 800d52a:	6003      	str	r3, [r0, #0]
 800d52c:	e7e5      	b.n	800d4fa <__lo0bits+0x1e>
 800d52e:	2200      	movs	r2, #0
 800d530:	e7e3      	b.n	800d4fa <__lo0bits+0x1e>
 800d532:	2220      	movs	r2, #32
 800d534:	e7e1      	b.n	800d4fa <__lo0bits+0x1e>
	...

0800d538 <__i2b>:
 800d538:	b510      	push	{r4, lr}
 800d53a:	460c      	mov	r4, r1
 800d53c:	2101      	movs	r1, #1
 800d53e:	f7ff ff05 	bl	800d34c <_Balloc>
 800d542:	4602      	mov	r2, r0
 800d544:	b928      	cbnz	r0, 800d552 <__i2b+0x1a>
 800d546:	4b05      	ldr	r3, [pc, #20]	; (800d55c <__i2b+0x24>)
 800d548:	4805      	ldr	r0, [pc, #20]	; (800d560 <__i2b+0x28>)
 800d54a:	f240 1145 	movw	r1, #325	; 0x145
 800d54e:	f000 fac7 	bl	800dae0 <__assert_func>
 800d552:	2301      	movs	r3, #1
 800d554:	6144      	str	r4, [r0, #20]
 800d556:	6103      	str	r3, [r0, #16]
 800d558:	bd10      	pop	{r4, pc}
 800d55a:	bf00      	nop
 800d55c:	0800e855 	.word	0x0800e855
 800d560:	0800e866 	.word	0x0800e866

0800d564 <__multiply>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	4691      	mov	r9, r2
 800d56a:	690a      	ldr	r2, [r1, #16]
 800d56c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d570:	429a      	cmp	r2, r3
 800d572:	bfb8      	it	lt
 800d574:	460b      	movlt	r3, r1
 800d576:	460c      	mov	r4, r1
 800d578:	bfbc      	itt	lt
 800d57a:	464c      	movlt	r4, r9
 800d57c:	4699      	movlt	r9, r3
 800d57e:	6927      	ldr	r7, [r4, #16]
 800d580:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d584:	68a3      	ldr	r3, [r4, #8]
 800d586:	6861      	ldr	r1, [r4, #4]
 800d588:	eb07 060a 	add.w	r6, r7, sl
 800d58c:	42b3      	cmp	r3, r6
 800d58e:	b085      	sub	sp, #20
 800d590:	bfb8      	it	lt
 800d592:	3101      	addlt	r1, #1
 800d594:	f7ff feda 	bl	800d34c <_Balloc>
 800d598:	b930      	cbnz	r0, 800d5a8 <__multiply+0x44>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b44      	ldr	r3, [pc, #272]	; (800d6b0 <__multiply+0x14c>)
 800d59e:	4845      	ldr	r0, [pc, #276]	; (800d6b4 <__multiply+0x150>)
 800d5a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d5a4:	f000 fa9c 	bl	800dae0 <__assert_func>
 800d5a8:	f100 0514 	add.w	r5, r0, #20
 800d5ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	4543      	cmp	r3, r8
 800d5b6:	d321      	bcc.n	800d5fc <__multiply+0x98>
 800d5b8:	f104 0314 	add.w	r3, r4, #20
 800d5bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d5c0:	f109 0314 	add.w	r3, r9, #20
 800d5c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d5c8:	9202      	str	r2, [sp, #8]
 800d5ca:	1b3a      	subs	r2, r7, r4
 800d5cc:	3a15      	subs	r2, #21
 800d5ce:	f022 0203 	bic.w	r2, r2, #3
 800d5d2:	3204      	adds	r2, #4
 800d5d4:	f104 0115 	add.w	r1, r4, #21
 800d5d8:	428f      	cmp	r7, r1
 800d5da:	bf38      	it	cc
 800d5dc:	2204      	movcc	r2, #4
 800d5de:	9201      	str	r2, [sp, #4]
 800d5e0:	9a02      	ldr	r2, [sp, #8]
 800d5e2:	9303      	str	r3, [sp, #12]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d80c      	bhi.n	800d602 <__multiply+0x9e>
 800d5e8:	2e00      	cmp	r6, #0
 800d5ea:	dd03      	ble.n	800d5f4 <__multiply+0x90>
 800d5ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d05b      	beq.n	800d6ac <__multiply+0x148>
 800d5f4:	6106      	str	r6, [r0, #16]
 800d5f6:	b005      	add	sp, #20
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	f843 2b04 	str.w	r2, [r3], #4
 800d600:	e7d8      	b.n	800d5b4 <__multiply+0x50>
 800d602:	f8b3 a000 	ldrh.w	sl, [r3]
 800d606:	f1ba 0f00 	cmp.w	sl, #0
 800d60a:	d024      	beq.n	800d656 <__multiply+0xf2>
 800d60c:	f104 0e14 	add.w	lr, r4, #20
 800d610:	46a9      	mov	r9, r5
 800d612:	f04f 0c00 	mov.w	ip, #0
 800d616:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d61a:	f8d9 1000 	ldr.w	r1, [r9]
 800d61e:	fa1f fb82 	uxth.w	fp, r2
 800d622:	b289      	uxth	r1, r1
 800d624:	fb0a 110b 	mla	r1, sl, fp, r1
 800d628:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d62c:	f8d9 2000 	ldr.w	r2, [r9]
 800d630:	4461      	add	r1, ip
 800d632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d636:	fb0a c20b 	mla	r2, sl, fp, ip
 800d63a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d63e:	b289      	uxth	r1, r1
 800d640:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d644:	4577      	cmp	r7, lr
 800d646:	f849 1b04 	str.w	r1, [r9], #4
 800d64a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d64e:	d8e2      	bhi.n	800d616 <__multiply+0xb2>
 800d650:	9a01      	ldr	r2, [sp, #4]
 800d652:	f845 c002 	str.w	ip, [r5, r2]
 800d656:	9a03      	ldr	r2, [sp, #12]
 800d658:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d65c:	3304      	adds	r3, #4
 800d65e:	f1b9 0f00 	cmp.w	r9, #0
 800d662:	d021      	beq.n	800d6a8 <__multiply+0x144>
 800d664:	6829      	ldr	r1, [r5, #0]
 800d666:	f104 0c14 	add.w	ip, r4, #20
 800d66a:	46ae      	mov	lr, r5
 800d66c:	f04f 0a00 	mov.w	sl, #0
 800d670:	f8bc b000 	ldrh.w	fp, [ip]
 800d674:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d678:	fb09 220b 	mla	r2, r9, fp, r2
 800d67c:	4452      	add	r2, sl
 800d67e:	b289      	uxth	r1, r1
 800d680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d684:	f84e 1b04 	str.w	r1, [lr], #4
 800d688:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d68c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d690:	f8be 1000 	ldrh.w	r1, [lr]
 800d694:	fb09 110a 	mla	r1, r9, sl, r1
 800d698:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d69c:	4567      	cmp	r7, ip
 800d69e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6a2:	d8e5      	bhi.n	800d670 <__multiply+0x10c>
 800d6a4:	9a01      	ldr	r2, [sp, #4]
 800d6a6:	50a9      	str	r1, [r5, r2]
 800d6a8:	3504      	adds	r5, #4
 800d6aa:	e799      	b.n	800d5e0 <__multiply+0x7c>
 800d6ac:	3e01      	subs	r6, #1
 800d6ae:	e79b      	b.n	800d5e8 <__multiply+0x84>
 800d6b0:	0800e855 	.word	0x0800e855
 800d6b4:	0800e866 	.word	0x0800e866

0800d6b8 <__pow5mult>:
 800d6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6bc:	4615      	mov	r5, r2
 800d6be:	f012 0203 	ands.w	r2, r2, #3
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	460f      	mov	r7, r1
 800d6c6:	d007      	beq.n	800d6d8 <__pow5mult+0x20>
 800d6c8:	4c25      	ldr	r4, [pc, #148]	; (800d760 <__pow5mult+0xa8>)
 800d6ca:	3a01      	subs	r2, #1
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6d2:	f7ff fe9d 	bl	800d410 <__multadd>
 800d6d6:	4607      	mov	r7, r0
 800d6d8:	10ad      	asrs	r5, r5, #2
 800d6da:	d03d      	beq.n	800d758 <__pow5mult+0xa0>
 800d6dc:	69f4      	ldr	r4, [r6, #28]
 800d6de:	b97c      	cbnz	r4, 800d700 <__pow5mult+0x48>
 800d6e0:	2010      	movs	r0, #16
 800d6e2:	f7ff fe2b 	bl	800d33c <malloc>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	61f0      	str	r0, [r6, #28]
 800d6ea:	b928      	cbnz	r0, 800d6f8 <__pow5mult+0x40>
 800d6ec:	4b1d      	ldr	r3, [pc, #116]	; (800d764 <__pow5mult+0xac>)
 800d6ee:	481e      	ldr	r0, [pc, #120]	; (800d768 <__pow5mult+0xb0>)
 800d6f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d6f4:	f000 f9f4 	bl	800dae0 <__assert_func>
 800d6f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6fc:	6004      	str	r4, [r0, #0]
 800d6fe:	60c4      	str	r4, [r0, #12]
 800d700:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d708:	b94c      	cbnz	r4, 800d71e <__pow5mult+0x66>
 800d70a:	f240 2171 	movw	r1, #625	; 0x271
 800d70e:	4630      	mov	r0, r6
 800d710:	f7ff ff12 	bl	800d538 <__i2b>
 800d714:	2300      	movs	r3, #0
 800d716:	f8c8 0008 	str.w	r0, [r8, #8]
 800d71a:	4604      	mov	r4, r0
 800d71c:	6003      	str	r3, [r0, #0]
 800d71e:	f04f 0900 	mov.w	r9, #0
 800d722:	07eb      	lsls	r3, r5, #31
 800d724:	d50a      	bpl.n	800d73c <__pow5mult+0x84>
 800d726:	4639      	mov	r1, r7
 800d728:	4622      	mov	r2, r4
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ff1a 	bl	800d564 <__multiply>
 800d730:	4639      	mov	r1, r7
 800d732:	4680      	mov	r8, r0
 800d734:	4630      	mov	r0, r6
 800d736:	f7ff fe49 	bl	800d3cc <_Bfree>
 800d73a:	4647      	mov	r7, r8
 800d73c:	106d      	asrs	r5, r5, #1
 800d73e:	d00b      	beq.n	800d758 <__pow5mult+0xa0>
 800d740:	6820      	ldr	r0, [r4, #0]
 800d742:	b938      	cbnz	r0, 800d754 <__pow5mult+0x9c>
 800d744:	4622      	mov	r2, r4
 800d746:	4621      	mov	r1, r4
 800d748:	4630      	mov	r0, r6
 800d74a:	f7ff ff0b 	bl	800d564 <__multiply>
 800d74e:	6020      	str	r0, [r4, #0]
 800d750:	f8c0 9000 	str.w	r9, [r0]
 800d754:	4604      	mov	r4, r0
 800d756:	e7e4      	b.n	800d722 <__pow5mult+0x6a>
 800d758:	4638      	mov	r0, r7
 800d75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d75e:	bf00      	nop
 800d760:	0800e9b0 	.word	0x0800e9b0
 800d764:	0800e7e6 	.word	0x0800e7e6
 800d768:	0800e866 	.word	0x0800e866

0800d76c <__lshift>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	460c      	mov	r4, r1
 800d772:	6849      	ldr	r1, [r1, #4]
 800d774:	6923      	ldr	r3, [r4, #16]
 800d776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	4607      	mov	r7, r0
 800d77e:	4691      	mov	r9, r2
 800d780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d784:	f108 0601 	add.w	r6, r8, #1
 800d788:	42b3      	cmp	r3, r6
 800d78a:	db0b      	blt.n	800d7a4 <__lshift+0x38>
 800d78c:	4638      	mov	r0, r7
 800d78e:	f7ff fddd 	bl	800d34c <_Balloc>
 800d792:	4605      	mov	r5, r0
 800d794:	b948      	cbnz	r0, 800d7aa <__lshift+0x3e>
 800d796:	4602      	mov	r2, r0
 800d798:	4b28      	ldr	r3, [pc, #160]	; (800d83c <__lshift+0xd0>)
 800d79a:	4829      	ldr	r0, [pc, #164]	; (800d840 <__lshift+0xd4>)
 800d79c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d7a0:	f000 f99e 	bl	800dae0 <__assert_func>
 800d7a4:	3101      	adds	r1, #1
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	e7ee      	b.n	800d788 <__lshift+0x1c>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f100 0114 	add.w	r1, r0, #20
 800d7b0:	f100 0210 	add.w	r2, r0, #16
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	4553      	cmp	r3, sl
 800d7b8:	db33      	blt.n	800d822 <__lshift+0xb6>
 800d7ba:	6920      	ldr	r0, [r4, #16]
 800d7bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7c0:	f104 0314 	add.w	r3, r4, #20
 800d7c4:	f019 091f 	ands.w	r9, r9, #31
 800d7c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7d0:	d02b      	beq.n	800d82a <__lshift+0xbe>
 800d7d2:	f1c9 0e20 	rsb	lr, r9, #32
 800d7d6:	468a      	mov	sl, r1
 800d7d8:	2200      	movs	r2, #0
 800d7da:	6818      	ldr	r0, [r3, #0]
 800d7dc:	fa00 f009 	lsl.w	r0, r0, r9
 800d7e0:	4310      	orrs	r0, r2
 800d7e2:	f84a 0b04 	str.w	r0, [sl], #4
 800d7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ea:	459c      	cmp	ip, r3
 800d7ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7f0:	d8f3      	bhi.n	800d7da <__lshift+0x6e>
 800d7f2:	ebac 0304 	sub.w	r3, ip, r4
 800d7f6:	3b15      	subs	r3, #21
 800d7f8:	f023 0303 	bic.w	r3, r3, #3
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	f104 0015 	add.w	r0, r4, #21
 800d802:	4584      	cmp	ip, r0
 800d804:	bf38      	it	cc
 800d806:	2304      	movcc	r3, #4
 800d808:	50ca      	str	r2, [r1, r3]
 800d80a:	b10a      	cbz	r2, 800d810 <__lshift+0xa4>
 800d80c:	f108 0602 	add.w	r6, r8, #2
 800d810:	3e01      	subs	r6, #1
 800d812:	4638      	mov	r0, r7
 800d814:	612e      	str	r6, [r5, #16]
 800d816:	4621      	mov	r1, r4
 800d818:	f7ff fdd8 	bl	800d3cc <_Bfree>
 800d81c:	4628      	mov	r0, r5
 800d81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d822:	f842 0f04 	str.w	r0, [r2, #4]!
 800d826:	3301      	adds	r3, #1
 800d828:	e7c5      	b.n	800d7b6 <__lshift+0x4a>
 800d82a:	3904      	subs	r1, #4
 800d82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d830:	f841 2f04 	str.w	r2, [r1, #4]!
 800d834:	459c      	cmp	ip, r3
 800d836:	d8f9      	bhi.n	800d82c <__lshift+0xc0>
 800d838:	e7ea      	b.n	800d810 <__lshift+0xa4>
 800d83a:	bf00      	nop
 800d83c:	0800e855 	.word	0x0800e855
 800d840:	0800e866 	.word	0x0800e866

0800d844 <__mcmp>:
 800d844:	b530      	push	{r4, r5, lr}
 800d846:	6902      	ldr	r2, [r0, #16]
 800d848:	690c      	ldr	r4, [r1, #16]
 800d84a:	1b12      	subs	r2, r2, r4
 800d84c:	d10e      	bne.n	800d86c <__mcmp+0x28>
 800d84e:	f100 0314 	add.w	r3, r0, #20
 800d852:	3114      	adds	r1, #20
 800d854:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d85c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d860:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d864:	42a5      	cmp	r5, r4
 800d866:	d003      	beq.n	800d870 <__mcmp+0x2c>
 800d868:	d305      	bcc.n	800d876 <__mcmp+0x32>
 800d86a:	2201      	movs	r2, #1
 800d86c:	4610      	mov	r0, r2
 800d86e:	bd30      	pop	{r4, r5, pc}
 800d870:	4283      	cmp	r3, r0
 800d872:	d3f3      	bcc.n	800d85c <__mcmp+0x18>
 800d874:	e7fa      	b.n	800d86c <__mcmp+0x28>
 800d876:	f04f 32ff 	mov.w	r2, #4294967295
 800d87a:	e7f7      	b.n	800d86c <__mcmp+0x28>

0800d87c <__mdiff>:
 800d87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	460c      	mov	r4, r1
 800d882:	4606      	mov	r6, r0
 800d884:	4611      	mov	r1, r2
 800d886:	4620      	mov	r0, r4
 800d888:	4690      	mov	r8, r2
 800d88a:	f7ff ffdb 	bl	800d844 <__mcmp>
 800d88e:	1e05      	subs	r5, r0, #0
 800d890:	d110      	bne.n	800d8b4 <__mdiff+0x38>
 800d892:	4629      	mov	r1, r5
 800d894:	4630      	mov	r0, r6
 800d896:	f7ff fd59 	bl	800d34c <_Balloc>
 800d89a:	b930      	cbnz	r0, 800d8aa <__mdiff+0x2e>
 800d89c:	4b3a      	ldr	r3, [pc, #232]	; (800d988 <__mdiff+0x10c>)
 800d89e:	4602      	mov	r2, r0
 800d8a0:	f240 2137 	movw	r1, #567	; 0x237
 800d8a4:	4839      	ldr	r0, [pc, #228]	; (800d98c <__mdiff+0x110>)
 800d8a6:	f000 f91b 	bl	800dae0 <__assert_func>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b4:	bfa4      	itt	ge
 800d8b6:	4643      	movge	r3, r8
 800d8b8:	46a0      	movge	r8, r4
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8c0:	bfa6      	itte	ge
 800d8c2:	461c      	movge	r4, r3
 800d8c4:	2500      	movge	r5, #0
 800d8c6:	2501      	movlt	r5, #1
 800d8c8:	f7ff fd40 	bl	800d34c <_Balloc>
 800d8cc:	b920      	cbnz	r0, 800d8d8 <__mdiff+0x5c>
 800d8ce:	4b2e      	ldr	r3, [pc, #184]	; (800d988 <__mdiff+0x10c>)
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	f240 2145 	movw	r1, #581	; 0x245
 800d8d6:	e7e5      	b.n	800d8a4 <__mdiff+0x28>
 800d8d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d8dc:	6926      	ldr	r6, [r4, #16]
 800d8de:	60c5      	str	r5, [r0, #12]
 800d8e0:	f104 0914 	add.w	r9, r4, #20
 800d8e4:	f108 0514 	add.w	r5, r8, #20
 800d8e8:	f100 0e14 	add.w	lr, r0, #20
 800d8ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d8f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d8f4:	f108 0210 	add.w	r2, r8, #16
 800d8f8:	46f2      	mov	sl, lr
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d900:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d904:	fa11 f88b 	uxtah	r8, r1, fp
 800d908:	b299      	uxth	r1, r3
 800d90a:	0c1b      	lsrs	r3, r3, #16
 800d90c:	eba8 0801 	sub.w	r8, r8, r1
 800d910:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d914:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d918:	fa1f f888 	uxth.w	r8, r8
 800d91c:	1419      	asrs	r1, r3, #16
 800d91e:	454e      	cmp	r6, r9
 800d920:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d924:	f84a 3b04 	str.w	r3, [sl], #4
 800d928:	d8e8      	bhi.n	800d8fc <__mdiff+0x80>
 800d92a:	1b33      	subs	r3, r6, r4
 800d92c:	3b15      	subs	r3, #21
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	3304      	adds	r3, #4
 800d934:	3415      	adds	r4, #21
 800d936:	42a6      	cmp	r6, r4
 800d938:	bf38      	it	cc
 800d93a:	2304      	movcc	r3, #4
 800d93c:	441d      	add	r5, r3
 800d93e:	4473      	add	r3, lr
 800d940:	469e      	mov	lr, r3
 800d942:	462e      	mov	r6, r5
 800d944:	4566      	cmp	r6, ip
 800d946:	d30e      	bcc.n	800d966 <__mdiff+0xea>
 800d948:	f10c 0203 	add.w	r2, ip, #3
 800d94c:	1b52      	subs	r2, r2, r5
 800d94e:	f022 0203 	bic.w	r2, r2, #3
 800d952:	3d03      	subs	r5, #3
 800d954:	45ac      	cmp	ip, r5
 800d956:	bf38      	it	cc
 800d958:	2200      	movcc	r2, #0
 800d95a:	4413      	add	r3, r2
 800d95c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d960:	b17a      	cbz	r2, 800d982 <__mdiff+0x106>
 800d962:	6107      	str	r7, [r0, #16]
 800d964:	e7a4      	b.n	800d8b0 <__mdiff+0x34>
 800d966:	f856 8b04 	ldr.w	r8, [r6], #4
 800d96a:	fa11 f288 	uxtah	r2, r1, r8
 800d96e:	1414      	asrs	r4, r2, #16
 800d970:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d974:	b292      	uxth	r2, r2
 800d976:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d97a:	f84e 2b04 	str.w	r2, [lr], #4
 800d97e:	1421      	asrs	r1, r4, #16
 800d980:	e7e0      	b.n	800d944 <__mdiff+0xc8>
 800d982:	3f01      	subs	r7, #1
 800d984:	e7ea      	b.n	800d95c <__mdiff+0xe0>
 800d986:	bf00      	nop
 800d988:	0800e855 	.word	0x0800e855
 800d98c:	0800e866 	.word	0x0800e866

0800d990 <__d2b>:
 800d990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d994:	460f      	mov	r7, r1
 800d996:	2101      	movs	r1, #1
 800d998:	ec59 8b10 	vmov	r8, r9, d0
 800d99c:	4616      	mov	r6, r2
 800d99e:	f7ff fcd5 	bl	800d34c <_Balloc>
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	b930      	cbnz	r0, 800d9b4 <__d2b+0x24>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	4b24      	ldr	r3, [pc, #144]	; (800da3c <__d2b+0xac>)
 800d9aa:	4825      	ldr	r0, [pc, #148]	; (800da40 <__d2b+0xb0>)
 800d9ac:	f240 310f 	movw	r1, #783	; 0x30f
 800d9b0:	f000 f896 	bl	800dae0 <__assert_func>
 800d9b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9bc:	bb2d      	cbnz	r5, 800da0a <__d2b+0x7a>
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	f1b8 0300 	subs.w	r3, r8, #0
 800d9c4:	d026      	beq.n	800da14 <__d2b+0x84>
 800d9c6:	4668      	mov	r0, sp
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	f7ff fd87 	bl	800d4dc <__lo0bits>
 800d9ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9d2:	b1e8      	cbz	r0, 800da10 <__d2b+0x80>
 800d9d4:	f1c0 0320 	rsb	r3, r0, #32
 800d9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9dc:	430b      	orrs	r3, r1
 800d9de:	40c2      	lsrs	r2, r0
 800d9e0:	6163      	str	r3, [r4, #20]
 800d9e2:	9201      	str	r2, [sp, #4]
 800d9e4:	9b01      	ldr	r3, [sp, #4]
 800d9e6:	61a3      	str	r3, [r4, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bf14      	ite	ne
 800d9ec:	2202      	movne	r2, #2
 800d9ee:	2201      	moveq	r2, #1
 800d9f0:	6122      	str	r2, [r4, #16]
 800d9f2:	b1bd      	cbz	r5, 800da24 <__d2b+0x94>
 800d9f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9f8:	4405      	add	r5, r0
 800d9fa:	603d      	str	r5, [r7, #0]
 800d9fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da00:	6030      	str	r0, [r6, #0]
 800da02:	4620      	mov	r0, r4
 800da04:	b003      	add	sp, #12
 800da06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da0e:	e7d6      	b.n	800d9be <__d2b+0x2e>
 800da10:	6161      	str	r1, [r4, #20]
 800da12:	e7e7      	b.n	800d9e4 <__d2b+0x54>
 800da14:	a801      	add	r0, sp, #4
 800da16:	f7ff fd61 	bl	800d4dc <__lo0bits>
 800da1a:	9b01      	ldr	r3, [sp, #4]
 800da1c:	6163      	str	r3, [r4, #20]
 800da1e:	3020      	adds	r0, #32
 800da20:	2201      	movs	r2, #1
 800da22:	e7e5      	b.n	800d9f0 <__d2b+0x60>
 800da24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da2c:	6038      	str	r0, [r7, #0]
 800da2e:	6918      	ldr	r0, [r3, #16]
 800da30:	f7ff fd34 	bl	800d49c <__hi0bits>
 800da34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da38:	e7e2      	b.n	800da00 <__d2b+0x70>
 800da3a:	bf00      	nop
 800da3c:	0800e855 	.word	0x0800e855
 800da40:	0800e866 	.word	0x0800e866

0800da44 <_mprec_log10>:
 800da44:	2817      	cmp	r0, #23
 800da46:	b5d0      	push	{r4, r6, r7, lr}
 800da48:	4604      	mov	r4, r0
 800da4a:	dc07      	bgt.n	800da5c <_mprec_log10+0x18>
 800da4c:	4b09      	ldr	r3, [pc, #36]	; (800da74 <_mprec_log10+0x30>)
 800da4e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800da52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da56:	ec41 0b10 	vmov	d0, r0, r1
 800da5a:	bdd0      	pop	{r4, r6, r7, pc}
 800da5c:	4906      	ldr	r1, [pc, #24]	; (800da78 <_mprec_log10+0x34>)
 800da5e:	4f07      	ldr	r7, [pc, #28]	; (800da7c <_mprec_log10+0x38>)
 800da60:	2000      	movs	r0, #0
 800da62:	2600      	movs	r6, #0
 800da64:	4632      	mov	r2, r6
 800da66:	463b      	mov	r3, r7
 800da68:	f7f2 fdce 	bl	8000608 <__aeabi_dmul>
 800da6c:	3c01      	subs	r4, #1
 800da6e:	d1f9      	bne.n	800da64 <_mprec_log10+0x20>
 800da70:	e7f1      	b.n	800da56 <_mprec_log10+0x12>
 800da72:	bf00      	nop
 800da74:	0800e8e8 	.word	0x0800e8e8
 800da78:	3ff00000 	.word	0x3ff00000
 800da7c:	40240000 	.word	0x40240000

0800da80 <_realloc_r>:
 800da80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da84:	4680      	mov	r8, r0
 800da86:	4614      	mov	r4, r2
 800da88:	460e      	mov	r6, r1
 800da8a:	b921      	cbnz	r1, 800da96 <_realloc_r+0x16>
 800da8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da90:	4611      	mov	r1, r2
 800da92:	f7fe b83d 	b.w	800bb10 <_malloc_r>
 800da96:	b92a      	cbnz	r2, 800daa4 <_realloc_r+0x24>
 800da98:	f7fd ffce 	bl	800ba38 <_free_r>
 800da9c:	4625      	mov	r5, r4
 800da9e:	4628      	mov	r0, r5
 800daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa4:	f000 f850 	bl	800db48 <_malloc_usable_size_r>
 800daa8:	4284      	cmp	r4, r0
 800daaa:	4607      	mov	r7, r0
 800daac:	d802      	bhi.n	800dab4 <_realloc_r+0x34>
 800daae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dab2:	d812      	bhi.n	800dada <_realloc_r+0x5a>
 800dab4:	4621      	mov	r1, r4
 800dab6:	4640      	mov	r0, r8
 800dab8:	f7fe f82a 	bl	800bb10 <_malloc_r>
 800dabc:	4605      	mov	r5, r0
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d0ed      	beq.n	800da9e <_realloc_r+0x1e>
 800dac2:	42bc      	cmp	r4, r7
 800dac4:	4622      	mov	r2, r4
 800dac6:	4631      	mov	r1, r6
 800dac8:	bf28      	it	cs
 800daca:	463a      	movcs	r2, r7
 800dacc:	f7fe fdac 	bl	800c628 <memcpy>
 800dad0:	4631      	mov	r1, r6
 800dad2:	4640      	mov	r0, r8
 800dad4:	f7fd ffb0 	bl	800ba38 <_free_r>
 800dad8:	e7e1      	b.n	800da9e <_realloc_r+0x1e>
 800dada:	4635      	mov	r5, r6
 800dadc:	e7df      	b.n	800da9e <_realloc_r+0x1e>
	...

0800dae0 <__assert_func>:
 800dae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dae2:	4614      	mov	r4, r2
 800dae4:	461a      	mov	r2, r3
 800dae6:	4b09      	ldr	r3, [pc, #36]	; (800db0c <__assert_func+0x2c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4605      	mov	r5, r0
 800daec:	68d8      	ldr	r0, [r3, #12]
 800daee:	b14c      	cbz	r4, 800db04 <__assert_func+0x24>
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <__assert_func+0x30>)
 800daf2:	9100      	str	r1, [sp, #0]
 800daf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800daf8:	4906      	ldr	r1, [pc, #24]	; (800db14 <__assert_func+0x34>)
 800dafa:	462b      	mov	r3, r5
 800dafc:	f000 f82c 	bl	800db58 <fiprintf>
 800db00:	f000 f83c 	bl	800db7c <abort>
 800db04:	4b04      	ldr	r3, [pc, #16]	; (800db18 <__assert_func+0x38>)
 800db06:	461c      	mov	r4, r3
 800db08:	e7f3      	b.n	800daf2 <__assert_func+0x12>
 800db0a:	bf00      	nop
 800db0c:	20000084 	.word	0x20000084
 800db10:	0800e9bc 	.word	0x0800e9bc
 800db14:	0800e9c9 	.word	0x0800e9c9
 800db18:	0800e9f7 	.word	0x0800e9f7

0800db1c <_calloc_r>:
 800db1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db1e:	fba1 2402 	umull	r2, r4, r1, r2
 800db22:	b94c      	cbnz	r4, 800db38 <_calloc_r+0x1c>
 800db24:	4611      	mov	r1, r2
 800db26:	9201      	str	r2, [sp, #4]
 800db28:	f7fd fff2 	bl	800bb10 <_malloc_r>
 800db2c:	9a01      	ldr	r2, [sp, #4]
 800db2e:	4605      	mov	r5, r0
 800db30:	b930      	cbnz	r0, 800db40 <_calloc_r+0x24>
 800db32:	4628      	mov	r0, r5
 800db34:	b003      	add	sp, #12
 800db36:	bd30      	pop	{r4, r5, pc}
 800db38:	220c      	movs	r2, #12
 800db3a:	6002      	str	r2, [r0, #0]
 800db3c:	2500      	movs	r5, #0
 800db3e:	e7f8      	b.n	800db32 <_calloc_r+0x16>
 800db40:	4621      	mov	r1, r4
 800db42:	f7fd fefe 	bl	800b942 <memset>
 800db46:	e7f4      	b.n	800db32 <_calloc_r+0x16>

0800db48 <_malloc_usable_size_r>:
 800db48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db4c:	1f18      	subs	r0, r3, #4
 800db4e:	2b00      	cmp	r3, #0
 800db50:	bfbc      	itt	lt
 800db52:	580b      	ldrlt	r3, [r1, r0]
 800db54:	18c0      	addlt	r0, r0, r3
 800db56:	4770      	bx	lr

0800db58 <fiprintf>:
 800db58:	b40e      	push	{r1, r2, r3}
 800db5a:	b503      	push	{r0, r1, lr}
 800db5c:	4601      	mov	r1, r0
 800db5e:	ab03      	add	r3, sp, #12
 800db60:	4805      	ldr	r0, [pc, #20]	; (800db78 <fiprintf+0x20>)
 800db62:	f853 2b04 	ldr.w	r2, [r3], #4
 800db66:	6800      	ldr	r0, [r0, #0]
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	f000 f837 	bl	800dbdc <_vfiprintf_r>
 800db6e:	b002      	add	sp, #8
 800db70:	f85d eb04 	ldr.w	lr, [sp], #4
 800db74:	b003      	add	sp, #12
 800db76:	4770      	bx	lr
 800db78:	20000084 	.word	0x20000084

0800db7c <abort>:
 800db7c:	b508      	push	{r3, lr}
 800db7e:	2006      	movs	r0, #6
 800db80:	f000 fa04 	bl	800df8c <raise>
 800db84:	2001      	movs	r0, #1
 800db86:	f7f3 fed7 	bl	8001938 <_exit>

0800db8a <__sfputc_r>:
 800db8a:	6893      	ldr	r3, [r2, #8]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	2b00      	cmp	r3, #0
 800db90:	b410      	push	{r4}
 800db92:	6093      	str	r3, [r2, #8]
 800db94:	da08      	bge.n	800dba8 <__sfputc_r+0x1e>
 800db96:	6994      	ldr	r4, [r2, #24]
 800db98:	42a3      	cmp	r3, r4
 800db9a:	db01      	blt.n	800dba0 <__sfputc_r+0x16>
 800db9c:	290a      	cmp	r1, #10
 800db9e:	d103      	bne.n	800dba8 <__sfputc_r+0x1e>
 800dba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dba4:	f000 b934 	b.w	800de10 <__swbuf_r>
 800dba8:	6813      	ldr	r3, [r2, #0]
 800dbaa:	1c58      	adds	r0, r3, #1
 800dbac:	6010      	str	r0, [r2, #0]
 800dbae:	7019      	strb	r1, [r3, #0]
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <__sfputs_r>:
 800dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbba:	4606      	mov	r6, r0
 800dbbc:	460f      	mov	r7, r1
 800dbbe:	4614      	mov	r4, r2
 800dbc0:	18d5      	adds	r5, r2, r3
 800dbc2:	42ac      	cmp	r4, r5
 800dbc4:	d101      	bne.n	800dbca <__sfputs_r+0x12>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e007      	b.n	800dbda <__sfputs_r+0x22>
 800dbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbce:	463a      	mov	r2, r7
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f7ff ffda 	bl	800db8a <__sfputc_r>
 800dbd6:	1c43      	adds	r3, r0, #1
 800dbd8:	d1f3      	bne.n	800dbc2 <__sfputs_r+0xa>
 800dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dbdc <_vfiprintf_r>:
 800dbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	460d      	mov	r5, r1
 800dbe2:	b09d      	sub	sp, #116	; 0x74
 800dbe4:	4614      	mov	r4, r2
 800dbe6:	4698      	mov	r8, r3
 800dbe8:	4606      	mov	r6, r0
 800dbea:	b118      	cbz	r0, 800dbf4 <_vfiprintf_r+0x18>
 800dbec:	6a03      	ldr	r3, [r0, #32]
 800dbee:	b90b      	cbnz	r3, 800dbf4 <_vfiprintf_r+0x18>
 800dbf0:	f7fd fdfa 	bl	800b7e8 <__sinit>
 800dbf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbf6:	07d9      	lsls	r1, r3, #31
 800dbf8:	d405      	bmi.n	800dc06 <_vfiprintf_r+0x2a>
 800dbfa:	89ab      	ldrh	r3, [r5, #12]
 800dbfc:	059a      	lsls	r2, r3, #22
 800dbfe:	d402      	bmi.n	800dc06 <_vfiprintf_r+0x2a>
 800dc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc02:	f7fd ff17 	bl	800ba34 <__retarget_lock_acquire_recursive>
 800dc06:	89ab      	ldrh	r3, [r5, #12]
 800dc08:	071b      	lsls	r3, r3, #28
 800dc0a:	d501      	bpl.n	800dc10 <_vfiprintf_r+0x34>
 800dc0c:	692b      	ldr	r3, [r5, #16]
 800dc0e:	b99b      	cbnz	r3, 800dc38 <_vfiprintf_r+0x5c>
 800dc10:	4629      	mov	r1, r5
 800dc12:	4630      	mov	r0, r6
 800dc14:	f000 f93a 	bl	800de8c <__swsetup_r>
 800dc18:	b170      	cbz	r0, 800dc38 <_vfiprintf_r+0x5c>
 800dc1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc1c:	07dc      	lsls	r4, r3, #31
 800dc1e:	d504      	bpl.n	800dc2a <_vfiprintf_r+0x4e>
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	b01d      	add	sp, #116	; 0x74
 800dc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	0598      	lsls	r0, r3, #22
 800dc2e:	d4f7      	bmi.n	800dc20 <_vfiprintf_r+0x44>
 800dc30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc32:	f7fd ff00 	bl	800ba36 <__retarget_lock_release_recursive>
 800dc36:	e7f3      	b.n	800dc20 <_vfiprintf_r+0x44>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc3c:	2320      	movs	r3, #32
 800dc3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc42:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc46:	2330      	movs	r3, #48	; 0x30
 800dc48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ddfc <_vfiprintf_r+0x220>
 800dc4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc50:	f04f 0901 	mov.w	r9, #1
 800dc54:	4623      	mov	r3, r4
 800dc56:	469a      	mov	sl, r3
 800dc58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc5c:	b10a      	cbz	r2, 800dc62 <_vfiprintf_r+0x86>
 800dc5e:	2a25      	cmp	r2, #37	; 0x25
 800dc60:	d1f9      	bne.n	800dc56 <_vfiprintf_r+0x7a>
 800dc62:	ebba 0b04 	subs.w	fp, sl, r4
 800dc66:	d00b      	beq.n	800dc80 <_vfiprintf_r+0xa4>
 800dc68:	465b      	mov	r3, fp
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f7ff ffa2 	bl	800dbb8 <__sfputs_r>
 800dc74:	3001      	adds	r0, #1
 800dc76:	f000 80a9 	beq.w	800ddcc <_vfiprintf_r+0x1f0>
 800dc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc7c:	445a      	add	r2, fp
 800dc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc80:	f89a 3000 	ldrb.w	r3, [sl]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 80a1 	beq.w	800ddcc <_vfiprintf_r+0x1f0>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc94:	f10a 0a01 	add.w	sl, sl, #1
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	9307      	str	r3, [sp, #28]
 800dc9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dca0:	931a      	str	r3, [sp, #104]	; 0x68
 800dca2:	4654      	mov	r4, sl
 800dca4:	2205      	movs	r2, #5
 800dca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcaa:	4854      	ldr	r0, [pc, #336]	; (800ddfc <_vfiprintf_r+0x220>)
 800dcac:	f7f2 faa0 	bl	80001f0 <memchr>
 800dcb0:	9a04      	ldr	r2, [sp, #16]
 800dcb2:	b9d8      	cbnz	r0, 800dcec <_vfiprintf_r+0x110>
 800dcb4:	06d1      	lsls	r1, r2, #27
 800dcb6:	bf44      	itt	mi
 800dcb8:	2320      	movmi	r3, #32
 800dcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcbe:	0713      	lsls	r3, r2, #28
 800dcc0:	bf44      	itt	mi
 800dcc2:	232b      	movmi	r3, #43	; 0x2b
 800dcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcc8:	f89a 3000 	ldrb.w	r3, [sl]
 800dccc:	2b2a      	cmp	r3, #42	; 0x2a
 800dcce:	d015      	beq.n	800dcfc <_vfiprintf_r+0x120>
 800dcd0:	9a07      	ldr	r2, [sp, #28]
 800dcd2:	4654      	mov	r4, sl
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	f04f 0c0a 	mov.w	ip, #10
 800dcda:	4621      	mov	r1, r4
 800dcdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dce0:	3b30      	subs	r3, #48	; 0x30
 800dce2:	2b09      	cmp	r3, #9
 800dce4:	d94d      	bls.n	800dd82 <_vfiprintf_r+0x1a6>
 800dce6:	b1b0      	cbz	r0, 800dd16 <_vfiprintf_r+0x13a>
 800dce8:	9207      	str	r2, [sp, #28]
 800dcea:	e014      	b.n	800dd16 <_vfiprintf_r+0x13a>
 800dcec:	eba0 0308 	sub.w	r3, r0, r8
 800dcf0:	fa09 f303 	lsl.w	r3, r9, r3
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	9304      	str	r3, [sp, #16]
 800dcf8:	46a2      	mov	sl, r4
 800dcfa:	e7d2      	b.n	800dca2 <_vfiprintf_r+0xc6>
 800dcfc:	9b03      	ldr	r3, [sp, #12]
 800dcfe:	1d19      	adds	r1, r3, #4
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	9103      	str	r1, [sp, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	bfbb      	ittet	lt
 800dd08:	425b      	neglt	r3, r3
 800dd0a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd0e:	9307      	strge	r3, [sp, #28]
 800dd10:	9307      	strlt	r3, [sp, #28]
 800dd12:	bfb8      	it	lt
 800dd14:	9204      	strlt	r2, [sp, #16]
 800dd16:	7823      	ldrb	r3, [r4, #0]
 800dd18:	2b2e      	cmp	r3, #46	; 0x2e
 800dd1a:	d10c      	bne.n	800dd36 <_vfiprintf_r+0x15a>
 800dd1c:	7863      	ldrb	r3, [r4, #1]
 800dd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd20:	d134      	bne.n	800dd8c <_vfiprintf_r+0x1b0>
 800dd22:	9b03      	ldr	r3, [sp, #12]
 800dd24:	1d1a      	adds	r2, r3, #4
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	9203      	str	r2, [sp, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfb8      	it	lt
 800dd2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd32:	3402      	adds	r4, #2
 800dd34:	9305      	str	r3, [sp, #20]
 800dd36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800de0c <_vfiprintf_r+0x230>
 800dd3a:	7821      	ldrb	r1, [r4, #0]
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	4650      	mov	r0, sl
 800dd40:	f7f2 fa56 	bl	80001f0 <memchr>
 800dd44:	b138      	cbz	r0, 800dd56 <_vfiprintf_r+0x17a>
 800dd46:	9b04      	ldr	r3, [sp, #16]
 800dd48:	eba0 000a 	sub.w	r0, r0, sl
 800dd4c:	2240      	movs	r2, #64	; 0x40
 800dd4e:	4082      	lsls	r2, r0
 800dd50:	4313      	orrs	r3, r2
 800dd52:	3401      	adds	r4, #1
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5a:	4829      	ldr	r0, [pc, #164]	; (800de00 <_vfiprintf_r+0x224>)
 800dd5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd60:	2206      	movs	r2, #6
 800dd62:	f7f2 fa45 	bl	80001f0 <memchr>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d03f      	beq.n	800ddea <_vfiprintf_r+0x20e>
 800dd6a:	4b26      	ldr	r3, [pc, #152]	; (800de04 <_vfiprintf_r+0x228>)
 800dd6c:	bb1b      	cbnz	r3, 800ddb6 <_vfiprintf_r+0x1da>
 800dd6e:	9b03      	ldr	r3, [sp, #12]
 800dd70:	3307      	adds	r3, #7
 800dd72:	f023 0307 	bic.w	r3, r3, #7
 800dd76:	3308      	adds	r3, #8
 800dd78:	9303      	str	r3, [sp, #12]
 800dd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7c:	443b      	add	r3, r7
 800dd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd80:	e768      	b.n	800dc54 <_vfiprintf_r+0x78>
 800dd82:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd86:	460c      	mov	r4, r1
 800dd88:	2001      	movs	r0, #1
 800dd8a:	e7a6      	b.n	800dcda <_vfiprintf_r+0xfe>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	3401      	adds	r4, #1
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	4619      	mov	r1, r3
 800dd94:	f04f 0c0a 	mov.w	ip, #10
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd9e:	3a30      	subs	r2, #48	; 0x30
 800dda0:	2a09      	cmp	r2, #9
 800dda2:	d903      	bls.n	800ddac <_vfiprintf_r+0x1d0>
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d0c6      	beq.n	800dd36 <_vfiprintf_r+0x15a>
 800dda8:	9105      	str	r1, [sp, #20]
 800ddaa:	e7c4      	b.n	800dd36 <_vfiprintf_r+0x15a>
 800ddac:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e7f0      	b.n	800dd98 <_vfiprintf_r+0x1bc>
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	462a      	mov	r2, r5
 800ddbc:	4b12      	ldr	r3, [pc, #72]	; (800de08 <_vfiprintf_r+0x22c>)
 800ddbe:	a904      	add	r1, sp, #16
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f3af 8000 	nop.w
 800ddc6:	4607      	mov	r7, r0
 800ddc8:	1c78      	adds	r0, r7, #1
 800ddca:	d1d6      	bne.n	800dd7a <_vfiprintf_r+0x19e>
 800ddcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddce:	07d9      	lsls	r1, r3, #31
 800ddd0:	d405      	bmi.n	800ddde <_vfiprintf_r+0x202>
 800ddd2:	89ab      	ldrh	r3, [r5, #12]
 800ddd4:	059a      	lsls	r2, r3, #22
 800ddd6:	d402      	bmi.n	800ddde <_vfiprintf_r+0x202>
 800ddd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddda:	f7fd fe2c 	bl	800ba36 <__retarget_lock_release_recursive>
 800ddde:	89ab      	ldrh	r3, [r5, #12]
 800dde0:	065b      	lsls	r3, r3, #25
 800dde2:	f53f af1d 	bmi.w	800dc20 <_vfiprintf_r+0x44>
 800dde6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dde8:	e71c      	b.n	800dc24 <_vfiprintf_r+0x48>
 800ddea:	ab03      	add	r3, sp, #12
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4b05      	ldr	r3, [pc, #20]	; (800de08 <_vfiprintf_r+0x22c>)
 800ddf2:	a904      	add	r1, sp, #16
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7fe fa15 	bl	800c224 <_printf_i>
 800ddfa:	e7e4      	b.n	800ddc6 <_vfiprintf_r+0x1ea>
 800ddfc:	0800e7a4 	.word	0x0800e7a4
 800de00:	0800e7ae 	.word	0x0800e7ae
 800de04:	00000000 	.word	0x00000000
 800de08:	0800dbb9 	.word	0x0800dbb9
 800de0c:	0800e7aa 	.word	0x0800e7aa

0800de10 <__swbuf_r>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	460e      	mov	r6, r1
 800de14:	4614      	mov	r4, r2
 800de16:	4605      	mov	r5, r0
 800de18:	b118      	cbz	r0, 800de22 <__swbuf_r+0x12>
 800de1a:	6a03      	ldr	r3, [r0, #32]
 800de1c:	b90b      	cbnz	r3, 800de22 <__swbuf_r+0x12>
 800de1e:	f7fd fce3 	bl	800b7e8 <__sinit>
 800de22:	69a3      	ldr	r3, [r4, #24]
 800de24:	60a3      	str	r3, [r4, #8]
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	071a      	lsls	r2, r3, #28
 800de2a:	d525      	bpl.n	800de78 <__swbuf_r+0x68>
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	b31b      	cbz	r3, 800de78 <__swbuf_r+0x68>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	6922      	ldr	r2, [r4, #16]
 800de34:	1a98      	subs	r0, r3, r2
 800de36:	6963      	ldr	r3, [r4, #20]
 800de38:	b2f6      	uxtb	r6, r6
 800de3a:	4283      	cmp	r3, r0
 800de3c:	4637      	mov	r7, r6
 800de3e:	dc04      	bgt.n	800de4a <__swbuf_r+0x3a>
 800de40:	4621      	mov	r1, r4
 800de42:	4628      	mov	r0, r5
 800de44:	f7fe fb96 	bl	800c574 <_fflush_r>
 800de48:	b9e0      	cbnz	r0, 800de84 <__swbuf_r+0x74>
 800de4a:	68a3      	ldr	r3, [r4, #8]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	60a3      	str	r3, [r4, #8]
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	6022      	str	r2, [r4, #0]
 800de56:	701e      	strb	r6, [r3, #0]
 800de58:	6962      	ldr	r2, [r4, #20]
 800de5a:	1c43      	adds	r3, r0, #1
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d004      	beq.n	800de6a <__swbuf_r+0x5a>
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	07db      	lsls	r3, r3, #31
 800de64:	d506      	bpl.n	800de74 <__swbuf_r+0x64>
 800de66:	2e0a      	cmp	r6, #10
 800de68:	d104      	bne.n	800de74 <__swbuf_r+0x64>
 800de6a:	4621      	mov	r1, r4
 800de6c:	4628      	mov	r0, r5
 800de6e:	f7fe fb81 	bl	800c574 <_fflush_r>
 800de72:	b938      	cbnz	r0, 800de84 <__swbuf_r+0x74>
 800de74:	4638      	mov	r0, r7
 800de76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de78:	4621      	mov	r1, r4
 800de7a:	4628      	mov	r0, r5
 800de7c:	f000 f806 	bl	800de8c <__swsetup_r>
 800de80:	2800      	cmp	r0, #0
 800de82:	d0d5      	beq.n	800de30 <__swbuf_r+0x20>
 800de84:	f04f 37ff 	mov.w	r7, #4294967295
 800de88:	e7f4      	b.n	800de74 <__swbuf_r+0x64>
	...

0800de8c <__swsetup_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4b2a      	ldr	r3, [pc, #168]	; (800df38 <__swsetup_r+0xac>)
 800de90:	4605      	mov	r5, r0
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	460c      	mov	r4, r1
 800de96:	b118      	cbz	r0, 800dea0 <__swsetup_r+0x14>
 800de98:	6a03      	ldr	r3, [r0, #32]
 800de9a:	b90b      	cbnz	r3, 800dea0 <__swsetup_r+0x14>
 800de9c:	f7fd fca4 	bl	800b7e8 <__sinit>
 800dea0:	89a3      	ldrh	r3, [r4, #12]
 800dea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dea6:	0718      	lsls	r0, r3, #28
 800dea8:	d422      	bmi.n	800def0 <__swsetup_r+0x64>
 800deaa:	06d9      	lsls	r1, r3, #27
 800deac:	d407      	bmi.n	800debe <__swsetup_r+0x32>
 800deae:	2309      	movs	r3, #9
 800deb0:	602b      	str	r3, [r5, #0]
 800deb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800deb6:	81a3      	strh	r3, [r4, #12]
 800deb8:	f04f 30ff 	mov.w	r0, #4294967295
 800debc:	e034      	b.n	800df28 <__swsetup_r+0x9c>
 800debe:	0758      	lsls	r0, r3, #29
 800dec0:	d512      	bpl.n	800dee8 <__swsetup_r+0x5c>
 800dec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dec4:	b141      	cbz	r1, 800ded8 <__swsetup_r+0x4c>
 800dec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deca:	4299      	cmp	r1, r3
 800decc:	d002      	beq.n	800ded4 <__swsetup_r+0x48>
 800dece:	4628      	mov	r0, r5
 800ded0:	f7fd fdb2 	bl	800ba38 <_free_r>
 800ded4:	2300      	movs	r3, #0
 800ded6:	6363      	str	r3, [r4, #52]	; 0x34
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dede:	81a3      	strh	r3, [r4, #12]
 800dee0:	2300      	movs	r3, #0
 800dee2:	6063      	str	r3, [r4, #4]
 800dee4:	6923      	ldr	r3, [r4, #16]
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f043 0308 	orr.w	r3, r3, #8
 800deee:	81a3      	strh	r3, [r4, #12]
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	b94b      	cbnz	r3, 800df08 <__swsetup_r+0x7c>
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800defa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800defe:	d003      	beq.n	800df08 <__swsetup_r+0x7c>
 800df00:	4621      	mov	r1, r4
 800df02:	4628      	mov	r0, r5
 800df04:	f000 f884 	bl	800e010 <__smakebuf_r>
 800df08:	89a0      	ldrh	r0, [r4, #12]
 800df0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df0e:	f010 0301 	ands.w	r3, r0, #1
 800df12:	d00a      	beq.n	800df2a <__swsetup_r+0x9e>
 800df14:	2300      	movs	r3, #0
 800df16:	60a3      	str	r3, [r4, #8]
 800df18:	6963      	ldr	r3, [r4, #20]
 800df1a:	425b      	negs	r3, r3
 800df1c:	61a3      	str	r3, [r4, #24]
 800df1e:	6923      	ldr	r3, [r4, #16]
 800df20:	b943      	cbnz	r3, 800df34 <__swsetup_r+0xa8>
 800df22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df26:	d1c4      	bne.n	800deb2 <__swsetup_r+0x26>
 800df28:	bd38      	pop	{r3, r4, r5, pc}
 800df2a:	0781      	lsls	r1, r0, #30
 800df2c:	bf58      	it	pl
 800df2e:	6963      	ldrpl	r3, [r4, #20]
 800df30:	60a3      	str	r3, [r4, #8]
 800df32:	e7f4      	b.n	800df1e <__swsetup_r+0x92>
 800df34:	2000      	movs	r0, #0
 800df36:	e7f7      	b.n	800df28 <__swsetup_r+0x9c>
 800df38:	20000084 	.word	0x20000084

0800df3c <_raise_r>:
 800df3c:	291f      	cmp	r1, #31
 800df3e:	b538      	push	{r3, r4, r5, lr}
 800df40:	4604      	mov	r4, r0
 800df42:	460d      	mov	r5, r1
 800df44:	d904      	bls.n	800df50 <_raise_r+0x14>
 800df46:	2316      	movs	r3, #22
 800df48:	6003      	str	r3, [r0, #0]
 800df4a:	f04f 30ff 	mov.w	r0, #4294967295
 800df4e:	bd38      	pop	{r3, r4, r5, pc}
 800df50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df52:	b112      	cbz	r2, 800df5a <_raise_r+0x1e>
 800df54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df58:	b94b      	cbnz	r3, 800df6e <_raise_r+0x32>
 800df5a:	4620      	mov	r0, r4
 800df5c:	f000 f830 	bl	800dfc0 <_getpid_r>
 800df60:	462a      	mov	r2, r5
 800df62:	4601      	mov	r1, r0
 800df64:	4620      	mov	r0, r4
 800df66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df6a:	f000 b817 	b.w	800df9c <_kill_r>
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d00a      	beq.n	800df88 <_raise_r+0x4c>
 800df72:	1c59      	adds	r1, r3, #1
 800df74:	d103      	bne.n	800df7e <_raise_r+0x42>
 800df76:	2316      	movs	r3, #22
 800df78:	6003      	str	r3, [r0, #0]
 800df7a:	2001      	movs	r0, #1
 800df7c:	e7e7      	b.n	800df4e <_raise_r+0x12>
 800df7e:	2400      	movs	r4, #0
 800df80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df84:	4628      	mov	r0, r5
 800df86:	4798      	blx	r3
 800df88:	2000      	movs	r0, #0
 800df8a:	e7e0      	b.n	800df4e <_raise_r+0x12>

0800df8c <raise>:
 800df8c:	4b02      	ldr	r3, [pc, #8]	; (800df98 <raise+0xc>)
 800df8e:	4601      	mov	r1, r0
 800df90:	6818      	ldr	r0, [r3, #0]
 800df92:	f7ff bfd3 	b.w	800df3c <_raise_r>
 800df96:	bf00      	nop
 800df98:	20000084 	.word	0x20000084

0800df9c <_kill_r>:
 800df9c:	b538      	push	{r3, r4, r5, lr}
 800df9e:	4d07      	ldr	r5, [pc, #28]	; (800dfbc <_kill_r+0x20>)
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	4608      	mov	r0, r1
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	602b      	str	r3, [r5, #0]
 800dfaa:	f7f3 fcb5 	bl	8001918 <_kill>
 800dfae:	1c43      	adds	r3, r0, #1
 800dfb0:	d102      	bne.n	800dfb8 <_kill_r+0x1c>
 800dfb2:	682b      	ldr	r3, [r5, #0]
 800dfb4:	b103      	cbz	r3, 800dfb8 <_kill_r+0x1c>
 800dfb6:	6023      	str	r3, [r4, #0]
 800dfb8:	bd38      	pop	{r3, r4, r5, pc}
 800dfba:	bf00      	nop
 800dfbc:	200027f0 	.word	0x200027f0

0800dfc0 <_getpid_r>:
 800dfc0:	f7f3 bca2 	b.w	8001908 <_getpid>

0800dfc4 <__swhatbuf_r>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfcc:	2900      	cmp	r1, #0
 800dfce:	b096      	sub	sp, #88	; 0x58
 800dfd0:	4615      	mov	r5, r2
 800dfd2:	461e      	mov	r6, r3
 800dfd4:	da0d      	bge.n	800dff2 <__swhatbuf_r+0x2e>
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dfdc:	f04f 0100 	mov.w	r1, #0
 800dfe0:	bf0c      	ite	eq
 800dfe2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dfe6:	2340      	movne	r3, #64	; 0x40
 800dfe8:	2000      	movs	r0, #0
 800dfea:	6031      	str	r1, [r6, #0]
 800dfec:	602b      	str	r3, [r5, #0]
 800dfee:	b016      	add	sp, #88	; 0x58
 800dff0:	bd70      	pop	{r4, r5, r6, pc}
 800dff2:	466a      	mov	r2, sp
 800dff4:	f000 f848 	bl	800e088 <_fstat_r>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	dbec      	blt.n	800dfd6 <__swhatbuf_r+0x12>
 800dffc:	9901      	ldr	r1, [sp, #4]
 800dffe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e002:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e006:	4259      	negs	r1, r3
 800e008:	4159      	adcs	r1, r3
 800e00a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e00e:	e7eb      	b.n	800dfe8 <__swhatbuf_r+0x24>

0800e010 <__smakebuf_r>:
 800e010:	898b      	ldrh	r3, [r1, #12]
 800e012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e014:	079d      	lsls	r5, r3, #30
 800e016:	4606      	mov	r6, r0
 800e018:	460c      	mov	r4, r1
 800e01a:	d507      	bpl.n	800e02c <__smakebuf_r+0x1c>
 800e01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	2301      	movs	r3, #1
 800e026:	6163      	str	r3, [r4, #20]
 800e028:	b002      	add	sp, #8
 800e02a:	bd70      	pop	{r4, r5, r6, pc}
 800e02c:	ab01      	add	r3, sp, #4
 800e02e:	466a      	mov	r2, sp
 800e030:	f7ff ffc8 	bl	800dfc4 <__swhatbuf_r>
 800e034:	9900      	ldr	r1, [sp, #0]
 800e036:	4605      	mov	r5, r0
 800e038:	4630      	mov	r0, r6
 800e03a:	f7fd fd69 	bl	800bb10 <_malloc_r>
 800e03e:	b948      	cbnz	r0, 800e054 <__smakebuf_r+0x44>
 800e040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e044:	059a      	lsls	r2, r3, #22
 800e046:	d4ef      	bmi.n	800e028 <__smakebuf_r+0x18>
 800e048:	f023 0303 	bic.w	r3, r3, #3
 800e04c:	f043 0302 	orr.w	r3, r3, #2
 800e050:	81a3      	strh	r3, [r4, #12]
 800e052:	e7e3      	b.n	800e01c <__smakebuf_r+0xc>
 800e054:	89a3      	ldrh	r3, [r4, #12]
 800e056:	6020      	str	r0, [r4, #0]
 800e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	9b00      	ldr	r3, [sp, #0]
 800e060:	6163      	str	r3, [r4, #20]
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	6120      	str	r0, [r4, #16]
 800e066:	b15b      	cbz	r3, 800e080 <__smakebuf_r+0x70>
 800e068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e06c:	4630      	mov	r0, r6
 800e06e:	f000 f81d 	bl	800e0ac <_isatty_r>
 800e072:	b128      	cbz	r0, 800e080 <__smakebuf_r+0x70>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f023 0303 	bic.w	r3, r3, #3
 800e07a:	f043 0301 	orr.w	r3, r3, #1
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	89a3      	ldrh	r3, [r4, #12]
 800e082:	431d      	orrs	r5, r3
 800e084:	81a5      	strh	r5, [r4, #12]
 800e086:	e7cf      	b.n	800e028 <__smakebuf_r+0x18>

0800e088 <_fstat_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4d07      	ldr	r5, [pc, #28]	; (800e0a8 <_fstat_r+0x20>)
 800e08c:	2300      	movs	r3, #0
 800e08e:	4604      	mov	r4, r0
 800e090:	4608      	mov	r0, r1
 800e092:	4611      	mov	r1, r2
 800e094:	602b      	str	r3, [r5, #0]
 800e096:	f7f3 fc9e 	bl	80019d6 <_fstat>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	d102      	bne.n	800e0a4 <_fstat_r+0x1c>
 800e09e:	682b      	ldr	r3, [r5, #0]
 800e0a0:	b103      	cbz	r3, 800e0a4 <_fstat_r+0x1c>
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	bd38      	pop	{r3, r4, r5, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200027f0 	.word	0x200027f0

0800e0ac <_isatty_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	4d06      	ldr	r5, [pc, #24]	; (800e0c8 <_isatty_r+0x1c>)
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	4608      	mov	r0, r1
 800e0b6:	602b      	str	r3, [r5, #0]
 800e0b8:	f7f3 fc9d 	bl	80019f6 <_isatty>
 800e0bc:	1c43      	adds	r3, r0, #1
 800e0be:	d102      	bne.n	800e0c6 <_isatty_r+0x1a>
 800e0c0:	682b      	ldr	r3, [r5, #0]
 800e0c2:	b103      	cbz	r3, 800e0c6 <_isatty_r+0x1a>
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	bd38      	pop	{r3, r4, r5, pc}
 800e0c8:	200027f0 	.word	0x200027f0

0800e0cc <_init>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	bf00      	nop
 800e0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0d2:	bc08      	pop	{r3}
 800e0d4:	469e      	mov	lr, r3
 800e0d6:	4770      	bx	lr

0800e0d8 <_fini>:
 800e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0da:	bf00      	nop
 800e0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0de:	bc08      	pop	{r3}
 800e0e0:	469e      	mov	lr, r3
 800e0e2:	4770      	bx	lr
